[{"id":0,"href":"/dev/mods/Mods-0-Overview/","title":"Overview of modifiers","parent":"Guide to Modifiers","content":"Modifiers    Modifiers often change or affect some aspect of the gameplay, usually by messing with the game\u0026rsquo;s notefield. Some modifiers can be selected through the options menu before starting a song, but there are also simfiles with scripted modifiers that tend to have a wildly different experience than just a regular simfile. (Generally, they\u0026rsquo;re known as \u0026ldquo;modfiles\u0026rdquo;)\nGeneral notes    Often, modifiers (or \u0026ldquo;mods\u0026rdquo;) have what\u0026rsquo;s called an \u0026ldquo;approach rate\u0026rdquo;, which is how fast it\u0026rsquo;ll go to reach the specified value. When not specified, an approach rate of 1 is used, which means 100% per second.\nSo, if you have a modifier that goes from 0 to 200%, it will take 2 seconds, while 200% to -150% would take 3.5 seconds. The approach rate can be a floating point number, so values like 0.24523 or 3.7 are valid.\nApproach rates cannot be negative in SM5.3 alpha 4.8.2 or earlier, or it will crash.\nIn \u0026ldquo;NotITG\u0026rdquo; \u0026amp; SM5.3 alpha 4.8.3 and later, negative approach rates (specifically -1 in NotITG, but in general on SM5) are used to signify \u0026ldquo;instant\u0026rdquo; rates. in older versions of SM5, you can use large approach rate numbers (such as 10000 or 9e9) to achieve this.\nMagnitude is usually shown in the form of percentages for modifiers, and are capable of being negative, unless otherwise noted.\nThere are also column-specific modifiers. This affect a single column instead of the whole notefield. In NotITG, column numbering starts at 0, while it starts at 1 in SM5.\nFor the column-specific lua functions (except for gradients, mentioned later), nil can be given as the column to affect all columns of a player. (Does not work in alpha 4.8.2 of SM5.3 or earlier)\nModstrings    Normally these modifiers will have a modstring form that follows this general format: *\u0026lt;approach rate\u0026gt; \u0026lt;percentage\u0026gt;% \u0026lt;mod name\u0026gt; but some modifiers, like speed mods, may not follow that format.\nWhen not given a percentage, 100% is assumed. no is another way to say 0% as well.\neg: *2 bumpy is the same as *2 100% bumpy.\nThe % is optional and modstrings can work without it, but it\u0026rsquo;s there for visual convenience.\neg: *2 200 bumpy is the same as *2 200% bumpy.\nThe mod name is case insensitive.\nThese modstrings can be used either by simfile ATTACKS, course MODS, or through PlayerOptions' FromString function. Smaller numbers like 0.5 require the preceding 0.\nAny modifier or sub modifier that is boolean has a turning point of 50%. Giving 50% or more will turn it on, while 49% or lower will turn it off.\nPlayerOptions Functions    Going from modstrings to PlayerOptions functions, the magnitude has to be divided by 100 most of the time, and mod names are now case sensitive.\nWhen calling a PlayerOptions function, they often have an optional final boolean parameter that can be placed after all of the parameters that allows for function chaining similar to what Actor does, allowing for something like this:\nXMod(2.5, 3, true):Drunk(-0.75, 2.7)\nWhen passed nothing in the parameters, the function returns two values: the current magnitude, the current approach rate. However, when passed in parameters, the previous values for magnitude and rate are returned.\nYou can grab a player\u0026rsquo;s PlayerOptions for scripting purposes by doing the following: local po = {GAMESTATE:GetPlayerState('PlayerNumber_P1'):GetPlayerOptions('ModsLevel_Song'),GAMESTATE:GetPlayerState('PlayerNumber_P2'):GetPlayerOptions('ModsLevel_Song')}\nThis stores them into a table for easy access at any point during the song. po[1] is what you\u0026rsquo;d use to affect Player 1, while po[2] affects Player 2. Both will need to be used to affect both players with the same mods.\nSimfile ATTACKS and course MODS will override \u0026amp; reset anything set through lua on the Song level, and cannot be player-specific.\nVideo Examples    The video examples for the modifiers use an excerpt of GPOP\u0026rsquo;s expert chart for \u0026ldquo;My Story\u0026rdquo; from the \u0026ldquo;G.P.O.P.S. 3\u0026rdquo; pack.\nThe speed mod used is 1.5x, and the noteskin usually is the default noteskin for dance mode, with Exact3D used when needed.\nThe magnitude used in the video examples also may not be the value used in the textual example.\n"},{"id":1,"href":"/dev/mods/Mods-1-Speed-Mods/","title":"Speed","parent":"Guide to Modifiers","content":"These modifiers are used to control the scroll speed of notes in gameplay. These modifiers are not column-specific, unlike later mods described elsewhere.\nNegative speed modifiers cannot be selected from the Player Options menu, nor can it be set through the lua functions PlayerOptions provides, but it can become negative through the use of mod strings (and some modfiles have taken advantage of that).\nXMod    Desc: The \u0026ldquo;X\u0026rdquo; in \u0026ldquo;XMod\u0026rdquo; is for multiply, with it often showing as 1x or 2.5x or some other multiplier value followed by an x. Larger multiplier numbers result in a faster scroll. This speed mod type is capable of showing BPM changes, stops and other chart segment types. Often ranges of 1 to 4 (and in between at practically any specified granularity) can be common.\nQuirks: When setting this through the lua function it will immediately override CMod, MMod or AMod unlike how it functions in courses or modstring-based modfiles.\nPlayerOptions format: XMod(\u0026lt;multiplier\u0026gt;,\u0026lt;approach rate\u0026gt;)\nExample: XMod(2.5, 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;multiplier\u0026gt;x\nExample: *0.5 2.5x\nCMod    Desc: The \u0026ldquo;C\u0026rdquo; in \u0026ldquo;CMod\u0026rdquo; is for \u0026ldquo;Constant BPM Scroll\u0026rdquo;, with it often showing as C200 or C450.5 or some other BPM value preceded by a C. Larger BPM values result in faster scroll speeds. This speed mod type visibly ignores chart segments and only shows a constant speed. (some forks of SM even disqualify if the chart has BPM changes and CMod is used!) Other modifiers still work on CMod, though.\nOften ranges of 200 to 400 (and in between at practically any specified granularity) can be common, but some people may be more comfortable reading at slower or faster speeds.\nQuirks: When setting this through the lua function it will immediately override XMod, MMod or AMod unlike how it functions in courses or modstring-based modfiles.\nPlayerOptions format: CMod(\u0026lt;BPM Value\u0026gt;,\u0026lt;approach rate\u0026gt;)\nExample: CMod(200, 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; c\u0026lt;BPM value\u0026gt;\nExample: *0.5 c200\nMMod    Desc: The \u0026ldquo;M\u0026rdquo; in \u0026ldquo;MMod\u0026rdquo; is for \u0026ldquo;Maximum BPM Scroll\u0026rdquo;, with it often showing as m200 or m450.5 or some other BPM value preceded by an m. Unlike CMod, this speed modifier supports everything that XMod does. Instead of specifying a BPM speed for the whole song, this specifies the maximum scroll speed that will be used.\nOften ranges of 200 to 400 (and in between at practically any specified granularity) can be common, but some people may be more comfortable reading at slower or faster speeds.\nQuirks: The magnitude is in the hundreds most of the time, so a larger approach rate might be needed.\nPlayerOptions format: MMod(\u0026lt;BPM Value\u0026gt;,\u0026lt;approach rate\u0026gt;)\nExample: MMod(200, 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; m\u0026lt;BPM value\u0026gt;\nExample: *0.5 m200\nAMod    Desc: The \u0026ldquo;A\u0026rdquo; in \u0026ldquo;AMod\u0026rdquo; is for \u0026ldquo;Average BPM Scroll\u0026rdquo;, with it often showing as a200 or a450.5 or some other BPM value preceded by an a. Like MMod, this modifier supports everything XMod supports, and the song\u0026rsquo;s BPM is used in calculations, the average of the song\u0026rsquo;s BPMs is calculated instead of the maximum BPM being used. (and the amount of time a BPM lasts for is taken into account, too)\nOften ranges of 200 to 400 (and in between at practically any specified granularity) can be common, but some people may be more comfortable reading at slower or faster speeds.\nQuirks: The magnitude is in the hundreds most of the time, so a larger approach rate might be needed.\nPlayerOptions format: AMod(\u0026lt;BPM Value\u0026gt;,\u0026lt;approach rate\u0026gt;)\nExample: AMod(200, 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; a\u0026lt;BPM value\u0026gt;\nExample: *0.5 a200\nRandomSpeed    Desc: Each note is given a random addition to its' speed mod, with larger additions being applied when a higher magnitude is used. This does not have column-specific controls.\nNormally, 100 is the magnitude used (as it\u0026rsquo;s not commonly used in modfiles), but other values are valid.\nQuirks: Only values greater than zero have any visual effect. Missed notes revert to the actual speed mod upon passing the receptors.\nPlayerOptions format: RandomSpeed(\u0026lt;magnitude\u0026gt;,\u0026lt;approach rate\u0026gt;)\nExample: RandomSpeed(1, 0.125)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; randomspeed\nExample: *0.125 100% randomspeed\nSpeed Modifier Controllers    These modifiers control the internal parts of the speed modifiers above, and usually shouldn\u0026rsquo;t be used unless there\u0026rsquo;s a good reason to. Like the speed mods above, these aren\u0026rsquo;t column-specific either, but can support negative numbers like how the modstrings do. Unlike the speed modifiers listed above, there is no modstring form for any of these.\nTimeSpacing    Desc: Allows one to switch between CMod and the remaining mods. At 100%, this tells the game to use CMods. 0% means use XMod/MMod/AMod.\nIt\u0026rsquo;s tweenable like other modifiers, which allows one to tween \u0026lsquo;between\u0026rsquo; CMods and the other mods.\nOften the values used only range between 0 and 100%\nQuirks: The \u0026lsquo;tweening\u0026rsquo; capability can cause interesting stutter effects while tweening. Some modfiles take advantage of this. This cannot be replicated with the plain CMod \u0026amp; XMod PlayerOptions functions, but can be replicated with modstrings.\nPlayerOptions format: TimeSpacing(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: TimeSpacing(1)\nScrollBPM (Used for CMod, values are BPMs)    Desc: This is the underlying BPM value that CMod uses. Common values are the same as those for CMod.\nQuirks: Like the BPM-based speed mods, the magnitude is often in the 100s, so a larger approach rate might be needed.\nPlayerOptions format: ScrollBPM(\u0026lt;BPM value\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: ScrollBPM(1, 2)\nAvarageScrollBPM    Desc: This is the underlying BPM value that AMod uses. When this is zero, AMod is turned off. Common values are the same as those for AMod.\nQuirks: Like the BPM-based speed mods, the magnitude is often in the 100s, so a larger approach rate might be needed.\nPlayerOptions format: AvarageScrollBPM(\u0026lt;BPM value\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: AvarageScrollBPM(200, 0.5)\nMaxScrollBPM    Desc: This is the underlying BPM value that MMod uses. When this is zero, MMod is turned off, and AMod is able to be used. Common values are the same as those for MMod.\nQuirks: Like the BPM-based speed mods, the magnitude is often in the 100s, so a larger approach rate might be needed.\nPlayerOptions format: MaxScrollBPM(\u0026lt;BPM value\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: MaxScrollBPM(200, 0.5)\nScrollSpeed    Desc: This is the underlying multiplier value that XMod uses. Common values are the same as those for XMod.\nQuirks: N/A\nPlayerOptions format: ScrollSpeed(\u0026lt;multiplier\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: ScrollSpeed(2.5, 0.5)\n"},{"id":2,"href":"/dev/mods/Mods-2-Perspective-Mods/","title":"Perspective","parent":"Guide to Modifiers","content":"Perspective modifiers tilt and skew the notefield itself to allow for a feeling of depth. Scripted modfiles can use these to do effects like rocking the notefield back and forth among other effects (And is definitely noticable with 3D noteskins).\nUnlike most modifiers available through PlayerOptions, these functions only return values in terms of tilt and skew and don\u0026rsquo;t return the current/previous approach rate. Perspecitve modifiers aren\u0026rsquo;t column-specific either.\nHallway    Desc: The notefield is tilted away from the player, so that notes start far away and come closer. Very noticable with 3D noteskins.\nTilt is negative, while Skew is at zero.\nCommon ranges can go from 50% to 150%, while the Player Options menu uses 100%.\nNegative magnitudes activate Distant instead.\nQuirks: Going over 150% Hallway may result in the notefield\u0026rsquo;s draw distance limit showing up, or even result in the notefield rotating over 90 degrees and becoming unreadable.\nPlayerOptions format: Hallway(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Hallway(1.5, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; hallway\nExample: *1 150% hallway\nDistant    Desc: The notefield is tilted towards the player, so that notes start close to the screen and go away. Very noticable with 3D noteskins.\nTilt is positive, while Skew is at zero.\nCommon ranges can go from 50% to 200%, while the Player Options menu uses 100%.\nNegative magnitudes activate Hallway instead.\nQuirks: Going over 200% Distant may result in the notefield rotating over 90 degrees and becoming unreadable.\nPlayerOptions format: Distant(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Distant(2, 2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; distant\nExample: *2 200% distant\nDistant video example\nIncoming    Desc: The notefield is tilted away from the player, like Hallway, but the notefield is also skewed so that notes approach from the middle of the screen.\nTilt is negative, while Skew is positive.\nCommon ranges can go from -150% to 150%, while the Player Options menu uses 100%.\nQuirks: Going over 150% Incoming may result in the notefield\u0026rsquo;s draw distance limit showing up, or even result in the notefield rotating over 90 degrees and becoming unreadable.\nPlayerOptions format: Incoming(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Incoming(1.5, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; incoming\nExample: *1 150 incoming\nIncoming video example\nSpace    Desc: The notefield is tilted away from the player, like Distant, but the notefield is also skewed so that notes approach from the sides of the screen.\nTilt and Skew are positive.\nCommon ranges can go from -150% to 200%, while the Player Options menu uses 100%.\nQuirks: Going beyond the common range may result in the notefield\u0026rsquo;s draw distance limit showing up, or even result in the notefield rotating over 90 degrees and becoming unreadable.\nPlayerOptions format: Space(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Space(1, 3)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; space\nExample: *3 100% space\nSpace video example\nOverhead    Desc: The notefield is parallel to the screen, and appears directly flat. Returns whether both tilt and skew are at zero before the function was called.\nBoth Tilt and Skew are at zero.\nQuirks: N/A\nPlayerOptions format: Overhead(\u0026lt;Set Overhead?\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Overhead(true, 0.2)\nModstring format: *\u0026lt;approach rate\u0026gt; overhead\nExample: *0.2 overhead\nPerspective Modifier Controllers    These modifiers control the internal parts of the modifiers above, and generally shouldn\u0026rsquo;t be used unless finer control is desired. Like the perspective modifiers, these aren\u0026rsquo;t column-specific either. Unlike the perspective modifiers, there is no modstring form for any of these, and the standard current/previous magnitude \u0026amp; approach rate are returned.\nSkew    Desc: Alters the vanish point of the notefield. Positive values move the point towards the middle of the screen, with 100% being fully on the center, while negative values move it towards the sides of the screen.\nNormally, this has the same ranges as Incoming \u0026amp; Space.\nQuirks: Will have no visible effect when players are centered on the screen. Can result in interesting x axis movements from z axis modifiers.\nPlayerOptions format: Skew(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Skew(10, 3)\nSkew video example\nTilt    Desc: Rotates the notefield on the x axis near the receptors so the arrows get closer or farther from the player when they initially appear. Positive values tilt the notefield away from the player, while negative values point it towards the player.\nNormally, this has the same ranges as Distant \u0026amp; Hallway.\nQuirks: Same as Distant and Hallway.\nPlayerOptions format: Tilt(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Tilt(2, 4)\nVideo example: See Distant \u0026amp; Hallway.\n"},{"id":3,"href":"/dev/mods/Mods-3-Column-Movement-Mods/","title":"Column movement","parent":"Guide to Modifiers","content":"Column movement modifiers allow one to move the columns in any direction. Usually, these are used to create \u0026ldquo;column swaps\u0026rdquo;, which alter the visual order of the columns in gameplay.\nFlip    Desc: Flip alters the column order to make it appear backwards. For Example, if the column order is usually left down up right, the order becomes right up down left.\nNegative values have been used to space out the columns, so values from -200% to 100% could be possible.\n50% coverges all columns to the same horizontal spot.\nDifferent amounts could be used in combination with Invert.\nQuirks: N/A\nPlayerOptions format: Flip(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Flip(1.25, 10)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; flip\nExample: *10 125% flip\nFlip video example\nInvert    Desc: Invert flips each half of the notefield. When doubles charts are being played, the two \u0026ldquo;players\u0026rdquo; are inverted separately.\nCommonly, 100% is used, but different amounts could be used in combination with Flip.\nQuirks: If used in 5.2 and earlier, Invert may act in unexpected ways on modes with an odd number of columns (eg. Pump).\nIn 5.3, Invert will have no visual effect if the mode has three columns per side or less (eg. Pump halfdoubles).\nPlayerOptions format: Invert(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Invert(1, 0.3)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; invert\nExample: *0.3 100% invert\nInvert video example\nMove    Desc: Move is a set of modifiers that are column-specific by nature and has variants for the X,Y, and Z axis. 100% moves a column forward on an axis by one dance mode column width. This can allow for column swaps that can\u0026rsquo;t be achieved through just Flip and Invert, but can take more time to set up.\nQuirks: Since alpha 4.8.3, all columns can\u0026rsquo;t be hit from the modstring (possible in NotITG), but can be done through the lua function. Right now (as of SM5.3 alpha 4.7), Pump mode\u0026rsquo;s column-spacing is 48 pixels instead of 64, so use multiples of 0.75 instead when working with Pump mode. It\u0026rsquo;s also the only way to move the center panel with any of the column-movement mods.\nAvailable Variants: MoveXCol, MoveYCol, MoveZCol\nAvailable Variants (modstring): movex, movey, movez\nPlayerOptions format: \u0026lt;Move variant\u0026gt;(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExamples: MoveXCol(1, -0.5, 4, true):MoveYCol(2, 1, 0.5, true):MoveZCol(3, 5, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\u0026lt;column\u0026gt;\nExamples: *4 -50 movex1, *0.5 100 movey2, *1 500 movez3\nMove video example\nTipsy    Desc: Tipsy makes the columns bob up and down in a sinusoidal pattern. There is a tangent-based variant as well.\nCommon ranges go from -300 to 300%\nQuirks: When combined with Drunk in SM5.1 or earlier, hold bodies may detach from the hold head.\nAvailable Variants: Tipsy, TanTipsy\nAvailable Variants (modstring): tipsy, tantipsy\nPlayerOptions format: \u0026lt;Tipsy variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Tipsy(1.5, 3) TanTipsy(1.5, 3)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *3 150% tipsy *3 150% tantipsy\nTipsy video example\nAvailable sub modifiers:    TipsyOffset    Desc: TipsyOffset shifts the point in time of where Tipsy is in its' sinusoidal pattern.\nValues of -100 to 100% have a noticable effect.\nAvailable Variants: TipsyOffset, TanTipsyOffset\nAvailable Variants (modstring): tipsyoffset, tantipsyoffset\nTipsySpacing    Desc: TipsySpacing shifts the phase for each column after the first column.\nValues of -100 to 100% have a noticable effect.\nAvailable Variants: TipsySpacing, TanTipsySpacing\nAvailable Variants (modstring): tipsyspacing, tantipsyspacing\nTipsySpeed    Desc: TipsySpeed affects how fast Tipsy goes through its' sinusoidal pattern with a multiplier. Lower magnitudes slow it down, while higher magnitudes speed it up. -100% freezes the effect completely. Results in a very jittery effect when using game uptime as the mod timer.\nCommon ranges can go from -100 to 100%\nAvailable Variants: TipsySpeed, TanTipsySpeed\nAvailable Variants (modstring): tipsyspeed, tantipsyspeed\nCombining Flip \u0026amp; Invert    Flip and invert, when paired together, allow for unusual column ordering. Here\u0026rsquo;s what\u0026rsquo;s possible in dance \u0026amp; pump modes.\n  Dance mode (4 panel) Pump mode (5 panel)   75\u0026percnt; flip + 75\u0026percnt; invert 66.666667\u0026percnt; (AKA 2/3) flip + 133.333333\u0026percnt; (AKA 4/3) invert       25\u0026percnt; flip + -75\u0026percnt; invert 33.333333\u0026percnt; (AKA 1/3) flip + -133.333333\u0026percnt; (AKA -4/3) invert       100\u0026percnt; flip + -100\u0026percnt; invert 100\u0026percnt; flip + -100\u0026percnt; invert       25\u0026percnt; flip + 125\u0026percnt; invert 33.333333\u0026percnt; (AKA 1/3) flip + 166.666666\u0026percnt; (AKA 5/3) invert       75\u0026percnt; flip + -125\u0026percnt; invert 66.666666\u0026percnt; (AKA 2/3) flip + -166.666666\u0026percnt; (AKA -5/3) invert       25\u0026percnt; flip + -25\u0026percnt; invert 33.333333\u0026percnt; (AKA 1/3) flip + -33.333333\u0026percnt; (AKA -1/3) invert       "},{"id":4,"href":"/dev/mods/Mods-4-Scroll-Mods/","title":"Scroll","parent":"Guide to Modifiers","content":"Scroll modifiers affect the general scroll of the notefield. This is often used to change from upscroll to downscroll among other effects.\nReverse    Desc: Reverse flips the scroll of the whole notefield from upscroll to downscroll. There is also a column-specific version that adds onto the value of normal Reverse.\nCommonly, 50% or 100% is used on its' own.\nQuirks: When going over 100%, the effect goes backwards, with 200% being normal upscroll again. Negative values go upward resulting in a longer notefield. This applies to the column-specific version, too. Going to 100% on column 1 will also make the judgment \u0026amp; combo swap positions.\nFor example, 100% reverse + 100% reverse on a single column would result in that single column having upscroll and the rest being downscroll.\nAvailable Variants (modstring): reverse, reverse\u0026lt;column\u0026gt;\nPlayerOptions format: Reverse(\u0026lt;magnitude\u0026gt; \u0026lt;approach rate\u0026gt;)\nExample: Reverse(1, 2)\nColumn-specific format: ReverseCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: ReverseCol(2, 0.25, 0.25)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nexample: *2 100% reverse *0.25 25% reverse2\nReverse video example\nAvailable sub modifiers:    UnboundedReverse    Desc: UnboundedReverse is a boolean modifier that makes it so Reverse no longer bounces back when going over 100% (Acts similar to negative reverse, behavior-wise). This affects all reverse-type modifiers, including Split, Alternate and Cross. In NotITG, this is known as reversetype.\nPlayerOptions format: UnboundedReverse(\u0026lt;enable\u0026gt;)\nmodstring format: \u0026lt;enable\u0026gt; unboundedreverse\nSplit    Desc: The second half of the notefield gets reversed.\nCommonly, 50% or 100% is used on its' own.\nQuirks: Same as Reverse. If used in modes with an odd number of columns, the middle column also gets affected.\nPlayerOptions format: Split(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Split(0.75,3)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; split\nexample: *3 75% reverse\nSplit video example\nAlternate    Desc: Every other column gets reversed, starting with the second column. Also can be activated with ultraman in NotITG.\nCommonly, 50% or 100% is used on its' own.\nQuirks: Same as Reverse.\nPlayerOptions format: Alternate(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Alternate(1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; alternate\nexample: *1 100% alternate\nAlternate video example\nCross    Desc: The inner part of the notefield gets reversed with the outer sides staying as upscroll.\nCommonly, 50% or 100% is used on its' own.\nQuirks: Same as Reverse.\nPlayerOptions format: Cross(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Cross(0.25, 4)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; cross\nexample: *4 25% cross\nCross video example\nCentered    Desc: Centered moves the notefield down to where the receptors are at the center of the whole field at 100% (which is usually around the middle of the screen), taking the above scroll modifiers into account (As seen with Alternate in the video example). Commonly used to create \u0026ldquo;driven drops\u0026rdquo;. Can also be activated with converge in modstring form.\nAlso often combined with other scroll modifiers above.\nCommonly used at 100%, but more or less can be used. Negative values move the notefield up.\nQuirks: The speed it has when going to the center depends on multiple theme metrics, so \u0026ldquo;driven drop\u0026rdquo; effects may be inconsistent across multiple themes. Most modfiles expect ITG positioning, which is available as the \u0026ldquo;Lower\u0026rdquo; note position setting in the default theme. The player\u0026rsquo;s Combo also moves down based on the current amount of Centered.\nPlayerOptions format: Centered(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Centered(1. 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; centered\nexample: *0.5 100% centered\nCentered video example\nCenteredPath    Desc: While Centered moves the notefield down in position, CenteredPath moves the columns down their current path in multiples of the column\u0026rsquo;s width (Commonly 64 pixels for dance mode). This consist amount allows for more consistent \u0026ldquo;driven drops\u0026rdquo; across different setups. In NotITG, this modifier is called centered2.\nLarge amounts of CenteredPath may be used because \u0026ldquo;driven drops\u0026rdquo; can span the whole screen height.\nWhen combined with the opposite amount of MoveY in upscroll, interesting movement effects can be achieved.\nQuirks: Because CenteredPath moves columns down the path, receptors may become affected by mods that otherwise would not affect them (As seen in the video example with Tornado), and note paths may look different.\nPlayerOptions format: CenteredPath(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: CenteredPath(2.5,0.23)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; centeredpath\nexample: *0.23 250% centeredpath\nCenteredPath video example\nWhat\u0026rsquo;s a \u0026ldquo;Driven Drop\u0026rdquo;?    Driven Drops are an effect where the notes are stationary while the receptor moves down to hit the notes. (As seen in the ITG course, \u0026ldquo;Driven\u0026rdquo;)\nOften, speed mod has to be taken into account for these (which can be made simpler by forcing a speed mod).\nCenteredPath makes it easier due to using a consistent amount that doesn\u0026rsquo;t depend on multiple theme metrics, but the resulting effect may look different.\n\u0026ldquo;SCAR\u0026rdquo; Gimmicks    Before column-specific Reverse existed, Combinations of Split, Cross, Alternate and Reverse (SCAR, for short) were used to generate column-specific reverse in 4 panel modes. Here\u0026rsquo;s what\u0026rsquo;s possible when combining the modifiers.\n   SPLIT CROSS ALTERNATE Reverse LDUR reversed (1 = reversed)     50% -50% 50% 0% 0001   50% 50% -50% 0% 0010   -50% 50% -50% 0% 0100   50% 50% 50% 0% 0111   -50% -50% -50% 100% 1000   0% -100% 0% 100% 1001   50% 0% -100% 100% 1010   50% -50% -50% 100% 1011   -100% 0% 0% 100% 1100   -50% -50% 50% 100% 1101   -50% 50% -50% 100% 1110    "},{"id":5,"href":"/dev/mods/Mods-5-Rotation-Mods/","title":"Rotation","parent":"Guide to Modifiers","content":"Rotation modifiers rotate the notes on the x, y or z axis, and can also rotate the receptors in some cases.\nSome noteskins may affect how the effect looks due to how rotation and zoom interact in the notefield.\nSM5.3 and Open/NotITG act the same way, while earlier versions of SM5 may act differently.\nDizzy    Desc: Notes spin as they reach the receptor, with more rotationz added the farther away from the receptor a note is.\nCommon values involve multiples of PI to make some amount of rotation happen per beat.\nFor example, 628% means the notes do a full rotation every beat before hitting the receptor.\nQuirks: Unlike Twirl \u0026amp; Roll, the rotation is based on beat distance and not physical distance. Hold heads aren\u0026rsquo;t affected unless DizzyHolds is used.\nPlayerOptions format: Dizzy(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Dizzy(3.14, 2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; dizzy\nExample: *2 314% dizzy\nDizzy video example\nAvailable sub modifiers:    DizzyHolds    Desc: Enables Dizzy to affect hold heads. When used in 5.1, hold heads will still turn while held.\nPlayerOptions format: DizzyHolds(\u0026lt;enable\u0026gt;)\nModstring format: \u0026lt;enable\u0026gt; dizzyholds\nTwirl    Desc: Notes twirl as they reach the receptor, with more rotationy added the farther away from the receptor a note is.\nValues can go from -200 to 200% and beyond.\nQuirks: Also affects holds in their entirety. Single-sided noteskins may result in invisible notes sometimes (As seen in the video example).\nPlayerOptions format: Twirl(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Twirl(2.2, 3)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; twirl\nExample: *3 220% twirl\nTwirl video example\nRoll    Desc: Notes roll as they reach the receptor, with more rotationx added the farther away from the receptor a note is.\nValues can go from -200 to 200% and beyond.\nQuirks: Single-sided noteskins may result in invisible notes sometimes (As seen in the video example). Does not affect hold heads.\nPlayerOptions format: Roll(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Roll(1.7, 3.4)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; roll\nExample: *3.4 170% roll\nRoll video example\nConfusion    Desc: The notes and receptors spin constantly. Has X, Y and Z variants available. Not commonly used in modfiles compared to its' Offset sub-modifier. 100% usually works as a magnitude.\nQuirks: The effect is beat-based, with the magnitude being a multiplier. 100% means a full rotation every ~6.28 (2*PI) beats\nAvailable Variants: Confusion, ConfusionX, ConfusionY\nAvailable Variants (modstring): confusion, confusionx, confusiony, confusionz (NotITG alias for confusion)\nPlayerOptions format: \u0026lt;Confusion variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Confusion(0.5, 2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *2 50% confusion\nConfusion video example\nAvailable sub modifiers:    ConfusionOffset    Desc: Allows one to rotate the notes and receptors by a static amount. Good for keeping the notes \u0026amp; receptors oriented properly while rotating the Player. Note that the magnitude is in radians.\n628.3185% is enough for a full rotation. (Another way to put it is PI * 200 if used in modstrings and PI * 2 if using PlayerOptions.)\nAvailable Variants: ConfusionOffset, ConfusionXOffset, ConfusionYOffset\nAvailable Variants (Column-Specific): ConfusionOffsetCol, ConfusionXOffsetCol, ConfusionYOffsetCol\nAvailable Variants (modstring): confusionoffset, confusionoffset\u0026lt;column\u0026gt;, confusionxoffset, confusionxoffset\u0026lt;column\u0026gt;, confusionyoffset, confusionyoffset\u0026lt;column\u0026gt;, confusionzoffset (NotITG alias for confusionoffset), confusionzoffset\u0026lt;column\u0026gt; (NotITG alias for confusionoffset\u0026lt;column\u0026gt;)\nPlayerOptions format: \u0026lt;ConfusionOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nColumn-specific format: \u0026lt;Column-specific variant\u0026gt;(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nOrient    Desc: Orient rotates the notes and receptors based on their travel direction. That means other mods, like Drunk, can influence this modifier.\nOften 50% to 100% is good enough for an effect, as too much may make notes unreadable.\nQuirks: When a column is Reversed, 314% ConfusionOffset may be desired for the column (or field if the whole field is reversed)\nPlayerOptions format: Orient(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Orient(1, 0.25)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; orient\nExample: *0.25 100% orient\nOrient video example\n"},{"id":6,"href":"/dev/mods/Mods-6-Zoom-Mods/","title":"Zoom","parent":"Guide to Modifiers","content":"Zoom modifiers affect the size of the notefield or notes \u0026amp; receptors. Zoom works a bit differently in SM5 in that it also affects the z axis unlike in ITG/SM3.95, which only affect x \u0026amp; y.\nExtra scaling may be required if recreating effects between ITG and SM5.\nMods that work on the note and column-level may make holds look a bit weird due to how hold scaling works.\nMini    Desc: Mini scales down the entire notefield, while maintaining the receptor position.\nThe following equation for calculating the zoom is this:\n1 - (0.5*mini), with mini being the magnitude as input into the PlayerOptions function.\n100% is half-size, and 200% is zero zoom.\nNegative values make the notefield bigger.\nQuirks: Positive and negative values increase how far down the notefield draws, Judgment \u0026amp; combo scale down with Mini, but will not scale up when Mini is negative (Unlike OpenITG/NotITG, where the judgment scales down or up and the combo is unaffected). Going beyond 200% will result in the notefield having a negative zoom, which might look weird.\nPlayerOptions format: Mini(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Mini(1,0.2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; mini\nExample: *0.2 100% mini\nMini video example\nTiny    Desc: Tiny scales down the notes and receptors instead of the entire field. Variants for all three axis are available, as are column-specific variants. These are multiplied onto the whole field variants.\nThe following equation for calculating the zoom is this:\n0.5^tiny, with tiny being the magnitude as input into the PlayerOptions function.\nNotITG uses the equation from Mini instead of this one for the zoom.\nCommon values can be from -100 to 100%.\nQuirks: Judgment \u0026amp; combo scale down with Tiny, but will not scale up when Tiny is negative. Positive values bring the columns closer to simulate what Mini does, unlike NotITG. (Use the column-specific version if that effect is desired.)\nAvailable Variants: Tiny, TinyX, TinyY, TinyZ\nAvailable Variants (Column-Specific): TinyCol, TinyXCol, TinyYCol, TinyZCol, HoldTinyXCol (Hold bodies only, HoldTinyCol is an alias)\nAvailable Variants (modstring): tiny, tiny\u0026lt;column\u0026gt;, tinyx, tinyx\u0026lt;column\u0026gt;, tinyy, tinyy\u0026lt;column\u0026gt;, tinyz, tinyz\u0026lt;column\u0026gt;, holdtiny (NotITG alias that hits all columns, Hold bodies only, holdgirth is also an alias), holdtinyx\u0026lt;column\u0026gt; (Hold bodies only, holdtiny\u0026lt;column\u0026gt; is an alias (NotITG uses this name instead), holdgirth\u0026lt;column\u0026gt; is a NotITG alias)\nPlayerOptions format: \u0026lt;Tiny variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExamples: Tiny(2, 0.5)\nColumn-specific format: \u0026lt;Column-specific variant\u0026gt;(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExamples: TinyXCol(1, 1, 1, true):TinyYCol(2, -2, 0.5, true):TinyZCol(3, -4, 10, true):HoldTinyXCol(4, 3, 0.2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExamples: *0.5 -200% tinyy *1 100% tinyx1, *0.5 -200% tinyy2, *10 -400% tinyz3, *0.2 300% holdtinyx4\nTiny video example\nAvailable sub modifiers:    TinyUsesMiniCalc    Desc: When active, all Tiny mods use the zoom equation from Mini instead of the normal one. This allows for negative zooms and is useful for replicating NotITG effects that expect this behavior.\nPlayerOptions format: TinyUsesMiniCalc(\u0026lt;enable\u0026gt;)\nModstring format: \u0026lt;enable\u0026gt; tinyusesminicalc\nPulse    Desc: Pulse is a set of mods that make the notes zoom in and out as they approach the receptors.\nPulseOuter affects the main pulsing effect, while PulseInner offsets the maximum \u0026amp; minumum zoom. Also has a tangent-based variant.\nPulseOuter is noticable at 100%, and 100% PulseInner offsets the zoom to between 2x and 1x zoom.\nQuirks: N/A\nAvailable Variants: PulseInner, PulseOuter, TanPulseInner, TanPulseOuter\nAvailable Variants (modstring): pulseinner, pulseouter, pulse (NotITG alias that hits both inner \u0026amp; outer), tanpulseinner, tanpulseouter, tanpulse (NotITG alias that hits both inner \u0026amp; outer)\nPlayerOptions format: \u0026lt;Pulse variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExamples: PulseInner(1, 0.5, true):PulseOuter(1, 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExamples: *0.5 100% pulseinner, *0.5 100% pulseouter\nPulse video example\nAvailable sub modifiers:    PulseOffset    Desc: Affects the phase of the sinusoidal pattern used for Pulse.\nAvailable Variants: PulseOffset, TanPulseOffset\nAvailable Variants (modstring): pulseoffset, tanpulseoffset\nPlayerOptions format: \u0026lt;PulseOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nPulsePeriod    Desc: Affects the speed of the pulsing with a multiplier (1 + magnitude).\nPositive magnitudes slow down the pulsing, negative magnitudes speed it up.\n-100% freezes the effect at the minumum.\nAvailable Variants: PulsePeriod, TanPulsePeriod\nAvailable Variants (modstring): pulseperiod, tanpulseperiod\nPlayerOptions format: \u0026lt;PulsePeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nShrinkLinear    Desc: ShrinkLinear has notes start out zoomed in, and linearly go down to normal size based on how far away the note is from hitting the receptor. There are also separate variants for all three axis.\n50% is still readable in normal circumstances.\nNegative amounts may result in notes starting backwards and ending normally.\nQuirks: N/A\nAvailable Variants: ShrinkLinear, ShrinkLinearX, ShrinkLinearY, ShrinkLinearZ\nAvailable Variants (modstring): shrinklinear, shrinklinearx, shrinklineary, shrinklinearz\nPlayerOptions format: \u0026lt;ShrinkLinear variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExamples: ShrinkLinear(0.5,1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExamples: *1 50% shrinklinear\nShrinklinear video example\nShrinkMult    Desc: ShrinkMult has notes that start zoomed out and decelerate to normal zoom. There are also separate variants for all three axis.\n100% is a decent amount.\nQuirks: Using negative amounts will result in notes going to negative infinity zoom before going back to normal.\nAvailable Variants: ShrinkMult, ShrinkMultX, ShrinkMultY, ShrinkMultZ\nAvailable Variants (modstring): shrinkmult, shrinkmultx, shrinkmulty, shrinkmultz\nPlayerOptions format: \u0026lt;ShrinkMult variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExamples: ShrinkMult(1, 2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExamples: *2 100% shrinkmult\nShrinkmult video example\n"},{"id":7,"href":"/dev/mods/Mods-7-Acceleration-Mods/","title":"Acceleration","parent":"Guide to Modifiers","content":"Acceleration modifiers mess with the vertical acceleration of the note. It lets people have notes speed up, slow down, or do a 180 among other things.\nBoomerang    Desc: Notes start flying out from the top of the screen, do a 180 at around the bottom of the screen, and go back towards the receptors.\nThe modifier has a simple on/off nature, so any nonzero magnitude will work. (Unless the VariableBoomerang sub modifier is in play)\nQuirks: Hold bodies will draw only after the hold head does the 180. NotITG changed Boomerang\u0026rsquo;s behavior to work with the magnitude by default. See the VariableBoomerang sub modifier for replicating NotITG\u0026rsquo;s behavior.\nPlayerOptions format: Boomerang(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Boomerang(1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; boomerang\nExample: *1 100% boomerang\nBoomerang video example\nAvailable sub modifiers:    VariableBoomerang    Desc: When active, Boomerang now takes its' magnitude into account, allowing for more varied effects.\nPlayerOptions format: VariableBoomerang(\u0026lt;enable\u0026gt;)\nModstring format: \u0026lt;enable\u0026gt; variableboomerang\nBrake    Desc: Notes start fast at the bottom, but slow down as they approach the receptors.\nCommon values range from 50 to 200%\nQuirks: Going over 100% can result in notes going past the receptors and then rebounding back.\nAvailable variants (modstring): brake, land (alias for brake)\nPlayerOptions format: Brake(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Brake(2, 5)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *5 200% brake\nBrake video example\nBoost    Desc: Notes start slow at the bottom, but speed up as they approach the receptors.\nCommon values range from -100% to 200%.\nQuirks: Going over 100% may result in notes bobing at the bottom before going up.\nPlayerOptions format: Boost(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Boost(1.5, 3)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; boost\nExample: *3 150% boost\nBoost video example\nExpand    Desc: the visual speed of the field\u0026rsquo;s notes oscilates back and forth, as if the notefield is expanding and contracting. Also has a tangent variant.\nCommon values range from -50 to 100%\nQuirks: When using a negative magnitude, the notes may go beyond the receptor. Stops and Delays will pause the effect altogether.\nAvailable variants: Expand, TanExpand\nAvailable variants (modstring): expand, tanexpand\nPlayerOptions format: \u0026lt;Expand variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Expand(1.2, 0.25)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.25 120% Expand\nExpand video example\nAvailable sub modifiers:    ExpandPeriod    Desc: Can speed up or slow down the oscilation. Positive speeds up, while negative slows down, -100% stops the effect.\nAvailable variants: ExpandPeriod, TanExpandPeriod\nAvailable variants (modstring): expandperiod, tanexpandperiod, expandsize (alias in NotITG), tanexpandsize (alias in NotITG)\nPlayerOptions format: \u0026lt;ExpandPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nWave    Desc: Notes slow down in the middle and then speed up to the receptors. 200% makes notes effectively stop at the middle before going up to the receptors. Also has a column-specific version.\nCommon values range from 50 to 200%.\nQuirks: N/A\nAvailable variants (modstring): wave, wave\u0026lt;column\u0026gt;\nPlayerOptions format: Wave(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Wave(2, 0.5)\nColumn-specific format: WaveCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: WaveCol(1, -2, 10, true):WaveCol(2, -1, 5, true):WaveCol(3, 1, 5, true):WaveCol(4, 2, 10, true)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt; Example: *0.5 200% wave *10 -200 wave1, *5 -100% wave2, *5 100% wave3, *10 200% wave4\nWave video example\nAvailable sub modifiers:    WavePeriod    Desc: Affects how many times the notes slow down. Positive values increase the period (less times the notes slow down), while negative values decrease the period (more times the notes slow down). -100% stops the effect.\nModstring variants: waveperiod, wavesize (NotITG alias), waveperiod\u0026lt;column\u0026gt;\nPlayerOptions format: WavePeriod(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nColumn-specific format: WavePeriodCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nWaveOffset    Desc: Shifts where the slow down point is. Positive values shift towards the receptor, negative values shift away from the receptor.\nModstring variants: waveoffset, waveoffset\u0026lt;column\u0026gt;\nPlayerOptions format: WaveOffset(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nColumn-specific format: WaveOffsetCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\n"},{"id":8,"href":"/user-guide/meta/","title":"Front Matter","parent":"User Guide","content":""},{"id":9,"href":"/user-guide/","title":"User Guide","parent":"Project OutFox Wiki","content":""},{"id":10,"href":"/dev/mods/Mods-8-Visibility-Mods/","title":"Visibility","parent":"Guide to Modifiers","content":"Visibility Modifiers    Visibility modifiers hide various parts of the gameplay screen, such as the background, notes, receptors and other things.\nCover    Desc: Cover hides the song background. The range between fully lit and fully hidden scales based on the current value of the BGBrightness preference.\nUse negative amounts to bring back the background if BGBrightness is less than 1. A lot of modfiles use large amounts of negative cover to deal with any positive value BGBrightness could have.\nIf used on only one player, only that player\u0026rsquo;s side will have the background dimmed/hidden, with a fade in the middle between the two players.\nQuirks: If BGBrightness is at 0, then no amount of negative Cover can bring back the background.\nPlayerOptions format: Cover(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Cover(0.5, 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; cover\nExample: *0.5 50% cover\nBlind    Desc: Blind hides the information relating to judgment \u0026amp; combo.\nUnlike most On/Off modifiers, this modifier is float-based. Any positive magnitude will turn it on.\nQuirks: In OpenITG, the noteflashes also turn into all fantastic (W1) noteflashes, which is why some of the modding community discourages its' use.\nPlayerOptions format: Blind(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Blind(1,1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; blind\nExample: *1 100% blind\nHideHoldJudgments    Desc: Hides the OK/NG judgments that appear upon the end of a hold note. It\u0026rsquo;s called \u0026ldquo;hoholdjudge\u0026rdquo; or \u0026ldquo;halgun\u0026rdquo; in NotITG.\nQuirks: N/A\nPlayerOptions format: HideHoldJudgments(\u0026lt;enable\u0026gt;)\nExample: HideHoldJudgments(true)\nModstring format: \u0026lt;enable\u0026gt; hideholdjudgments\nExample: 100% hideholdjudgments\nHideNoteFlash    Desc: Turns off the noteflashes for a given column. Since alpha 4.8.3, all columns can\u0026rsquo;t be hit from the modstring (possible in NotITG), but can be done through the lua function. Also known as \u0026ldquo;hidenoteflashes\u0026rdquo; in NotITG.\nQuirks: N/A\nAvailable variants (modstring): hidenoteflash\u0026lt;column\u0026gt;, hidenoteflash (NotITG alias that hits all columns), hidenoteflashes\u0026lt;column\u0026gt; (NotITG alias), hidenoteflashes (NotITG alias that hits all columns)\nPlayerOptions format: HideNoteFlashCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: HideNoteFlashCol(2, true)\nModstring format: \u0026lt;enable\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: 100% hidenoteflash2\nMinTNSToHideNotes    Desc: This sets the minimum judgment that is needed to hide the notes upon hitting. There is no modstring form.\nQuirks: The default is set in Preferences.ini, holds aren\u0026rsquo;t subject to this setting.\nPlayerOptions format: MinTNSToHideNotes(\u0026lt;TapNoteScore enum\u0026gt;)\nExample: MinTNSToHideNotes('TapNoteScore_W1')\nDrawSize    Desc: DrawSize is a set of modifiers that affect how far down and up the notefield will draw notes.\nDrawSize affects notes below the receptor (usually notes that have yet to be hit), while DrawSizeBack affects notes above the receptor (usually notes that were visibly missed)\nNot often used unless some mod effects need a longer or shorter field, but can be used to ensure a consistent field length across multiple setups through ratios.\nQuirks: The farther the notefield is allowed to draw, the more notes will be on-screen, which can hurt game performance. This is a multiplier, so it depends on your theme\u0026rsquo;s metrics.\nAvailable variants: DrawSize, DrawSizeBack\nAvailable variants (modstring): drawsize, drawsizefront (NotITG alias for drawsize), drawdistance (NotITG alias for drawsize), drawdistancefront (NotITG alias for drawsize), drawsizeback, drawdistanceback (NotITG alias for drawsizeback)\nPlayerOptions format: \u0026lt;DrawSize variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: DrawSize(-0.5,1)\nModstring format: *\u0026lt;approach rate\u0026gt;, \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 -50% drawsize\nDark    Desc: Dark hides the receptors (but not the noteflashes). There is a column-specific variant and it adds onto the normal variant.\nBecause of this additive property, the range often used can go between -100 and 100%.\nQuirks: N/A\nAvailable variants: Dark, DarkCol\nAvailable variants (modstring): dark, dark\u0026lt;column\u0026gt;\nPlayerOptions format: Dark(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Dark(1, 0.125)\nColumn-specific format: DarkCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: DarkCol(1, 0.25, 1, true):DarkCol(2, 0.5, 1, true):DarkCol(3, 0.75, 1, true):DarkCol(4, 0.90, 1, true)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.125 100% dark *1 25% dark1, *1 50% dark2, *1 75% dark3, *1 90% dark4\nDark video example\nStealth    Desc: Stealth hides the notes. When activating, notes start glowing white (0 to 50%), and then the glow fades away to an invisible note (50 to 100%). There\u0026rsquo;s a column-specific version. All variants add onto eachother, so it\u0026rsquo;s possible to have one variant at 100%, and undo it for another type with a different variant at -100%.\nBecause of this additive property, the range often used can go between -100 and 100%.\nStealthMines affects the mines only, while StealthHolds only affects the hold bodies (topcap, body, bottomcap)\nNotITG has column-specific versions of those variants, too.\nQuirks: N/A\nAvailable variants: Stealth, StealthCol, StealthHolds, StealthMines\nAvailable variants (modstring): stealth, stealth\u0026lt;column\u0026gt;, stealthmines, minestealth (NotITG\u0026rsquo;s name for stealthmines), minestealth\u0026lt;column\u0026gt; (NotITG only), hidemines (NotITG alias), hidemines\u0026lt;column\u0026gt; (NotITG alias), stealthholds, holdstealth (NotITG\u0026rsquo;s name for stealthholds), holdstealth\u0026lt;columns\u0026gt; (NotITG\u0026rsquo;s only), hideholds (NotITG alias), hideholds\u0026lt;column\u0026gt; (NotITG alias)\nPlayerOptions format: \u0026lt;Stealth variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Stealth(0.90, 1, true):StealthMines(-0.4, 1)\nColumn-specific format: StealthCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: StealthCol(1, 0.25, 1, true):StealthCol(2, 0.5, 1, true):StealthCol(3, 0.75, 1, true):StealthCol(4, 0.90, 1, true)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 90% stealth, *1 -40% stealthmines *1 25% stealth1, *1 50% stealth2, *1 75% stealth3, *1 90% stealth4\nStealth video example\nAvailable sub modifiers:    StealthType    Desc: When active, Stealth, Sudden, Hidden, Blink and RandomVanish act based on y offset (distance from the receptor) instead of the visible y position on the screen.\nPlayerOptions format: StealthType(\u0026lt;enable\u0026gt;)\nModstring format: \u0026lt;enable\u0026gt; stealthtype\nStealthPastReceptors    Desc: When active, Stealth, Sudden, Hidden, Blink and RandomVanish will not revert to zero upon passing the receptors.\nPlayerOptions format: StealthPastReceptors(\u0026lt;enable\u0026gt;)\nModstring format: \u0026lt;enable\u0026gt; stealthpastreceptors\nSudden    Desc: Notes start invisible and appear at around the middle of the notefield.\nDue to how Stealth works, values between -100 and 100% usually get used.\nQuirks: When combined with Hidden, the appearance point moves down.\nPlayerOptions format: Sudden(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Sudden(1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; sudden\nExample: *1 100% sudden\nSudden video example\nAvailable sub modifiers:    SuddenOffset    Desc: Shifts the point where the notes appear. Positive values shifts the point away from the receptors, while negative values shift it towards the receptors.\nPlayerOptions format: SuddenOffset(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; suddenoffset\nHidden    Desc: Notes start visible and disappear at around the middle of the notefield.\nDue to how Stealth works, values between -100 and 100% usually get used.\nQuirks: When combined with Sudden, the disappearance point moves up.\nPlayerOptions format: Hidden(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Hidden(0.75, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; hidden\nExample: *1 75% hidden\nHidden video example\nAvailable sub modifiers:    HiddenOffset    Desc: Shifts the point where the notes disappear. Positive values shifts the point away from the receptors, while negative values shift it towards the receptors.\nPlayerOptions format: HiddenOffset(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; hiddenoffset\nBlink    Desc: The notes blink in and out of sight. The blinking itself is based on game uptime.\nUnlike most modifiers, this only has an on and off state. Any positive magnitude will work.\nQuirks: Due to the magnitude not affecting anything and the clock being based on game uptime (unless ModTimer is changed), Blink is considered a bad mod in terms of scripted modfiles, and its' use is discouraged.\nPlayerOptions format: Blink(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Blink(1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; blink\nExample: *1 100% blink\nBlink video example\nRandomVanish    Desc: The notes disappear, then reappear in a different/random column. NotITG supposedly has an offset sub modifier. NotITG also split this modifier into separate \u0026ldquo;Randomize\u0026rdquo; and \u0026ldquo;Vanish\u0026rdquo; modifiers.\nNot used that much.\nQuirks: The \u0026ldquo;Random\u0026rdquo; feature of \u0026ldquo;RandomVanish\u0026rdquo; was removed in SM5 beta2a, but should fully work in NotITG.\nPlayerOptions format: RandomVanish(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: RandomVanish(1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; randomvanish\nExample: *1 100% randomvanish\nRandomVanish video example\n"},{"id":11,"href":"/dev/","title":"Developers and Creators","parent":"Project OutFox Wiki","content":""},{"id":12,"href":"/dev/mods/Mods-9-Path-Mods/","title":"Path modifiers","parent":"Guide to Modifiers","content":"Path modifiers affect the path a note takes to the receptor, often curving it in some way or creating a type of wave in the movement.\nDrunk    Desc: Drunk makes the notes and receptors move left and right in a constantly shifting sinusoidal wave. There are extra variants for the Y and Z axis, as well as tangent variants.\nCommon values can be practically any value, due to its' wide use in modfiles. Try starting with -200 to 200% for an initial effect.\nQuirks: When combined with Tipsy in SM5.1 and earlier, hold bodies may detatch from the hold head. The phase of the sinusoidal wave depends on game uptime unless the mod timer is changed.\nAvailable variants: Drunk, DrunkY, DrunkZ, TanDrunk, TanDrunkY, TanDrunkZ\nAvailable variants (modstring): drunk, drunky, drunkz, tandrunk, tandrunky, tandrunkz\nPlayerOptions format: \u0026lt;Drunk variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Drunk(3, 2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *2 300% drunk\nDrunk video example\nAvailable sub modifiers:    DrunkOffset    Desc: Offsets the phase of the sinusoidal wave, which is added onto the offset caused by time.\nAvailable variants: DrunkOffset, DrunkYOffset, DrunkZOffset, TanDrunkOffset, TanDrunkYOffset, TanDrunkZOffset\nAvailable variants (modstring): drunkoffset, drunkyoffset, drunkzoffset, tandrunkoffset, tandrunkyoffset, tandrunkzoffset\nPlayerOptions format: \u0026lt;DrunkOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nDrunkPeriod    Desc: Alters the period of the sinusoidal wave. Positive values decrease the period, negative values increase the period. -100% just results in the columns moving, but the notes won\u0026rsquo;t go back and forth.\nAvailable variants: DrunkPeriod, DrunkYPeriod, DrunkZPeriod, TanDrunkPeriod, TanDrunkYPeriod, TanDrunkZPeriod\nAvailable variants (modstring): drunkperiod, drunksize (NotITG alias for drunkperiod), drunkyperiod, drunkysize (NotITG alias for drunkyperiod), drunkzperiod, drunkzsize (NotITG alias for drunkzperiod), tandrunkperiod, tandrunksize (NotITG alias for tandrunkperiod), tandrunkyperiod, tandrunkysize (NotITG alias for tandrunkyperiod), tandrunkzperiod, tandrunkzsize (NotITG alias for tandrunkzperiod)\nPlayerOptions format: \u0026lt;DrunkPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nDrunkSpacing    Desc: Alters the amount of space between the columns, and is cyclical like DrunkOffset. Used to be called \u0026ldquo;DrunkOffset\u0026rdquo; before SM5.3 and NotITG v4.\nAvailable variants: DrunkSpacing, DrunkYSpacing, DrunkZSpacing, TanDrunkSpacing, TanDrunkYSpacing, TanDrunkZSpacing\nAvailable variants (modstring): drunkspacing, drunkyspacing, drunkzspacing, tandrunkspacing, tandrunkyspacing, tandrunkzspacing\nPlayerOptions format: \u0026lt;DrunkSpacing variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nDrunkSpeed    Desc: Affects the speed of Drunk through a multiplier. Positive numbers speed it up, negative numbers slow it down, -100% freezes the effect. Will look really jittery when using game uptime as the mod timer.\nAvailable variants: DrunkSpeed, DrunkYSpeed, DrunkZSpeed, TanDrunkSpeed, TanDrunkYSpeed, TanDrunkZSpeed\nAvailable variants (modstring): drunkspeed, drunkyspeed, drunkzspeed, tandrunkspeed, tandrunkyspeed, tandrunkzspeed\nPlayerOptions format: \u0026lt;DrunkSpeed variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBounce    Desc: Notes bounce to the right. There\u0026rsquo;s also a Z axis variant that has notes bounce towards the player.\n100% is good enough to give a good idea for the effect.\nQuirks: N/A\nAvailable variants: Bounce, BounceZ\nAvailable variants (modstring): bounce, bouncez\nPlayerOptions format: \u0026lt;Bounce variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Bounce(1, 0.25)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.25 100% bounce\nBounce video example\nAvailable sub modifiers:    BouncePeriod    Desc: Affects the period of the bouncing. Positive numbers increase the period, while negative numbers decrease the period. -100% moves the columns to the highest point of the bounce.\nAvailable variants: BouncePeriod, BounceZPeriod\nAvailable variants (modstring): bounceperiod, bouncezperiod\nPlayerOptions format: \u0026lt;BouncePeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBounceOffset    Desc: Offsets the phase of the bounce.\nAvailable variants: BounceOffset, BounceZOffset\nAvailable variants (modstring): bounceoffset, bouncezoffset\nPlayerOptions format: \u0026lt;BounceOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nTornado    Desc: Notes swirl around as they go to the receptor. Has a Z axis variant, as well as tangent variants.\nCommon values range from -200 to 200%\nQuirks: N/A\nAvailable variants: Tornado, TornadoZ, TanTornado, TanTornadoZ\nAvailable variants (modstring): tornado, tornadoz, tantornado, tantornadoz\nPlayerOptions format: \u0026lt;Tornado variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Tornado(1, 0.2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.2 100% tornado\nTornado video example\nAvailable sub modifiers:    TornadoOffset    Desc: Offsets the phase of the sinusoidal curves for each column. Large values are needed for noticable effects.\nAvailable variants: TornadoOffset, TornadoZOffset, TanTornadoOffset, TanTornadoZOffset\nAvailable variants (modstring): tornadooffset, tornadozoffset, tantornadooffset, tantornadozoffset\nPlayerOptions format: \u0026lt;TornadoOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nTornadoPeriod    Desc: Affects the period of the sinusoidal curves for each column. Positive values decrease the period, while negative values increase the period. -100% visually removes the effect.\nAvailable variants:\nAvailable variants (modstring):\nPlayerOptions format: \u0026lt;TornadoPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBumpy    Desc: Notes go back and forth on the z axis as they go towards the receptor. Has variants for all axis as well as tangent variants and column-specific variants. Unlike the variants for Stealth and Dark, this does not add onto the values for normal Bumpy.\nCommon values could be practically anywhere due to its' wide use in modfiles. Try starting with -300 to 300% for an initial amount.\nQuirks: N/A\nAvailable variants: Bumpy, BumpyX, BumpyY, TanBumpy, TanBumpyY, TanBumpyZ\nAvailable variants (column-specific): BumpyCol, BumpyXCol, BumpyYCol, TanBumpyCol, TanBumpyXCol, TanBumpyYCol\nAvailable variants (modstring): bumpy, bumpyx, bumpyy, bumpyz (NotITG alias for bumpy), bumpy\u0026lt;column\u0026gt;, bumpyx\u0026lt;column\u0026gt;, bumpyy\u0026lt;column\u0026gt;, bumpyz\u0026lt;column\u0026gt; (NotITG alias for bumpy\u0026lt;column\u0026gt;), tanbumpy, tanbumpyx, tanbumpyy, tanbumpyz (NotITG alias for tanbumpy), tanbumpy\u0026lt;column\u0026gt;, tanbumpyx\u0026lt;column\u0026gt;, tanbumpyy\u0026lt;column\u0026gt;, tanbumpyz\u0026lt;column\u0026gt; (NotITG alias for tanbumpy\u0026lt;column\u0026gt;)\nPlayerOptions format: \u0026lt;Bumpy variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Bumpy(3, 0.5)\nColumn-specific format: \u0026lt;Column-specific variant\u0026gt;(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: BumpyCol(1, -3, 3, true):BumpyCol(2, -1, 1, true):BumpyCol(3, 1, 1, true):BumpyCol(4, 3, 3) Modstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.5 300% Bumpy\nBumpy video example\nAvailable sub modifiers:    BumpyOffset    Desc: Offsets the phase of the back and forth wave. The min/max and middle points are reachable through increments of 25%.\nAvailable variants: BumpyOffset, BumpyXOffset, BumpyYOffset, TanBumpyOffset, TanBumpyXOffset, TanBumpyYOffset\nAvailable variants (column-specific): BumpyOffsetCol, BumpyXOffsetCol, BumpyYOffsetCol, TanBumpyOffsetCol, TanBumpyXOffsetCol, TanBumpyYOffsetCol\nAvailable variants (modstring): bumpyoffset, bumpyxoffset, bumpyyoffset, bumpyzoffset (NotITG alias for bumpyoffset), bumpyoffset\u0026lt;column\u0026gt;, bumpyxoffset\u0026lt;column\u0026gt;, bumpyyoffset\u0026lt;column\u0026gt;, bumpyzoffset\u0026lt;column\u0026gt; (NotITG alias for bumpyoffset\u0026lt;column\u0026gt;), tanbumpyoffset, tanbumpyxoffset, tanbumpyyoffset, tanbumpyoffset\u0026lt;column\u0026gt;, tanbumpyxoffset\u0026lt;column\u0026gt;, tanbumpyyoffset\u0026lt;column\u0026gt;\nPlayerOptions format: \u0026lt;BumpyOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nColumn-specific format: \u0026lt;Column-specific variant\u0026gt;(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBumpyPeriod    Desc: Affects the period of the back and forth wave. Positive values increase the period, while negative values decrease the period. -100% stops the effect and moves the columns to the negative-most value.\nAvailable variants: BumpyPeriod, BumpyXPeriod, BumpyYPeriod, TanBumpyPeriod, TanBumpyXPeriod, TanBumpyYPeriod\nAvailable variants (column-specific): BumpyPeriodCol, BumpyXPeriodCol, BumpyYPeriodCol, TanBumpyPeriodCol, TanBumpyXPeriodCol, TanBumpyYPeriodCol\nAvailable variants (modstring): bumpyperiod, bumpyxperiod, bumpyyperiod, bumpyzperiod (NotITG alias for bumpyperiod), bumpysize (NotITG alias for bumpyperiod), bumpyxsize (NotITG alias for bumpyxperiod), bumpyysize (NotITG alias for bumpyyperiod), bumpyzsize (NotITG alias for bumpyperiod), bumpyperiod\u0026lt;column\u0026gt;, bumpyxperiod\u0026lt;column\u0026gt;, bumpyyperiod\u0026lt;column\u0026gt;, bumpyzperiod\u0026lt;column\u0026gt; (NotITG alias for bumpyperiod\u0026lt;column\u0026gt;), tanbumpyperiod, tanbumpyxperiod, tanbumpyyperiod, tanbumpyzperiod (NotITG alias for tanbumpyperiod), tanbumpysize (NotITG alias for tanbumpyperiod), tanbumpyxsize (NotITG alias for tanbumpyxperiod), tanbumpyysize (NotITG alias for tanbumpyyperiod), tanbumpyzsize (NotITG alias for tanbumpyperiod), tanbumpyperiod\u0026lt;column\u0026gt;, tanbumpyxperiod\u0026lt;column\u0026gt;, tanbumpyyperiod\u0026lt;column\u0026gt;\nPlayerOptions format: \u0026lt;BumpyPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nColumn-specific format: \u0026lt;Column-specific variant\u0026gt;(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBeat    Desc: Notes \u0026amp; receptors pulse to the left and right to the beat. Contrary to popular belief, it is not the only mod. There are variants for each axis.\nCommon values range from -250% to 200%, but could be practically anything because of its' wide use in modfiles.\nQuirks: Beat in OpenITG \u0026amp; NotITG does not respond well to very high BPMs.\nAvailable variants: Beat, BeatY, BeatZ\nAvailable variants (modstring): beat, beaty, beatz\nPlayerOptions format: \u0026lt;Beat variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Beat(1.5, 0.2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.2 150% Beat\nBeat video example\nAvailable sub modifiers:    BeatMult    Desc: Multiply the BPM that Beat is reacting to. Negative values slow down, while positive values speed up. -50% is half, while 100% is double.\nAvailable variants: BeatMult, BeatYMult, BeatZMult\nAvailable variants (modstring): beatmult, beatymult, beatzmult\nPlayerOptions format: \u0026lt;BeatMult variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBeatOffset    Desc: Offset the beat that the effect is going off of. 50% makes the effect act on the half beat instead of on the beat.\nAvailable variants: BeatOffset, BeatYOffset, BeatZOffset\nAvailable variants (modstring): beatoffset, beatyoffset, beatzoffset\nPlayerOptions format: \u0026lt;BeatOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBeatPeriod    Desc: Affects the period of the wave used. Positive values increase the period, negative values reduce the period. -100% makes the field shift back and forth to the beat.\nAvailable variants: BeatPeriod, BeatYPeriod, BeatZPeriod\nAvailable variants (modstring): beatperiod, beatyperiod, beatzperiod, beatsize (NotITG alias for beatperiod), beatysize (NotITG alias for beatyperiod), beatzsize (NotITG alias for beatzperiod)\nPlayerOptions format: \u0026lt;BeatPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBeatCap (NotITG only)    Desc: When active (any nonzero magnitude), Beat acts like it does in SM5, being able to properly react to high BPMs.\nAvailable variants (modstring): beatcap, beatcapy, beatcapz\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nZigzag    Desc: Notes move left and right on a triangle wave. There is also a Z axis variant.\nCommon values range from -400 to 400%\nQuirks: N/A\nAvailable variants: Zigzag, ZigzagZ\nAvailable variants (modstring): zigzag, zigzagz\nPlayerOptions format: \u0026lt;Zigzag variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Zigzag(2, 2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *2 200% zigzag\nZigzag video example\nAvailable sub modifiers:    ZigzagOffset    Desc: Offsets the phase of the triangle wave used.\nAvailable variants: ZigzagOffset, ZigzagZOffset\nAvailable variants (modstring): zigzagoffset, zigzagzoffset\nPlayerOptions format: \u0026lt;ZigzagOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nZigzagPeriod    Desc: Affects the period of the triangle wave. Positive values increase the period, negative values decrease the period, -100% shifts the field to the negative extrema.\nAvailable variants: ZigzagPeriod, ZigzagZPeriod\nAvailable variants (modstring): zigzagperiod, zigzagzperiod, zigzagsize (NotITG alias for zigzagperiod), zigzagzsize (NotITG alias for zigzagzperiod)\nPlayerOptions format: \u0026lt;ZigzagPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nSawtooth    Desc: Notes move left and right on a sawtooth wave. There is also a Z axis variant.\nCommon values range from -200 to 200%.\nQuirks: N/A\nAvailable variants: Sawtooth, SawtoothZ\nAvailable variants (modstring): sawtooth, sawtoothz\nPlayerOptions format: \u0026lt;Sawtooth variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Sawtooth(2, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 200% sawtooth\nSawtooth video example\nAvailable sub modifiers:    SawtoothOffset (NotITG only)    Desc: Offsets the sawtooth wave.\nAvailable variants (modstring): sawtoothoffset, sawtoothzoffset\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nSawtoothPeriod    Desc: Affects the period of the sawtooth wave. Positive values increase the period, negative values decrease the period. -100% makes the notefield disappear.\nAvailable variants: SawtoothPeriod, SawtoothZPeriod\nAvailable variants (modstring): sawtoothperiod, sawtoothzperiod, sawtoothsize (NotITG alias for sawtoothperiod), sawtoothzsize (NotITG alias for sawtoothzperiod)\nPlayerOptions format: \u0026lt;SawtoothPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nSquare    Desc: Notes \u0026amp; receptors are placed onto a (mostly) square wave. There is also a Z axis variant.\nCommon values range from -150 to 150%\nQuirks: The wave period is different from NotITG. Refer to https://gist.github.com/MrThatKid/2a8525a1abe1cb95073ef4eb64590b00\nAvailable variants: Square, SquareZ\nAvailable variants (modstring): square, squarez\nPlayerOptions format: \u0026lt;Square variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Square(-0.5, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 -50% square\nSquare video example\nAvailable sub modifiers:    SquareOffset    Desc: Offsets the square wave used.\nAvailable variants: SquareOffset, SquareZOffset\nAvailable variants (modstring): squareoffset, squarezoffset\nPlayerOptions format: \u0026lt;SquareOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nSquarePeriod    Desc: Alters the period of the square wave. Positive values increase the period, negative values decrease the period. -100% shifts the field to the positive extrema.\nAvailable variants: SquarePeriod, SquareZPeriod\nAvailable variants (modstring): squareperiod, sqaurezperiod\nPlayerOptions format: \u0026lt;SquarePeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nDigital    Desc: Notes are placed onto a \u0026lsquo;digital\u0026rsquo; sine wave. (Think of a sine wave, but more blocky looking). There is a variant for the Z axis, as well as tangent variants. Common values range from -400 to 400%\nQuirks: The wave period is different from NotITG. Refer to https://gist.github.com/MrThatKid/2a8525a1abe1cb95073ef4eb64590b00\nAvailable variants: Digital, DigitalZ, TanDigital, TanDigitalZ\nAvailable variants (modstring): Digital, DigitalZ, TanDigital, TanDigitalZ\nPlayerOptions format: \u0026lt;Digital variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Digital(-1.5, 3)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *3 -150% digital\nDigital video example\nAvailable sub modifiers:    DigitalSteps    Desc: Affects how many \u0026lsquo;levels\u0026rsquo; the digital sine wave has. Positive values make the wave smoother, while negative values make the wave more blocky. -50% visually removes the effect, -100% hides the notefield.\nAvailable variants: DigitalSteps, DigitalZSteps, TanDigitalSteps, TanDigitalZSteps\nAvailable variants (modstring): digitalsteps, digitalzsteps, tandigitalsteps, tandigitalzsteps\nPlayerOptions format: \u0026lt;DigitalSteps variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nDigitalOffset    Desc: Offsets the sine wave used in Digital. It\u0026rsquo;s really granular, so large amounts and large approach rates may be needed.\nAvailable variants: DigitalOffset, DigitalZOffset, TanDigitalOffset, TanDigitalZOffset\nAvailable variants (modstring): digitaloffset, digitalzoffset, tandigitaloffset, tandigitalzoffset\nPlayerOptions format: \u0026lt;DigitalOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nDigitalPeriod    Desc: Affects the period of the sine wave. Positive values increase the period, negative values decrease the period. -100% shifts the field to the negative extrema.\nAvailable variants: DigitalPeriod, DigitalZPeriod, TanDigitalPeriod, TanDigitalZPeriod\nAvailable variants (modstring): digitalperiod, digitalzperiod, tandigitalperiod, tandigitalzperiod\nPlayerOptions format: \u0026lt;DigitalPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nSpiral    Desc: Spiral is a set of modifiers that move notes in a spiral towards the receptors. There are three axis variants that are usually combined to make the full spiral effect (X + Y, Y + Z, X + Z)\nCommon values range from -200 to 200%, with a period of -99% as a starting point.\nQuirks: When at 50% Reverse, the spiral effect looks much more like a full spiral. SpiralY does not affect holds in SM5.3 unless some NoteField functions are used (Refer to the SpiralHolds sub modifier for more details. The video example uses NoteField:set_holds_use_nonstandard_y_pos only.)\nAvailable variants: SpiralX, SpiralY, SpiralZ\nAvailable variants (modstring): spiralx, spiraly, spiralz\nPlayerOptions format: \u0026lt;Spiral variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: SpiralX(1,1,true):SpiralY(1,1,true):SpiralXPeriod(-0.99,1,true):SpiralYPeriod(-0.99,1,true)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 100% spiralx, *1 100% spiraly, *1 -99% spiralxperiod, *1 -99% spiralyperiod\nSpiral video example\nAvailable sub modifiers:    SpiralOffset    Desc: Offsets the waves used for the spiral.\nAvailable variants: SpiralXOffset, SpiralYOffset, SpiralZOffset\nAvailable variants (modstring): spiralxoffset, spiralyoffset, spiralzoffset\nPlayerOptions format: \u0026lt;SpiralOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nSpiralPeriod    Desc: Affects the period of the waves used in spiral. Positive values decrease the period, negative values increase the period, -100% just has notes come in at a diagonal line.\nAvailable variants: SpiralXPeriod, SpiralYPeriod, SpiralZPeriod\nAvailable variants (modstring): spiralxperiod, spiralyperiod, spiralzperiod\nPlayerOptions format: \u0026lt;SpiralPeriod variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nSpiralHolds (NotITG only)    Desc: When at a positive amount, the hold renderer is switched out for one that can handle spirals better with proper uv scaling. When at -100%, the hold render uses unscaled uvs for the holds, emulating old spiralholds behavior.\nThe old behavior can be mostly replicated in SM5 by combining NoteField:set_holds_orient_to_travel_dir with NoteField:set_holds_use_nonstandard_y_pos (works for most cases) or NoteField:set_hold_length_uses_beats (when dealing with ~50% reverse, holds become much more smooth)\nAvailable variants (modstring): spiralholds, holdtype (alias)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nAsymptote    Desc: The receptors become the zero point of an asymptote on the x axis, while notes get closer to it on the x axis.\nThere aren\u0026rsquo;t any real common values because this modifier isn\u0026rsquo;t used that much.\nQuirks: N/A\nPlayerOptions format: \u0026lt;Asymptote variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Asymptote(1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 100% asymptote\nAsymptote video example\nAvailable sub modifiers:    AsymptoteOffset    Desc: Moves the asymptote line. Negative values move it down.\nPlayerOptions format: AsymptoteOffset(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; asymptoteoffset\nAsymptoteScale    Desc: Affects the curve before veering off towards the asymptote. Negative values make the curve more noticable. Going past -100% flips the curve. Being at -100% hides the notefield. (Has an alias of \u0026ldquo;asymptotesize\u0026rdquo; in NotITG)\nPlayerOptions format: AsymptoteScale(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; asymptotescale\nParabola    Desc: A set of modifiers that turn the path into a parabola, with the zero point being the receptors. There are variants for all axis.\nCommon values range from -500 to 500%\nQuirks: N/A\nAvailable variants: ParabolaX, ParabolaY, ParabolaZ\nAvailable variants (modstring): parabolax, parabolay, parabolaz\nPlayerOptions format: \u0026lt;Parabola variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: ParabolaX(2, 0.125)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.125 200% parabolax\nParabola video example\nAvailable sub modifiers:    ParabolaOffset    Desc: Moves the zero point of the parabola.\nAvailable variants: ParabolaXOffset, ParabolaYOffset, ParabolaZOffset\nAvailable variants (modstring): parabolaxoffset, parabolayoffset, parabolazoffset\nPlayerOptions format: \u0026lt; variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nCubic    Desc: A set of modifiers that turn the path into a cubic graph, with the zero point being the receptors. There are variants for all axis.\nCommon values range from -200% to 200%\nQuirks: N/A\nAvailable variants: CubicX, CubicY, CubicZ\nAvailable variants (modstring): cubicx, cubicy, cubicz\nPlayerOptions format: \u0026lt;Cubic variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: CubicZ(3, 10)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *10 300% cubicz\nCubic video example\nAvailable sub modifiers:    CubicOffset    Desc: Moves the zero point of the cubic graph. This modifier is really granular, so use large amounts.\nAvailable variants: CubicXOffset, CubicYOffset, CubicZOffset\nAvailable variants (modstring): cubicxoffset, cubicyoffset, cubiczoffset\nPlayerOptions format: \u0026lt;CubicOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nXmode (SM5 only)    Desc: A replication of Pump It Up\u0026rsquo;s X scroll mode.\nThis is rarely used, so 100% should work fine.\nQuirks: The effect is reversed on player 2 in singles mode and is reversed on the second half of the notefield if doubles modes are used. (The video example shows player 1)\nPlayerOptions format: Xmode(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Xmode(1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; xmode\nExample: *1 100% xmode\nXmode video example\nAttenuate    Desc: Emphasises the note position the further a note gets away from the receptor. Has variants for all axis. NotITG V3 and later does not have the Y axis variant.\nCommon values range from -300 to 300%\nQuirks: This modifier is applied after every other modifier has run, so all path modifiers are taken into account for this.\nAvailable variants: AttenuateX, AttenuateY, AttenuateZ\nAvailable variants (modstring): attenuatex, attenuate (NotITG name), attenuatey, attenuatez\nPlayerOptions format: \u0026lt;Attenuate variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: AttenuateX(2, 4)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *4 200% attenuatex\nAttenuate video example\nAvailable sub modifiers:    AttenuateOffset    Desc: Offset the position emphasis used in Attenuate. Available variants: AttenuateXOffset, AttenuateYOffset, AttenuateZOffset\nAvailable variants (modstring): attenuatexoffset, attenuateoffset (NotITG name), attenuateyoffset, attenuatezoffset\nPlayerOptions format: \u0026lt;AttenuateOffset variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;) Modstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\n"},{"id":13,"href":"/user-guide/setup/","title":"Setup","parent":"User Guide","content":""},{"id":14,"href":"/user-guide/meta/about/","title":"About Project OutFox","parent":"Front Matter","content":"Project OutFox 5.3 is an effort to modernize and revitalize the open source rhythm gaming engine StepMania. It is led by Team Rizu, a development team led by community veteran Squirrel, as well as many other prominent members of the current community.\nWhat is different?    We have been focusing on refactoring the internal codebase to improve performance, adhere to modern coding practices, and enhance its capabilities on modern hardware and other platforms (including single-board embedded systems such as Raspberry Pi). Improvements to uncapped frame rate have also been recorded on older hardware, as far back as the Pentium E2180. It also incorporates a new default theme with more integrated features than previous versions, and new internal functions that can be used for future content.\nWe are also working to flesh out its support for other gameplay styles beyond just dance games, true to our belief that this is a rhythm game engine and not simply a simulator/emulator for popular dance game franchises.\nAs Project OutFox is a continuation of the 5.0.12 and 5.1 codebase (not “5.2”), it remains compatible with almost all existing songs, themes, and noteskins that are supported on these versions (if you do encounter odd behaviour or other issues with older content, please report it to us as a bug).\n5.3 is unrelated to 5.1 -3 (sometimes written as 5.1-3), which was a prior build of 5.2 before it was renamed.\nProject OutFox Teams       Development Design Community     Squirrel Jose Varela Moru Zerinho6   Jousway Lirodon SHRMP0   Cube SheepyChris Moneko   MrThatKid — Hanubeki   ArcticFqx — Gabrimax98   Jose Varela — Sudospective   — — RodentVienna    The development members are the ones that make OutFox possible. They\u0026rsquo;re the people working on the game engine.\nThe design members are the ones who work on assets, themes and frontend.\nThe community members assists by creating, maintaining and expanding community projects and organizations, such as:\n Moderating the Discord Server, Forum, Subreddit and our Bug Hunter Repository; Coordinating Tiny-Foxes, a community group focusing on add-ons and localizations for Project OutFox.  "},{"id":15,"href":"/dev/mods/Mods-10-Color+Gradient-Mods/","title":"Color modifiers","parent":"Guide to Modifiers","content":"Color modifiers affect the color of notes in some way. A lot of these follow similar behaviors to the Visibility modifiers, alongside with some extra functionalities.\n\u0026lt;color\u0026gt; can be 'ColorType_Red', 'ColorType_Blue' or 'ColorType_Green', and is how one chooses the color channel to affect.\nThese modifiers generally share usable values between 0 to 100%.\nStealthColor    Desc: Bring a color channel of the notes down to zero (This does not affect the actual glow color). Unlike normal Stealth, this doesn\u0026rsquo;t have column-specific variants.\nQuirks: N/A\nAvailable variants (modstring): stealthred, stealthr (NotITG alias), stealthblue, stealthb (NotITG alias), stealthgreen, stealthg (NotITG alias), diffuse|\u0026lt;r\u0026gt;|\u0026lt;g\u0026gt;|\u0026lt;b\u0026gt; (NotITG alias)\nPlayerOptions format: StealthColor(\u0026lt;color\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: StealthColor('ColorType_Red',1,1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 100% stealthred\nStealthColor video example\nSuddenColor    Desc: The color channel starts turned off, and turns on at the middle of the field.\nQuirks: N/A\nAvailable variants (modstring): suddenred, suddenr (NotITG alias), suddenblue, suddenb (NotITG name), suddengreen, suddeng (NotITG alias)\nPlayerOptions format: SuddenColor(\u0026lt;color\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: SuddenColor('ColorType_Green',1,1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 100% suddengreen\nSuddenColor video example\nAvailable sub modifiers:    SuddenOffsetColor    Desc: Offsets the point where the color channel turns on.\nAvailable variants (modstring): suddenoffsetred, suddenredoffset (NotITG name), suddenro (NotITG alias), suddenoffsetblue, suddenblueoffset (NotITG name), suddenbo (NotITG alias), suddenoffsetgreen, suddengreenoffset (NotITG name), suddengo (NotITG alias)\nPlayerOptions format: SuddenOffsetColor(\u0026lt;color\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nHiddenColor    Desc: The color channel starts turned on, and turns off at the middle of the field.\nQuirks: N/A\nAvailable variants (modstring): hiddenred, hiddenr (NotITG alias), hiddenblue, hiddenb (NotITG name), hiddengreen, hiddeng (NotITG alias)\nPlayerOptions format: HiddenColor(\u0026lt;color\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;) Example: HiddenColor('ColorType_Blue',1,1) Modstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt; Example: *1 100% hiddenblue\nHiddenColor video example\nAvailable sub modifiers:    HiddenOffsetColor    Desc: Offsets the point where the color channel turns on.\nAvailable variants (modstring): hiddenoffsetred, hiddenredoffset (NotITG name), hiddenro (NotITG alias), hiddenoffsetblue, hiddenblueoffset (NotITG name), hiddenbo (NotITG alias), hiddenoffsetgreen, hiddengreenoffset (NotITG name), hiddengo (NotITG alias)\nPlayerOptions format: HiddenOffsetColor(\u0026lt;color\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nBlinkColor    Desc: The color channel blinks on and off. Still considered as bad of a mod as normal Blink.\nQuirks: Same as Blink.\nAvailable variants (modstring): blinkred, blinkr (NotITG alias), blinkblue, blinkb (NotITG alias), blinkgreen, blinkg (NotITG alias)\nPlayerOptions format: BlinkColor(\u0026lt;color\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: BlinkColor('ColorType_Red',1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 100% blinkred\nBlinkColor video example\nStealthGlowColor    Desc: Allows one to modify the color used for the glow effect of the Visibility mods.\nQuirks: Unlike most modifiers (including NotITG\u0026rsquo;s implementation of this modifier), this starts at 100%, mimicking how glow\u0026rsquo;s red, green, and blue values start at 1.\nAvailable variants (modstring): stealthglowred, stealthgr (NotITG alias), stealthglowred\u0026lt;column\u0026gt;, stealthglowblue, stealthgb (NotITG alias), stealthglowblue\u0026lt;column\u0026gt;, stealthglowgreen, stealthgg (NotITG alias), stealthglowgreen\u0026lt;column\u0026gt;, stealthglow|\u0026lt;r\u0026gt;|\u0026lt;g\u0026gt;|\u0026lt;b\u0026gt; (NotITG alias), stealthglow\u0026lt;column\u0026gt;|\u0026lt;r\u0026gt;|\u0026lt;g\u0026gt;|\u0026lt;b\u0026gt; (NotITG alias)\nPlayerOptions format: StealthGlowColor(\u0026lt;color\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: StealthGlowColor('ColorType_Red',0, 1, true):StealthGlowColor('ColorType_Green',0, 1, true):Stealth(0.25, 1)\nColumn-specific format: StealthGlowColorCol(\u0026lt;color\u0026gt;, \u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: StealthGlowColorCol('ColorType_Green',1,0,1,true):StealthGlowColorCol('ColorType_Blue',1,0,1,true):StealthGlowColorCol('ColorType_Red',2,0,1,true):StealthGlowColorCol('ColorType_Blue',2,0,1,true):StealthGlowColorCol('ColorType_Red',3,0,1,true):StealthGlowColorCol('ColorType_Green',3,0,1,true):StealthGlowColorCol('ColorType_Blue',4,0,1,true):Stealth(0.25)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *1 0% stealthglowred, *1 0% stealthglowgreen, *1 25% stealth *1 0% stealthglowgreen1, *1 0% stealthglowblue1, *1 0% stealthglowred2, *1 0% stealthglowblue2, *1 0% stealthglowred3, *1 0% stealthglowgreen3, *1 0% stealthglowblue4, 25% stealth\nStealthGlowColor video example\nGradient Modifiers    Gradient modifiers allow for arbitrary color pathing, and are not compatible with the color modifiers.\nActivating these will turn off the color modifiers above in terms of rendering.\nIn SM5, these are accessed through PlayerOptions like most modifiers (And have the same chaining mechanics as the other functions). In NotITG, this is accessed through the Player instead.\nThere are three types available (It\u0026rsquo;ll be denoted as \u0026lt;type\u0026gt; in the function listing below):\n \u0026ldquo;Diffuse\u0026rdquo; (Affects the diffuse of the notes \u0026amp; holds), known as \u0026ldquo;Arrow\u0026rdquo; in NotITG. \u0026ldquo;NotePath\u0026rdquo; (Affects the color of the NotePath), known as \u0026ldquo;Path\u0026rdquo; in NotITG. \u0026ldquo;StealthGlow\u0026rdquo; (Affects the color used for Stealth and other Visibility modifiers), known as \u0026ldquo;Stealth\u0026rdquo; in NotITG. Will not visibly work on noteskin elements that are wrapped in ActorFrames.  \u0026lt;type\u0026gt;NumGradientPoints    Desc: Sets how many points the gradient has for the column. Resets the path to all white at the start.\n 0 points means the gradient is turned off (color = white) 1 point means the whole path is given a single color 2 or more points allows for more arbitrary path coloring.  PlayerOptions format: \u0026lt;type\u0026gt;NumGradientPoints(\u0026lt;column\u0026gt;, \u0026lt;point count\u0026gt;)\nNotITG format: SetNum\u0026lt;type\u0026gt;GradientPoints(\u0026lt;column\u0026gt;, \u0026lt;point count\u0026gt;)\n\u0026lt;type\u0026gt;GradientPoint    Desc: Set the position for a given point in the column\u0026rsquo;s gradient. The magnitude given translates into multiples of ARROW_SIZE (commonly 64 pixels).\nPlayerOptions format: \u0026lt;type\u0026gt;GradientPoint(\u0026lt;column\u0026gt;, \u0026lt;point\u0026gt;, \u0026lt;position\u0026gt;)\nNotITG format: Set\u0026lt;type\u0026gt;GradientPoint(\u0026lt;point\u0026gt;, \u0026lt;column\u0026gt;, \u0026lt;position\u0026gt;)\n\u0026lt;type\u0026gt;GradientColor    Desc: Set the color for a given point in the column\u0026rsquo;s gradient.\nPlayerOptions format: \u0026lt;type\u0026gt;GradientColor(\u0026lt;column\u0026gt;, \u0026lt;point\u0026gt;, \u0026lt;red\u0026gt;, \u0026lt;green\u0026gt;, \u0026lt;blue\u0026gt;, \u0026lt;alpha\u0026gt;)\nNotITG format: Set\u0026lt;type\u0026gt;GradientColor(\u0026lt;point\u0026gt;, \u0026lt;column\u0026gt;, \u0026lt;red\u0026gt;, \u0026lt;green\u0026gt;, \u0026lt;blue\u0026gt;, \u0026lt;alpha\u0026gt;)\nExample code (SM5):\nlocal color = { -- c1, c2, c3, c4, p2 {{1,0,0,1}, {1,1,1,1}, {0,0,1,1}, {0,1,0,1}, {0,1,1,1}, {0,0,0,1}, {1,1,0,1}, {1,0,1,1}},--point1 {{0,1,0,1}, {1,0,0,1}, {1,1,1,1}, {0,0,1,1}, {1,0,1,1}, {0,1,1,1}, {0,0,0,1}, {1,1,0,1}},--point2 {{0,0,1,1}, {0,1,0,1}, {1,0,0,1}, {1,1,1,1}, {1,1,0,1}, {1,0,1,1}, {0,1,1,1}, {0,0,0,1}},--point3 {{1,1,1,0}, {0,0,1,0}, {0,1,0,0}, {1,0,0,0}, {0,0,0,1}, {1,1,0,1}, {1,0,1,1}, {0,1,1,1}},--point4 } for pn = 1,2 do -- Do this for both players local a = po[pn] if a then for col = 1,4 do-- Do this for four columns. a:StealthGlowNumGradientPoints(col,4) -- Each column will have 4 points. -- Each point is 1 ARROW_SIZE below the previous point. a:StealthGlowGradientPoint(col,1,1) a:StealthGlowGradientPoint(col,2,2) a:StealthGlowGradientPoint(col,3,3) a:StealthGlowGradientPoint(col,4,4) -- Each column will have their own color pattern, as defined in the color table. local pla = pn == 2 and col+4 or col a:StealthGlowGradientColor(col,1,color[1][pla][1],color[1][pla][2],color[1][pla][3],color[1][pla][4]) a:StealthGlowGradientColor(col,2,color[2][pla][1],color[2][pla][2],color[2][pla][3],color[2][pla][4]) a:StealthGlowGradientColor(col,3,color[3][pla][1],color[3][pla][2],color[3][pla][3],color[3][pla][4]) a:StealthGlowGradientColor(col,4,color[4][pla][1],color[4][pla][2],color[4][pla][3],color[4][pla][4]) end a:Stealth(0.25) -- 25% Stealth, use currently set approach rate (default = 1) end end Example code (NotITG):\nlocal color = { -- c1, c2, c3, c4, p2 {{1,0,0,1}, {1,1,1,1}, {0,0,1,1}, {0,1,0,1}, {0,1,1,1}, {0,0,0,1}, {1,1,0,1}, {1,0,1,1}},--point1 {{0,1,0,1}, {1,0,0,1}, {1,1,1,1}, {0,0,1,1}, {1,0,1,1}, {0,1,1,1}, {0,0,0,1}, {1,1,0,1}},--point2 {{0,0,1,1}, {0,1,0,1}, {1,0,0,1}, {1,1,1,1}, {1,1,0,1}, {1,0,1,1}, {0,1,1,1}, {0,0,0,1}},--point3 {{1,1,1,0}, {0,0,1,0}, {0,1,0,0}, {1,0,0,0}, {0,0,0,1}, {1,1,0,1}, {1,0,1,1}, {0,1,1,1}},--point4 } for pn = 1,2 do -- Do this for both players local a = SCREENMAN:GetTopScreen():GetChild(\u0026#39;PlayerP\u0026#39;..pn) if a then for col = 0,3 do-- Do this for four columns. a:SetNumStealthGradientPoints(col,4) -- Each column will have 4 points. -- Each point is 1 ARROW_SIZE below the previous point. a:SetStealthGradientPoint(0,col,1) a:SetStealthGradientPoint(1,col,2) a:SetStealthGradientPoint(2,col,3) a:SetStealthGradientPoint(3,col,4) -- Each column will have their own color pattern, as defined in the color table. local pla = pn == 2 and col+5 or col+1 a:SetStealthGradientColor(0,col,color[1][pla][1],color[1][pla][2],color[1][pla][3],color[1][pla][4]) a:SetStealthGradientColor(1,col,color[2][pla][1],color[2][pla][2],color[2][pla][3],color[2][pla][4]) a:SetStealthGradientColor(2,col,color[3][pla][1],color[3][pla][2],color[3][pla][3],color[3][pla][4]) a:SetStealthGradientColor(3,col,color[4][pla][1],color[4][pla][2],color[4][pla][3],color[4][pla][4]) end GAMESTATE:ApplyModifiers(\u0026#39;25% Stealth\u0026#39;,pn) -- 25% Stealth, use default approach rate (default = 1) end end Video Example (Shows colors set for Player 2):\nGradient video example\n"},{"id":16,"href":"/dev/effects/","title":"Effect Simfiles","parent":"Developers and Creators","content":"Normal gameplay is as follows: Notes move up or down towards the target on a usually static background, and the player hits the notes when they reach the target. Simple.\nEffect simfiles change this up, which can result in interesting gameplay results.\nThere are multiple \u0026lsquo;catagories\u0026rsquo; of effect files:\n  \u0026ldquo;Gimmick\u0026rdquo; charts\n While not really an \u0026lsquo;effect\u0026rsquo;, per-say, gimmick charts can change up how one reads a chart. A single BPM or stop doesn\u0026rsquo;t really count as a \u0026lsquo;gimmick\u0026rsquo;. Done with SM or SSC chart segments.    \u0026ldquo;BGA\u0026rdquo; charts\n Uses BGChanges to load lua or image files to alter the Background of a song. Can be used to add in visual effects as needed.    \u0026ldquo;Foreground\u0026rdquo; charts\n Uses FGChanges to load lua files that can alter or obstruct the player\u0026rsquo;s view of the notefield Requires one to keep track of notes and the notefield itself.    \u0026ldquo;Modifier\u0026rdquo; charts (or \u0026ldquo;modcharts\u0026rdquo;/\u0026ldquo;modfiles\u0026rdquo;)\n Usually uses FGChanges or BGChanges to load lua files that can script modifiers to run at given points of the song. Requires one to use various information given, such as column order, note color or direction to figure out what note to hit and when to hit it. Older mod charts tend to use course files or the #ATTACKS field in simfiles to apply scripted modifiers. Newer mod charts tend to hide the UI, which allows for more screen-estate when utilizing modifiers.    These are not mutually exclusive categories. One simfile could be a combination of \u0026ldquo;Foreground\u0026rdquo; and \u0026ldquo;Modifier\u0026rdquo;, while another could be a combination of \u0026ldquo;Gimmick\u0026rdquo; and \u0026ldquo;Foreground\u0026rdquo;.\n"},{"id":17,"href":"/user-guide/config/","title":"Features \u0026 Config","parent":"User Guide","content":""},{"id":18,"href":"/user-guide/config/game-types/","title":"Game types","parent":"Features \u0026 Config","content":"Project OutFox supports a variety of game types, which simulate different types of rhythm games (including button layouts and, where applicable, gameplay behaviours specific to the game type). Game types are further divided into styles, which define chart types such as single, double, etc.\nAs of 5.3.0-alpha-4.9.8, they include:\n dance - The default game type. Similar to games such as Dance Dance Revolution and In the Groove, it uses four lanes in the cardinal directions (left, down, up, right). It also contains a 6-lane style (solo) adding up-left and up-right directions, and a 3-lane style using only up-left, down, and up-right. pump - A five-lane dance game, which uses four diagional directions and the center rather than cardinal directions. In terms of functionality and behavior it is in line with Pro/StepMania 4 CVS. kb7 - A seven-lane game type designed primarily for keyboard play, with two sets of three keys flanking a centre column (usually mapped by default to the SDF, JKL, and space keys). This is a StepMania-specific game type that does not emulate any specific game. ez2 - A game type based on the defunct arcade dance game EZ2Dancer, which uses three foot panels and a pair of hand sensors. para - A dance game designed for para para routines, which is typically played with five infrared hand sensors in a semicircular layout, and uses a considerably looser scoring system. It is modelled upon the mechanics of the defunct arcade dance game Para Para Paradise. ds3ddx - A dance game whose format is common among Chinese arcade dance games, which uses four diagional foot panels, and four hand sensors around the pad in the cardinal directions. beat - Supports 5-key and 7-key styles, and the ability to load BMS files. Full BME/BML support is coming soon. maniax - A game type based on the defunct arcade dance game Dance Maniax, which uses four hand sensors arranged into two columns (upper and lower). techno - A dance game type designed for pads with nine panels, including 4-lane (similar to dance), 5-lane (similar to pump), 8-lane (using all but the center panel), and 9-lane styles in single and double versions. popn - A PMS player mode, supporting 3, 4, 5, 7, and 9-button styles, and the ability to load PMS files. gddm - A drum mode supporting six-part (five drums and one pedal) and nine-part (seven drums, bass pedal, hi-hat pedal) styles, modelled upon the mechanics of the arcade rhythm game DrumMania. 5 and 10-part with full DTX file support coming soon. gdgf (formerly guitar prior to 5.3.0-alpha-4.9.8) - A guitar mode supporting three-fret and five-fret styles, modelled upon the mechanics of the arcade rhythm game Guitar Freaks. gh - A five-fret guitar mode modelled upon the mechanics of once-popular console games originating from North America. kickbox - Obscure lash-a-soft dance pad-to-a-punching-bag mode (four, six, and eight-sensor modes).  Future game types    These are proposed and are scheduled on the roadmap. Limitations or code problems may delay or change these modes, so there is no date or ETA given.\n drum - A MIDI-based drum mode with 20 parts simulating a full Yamaha DTX drum kit. karaoke - A (\u0026hellip;do i need to explain this?) singing mode. Will happen if Squirrel gets off his butt. jam - A mode properly supporting o2Jam and its modes, with full .OJM loader support. piu - A major refactoring to make it more accurate to the mainline series. taitai - A \u0026ldquo;don da don\u0026rdquo; styled mode, supporting .TJA files.  "},{"id":19,"href":"/user-guide/setup/install/","title":"Installation","parent":"Setup","content":"System requirements    Project OutFox has builds for Windows, macOS, and Linux. We also have specific builds for ARM-based Linux devices and Apple M1-based computers. It should run on just about any computer from the mid-2000s onward, depending on the operating system and hardware specifications. We have had alphas running on CPUs as old as the Pentium E2180.\nThe Windows build of Project OutFox requires Windows 7 or later. Windows XP builds are available for selected releases, which require Service Pack 3.\nParts of the game are so well-optimised now that they\u0026rsquo;re running too fast, and the rest of the game needs to catch up. We will have a proper fix later, but increasing the amount of background activity (i.e. having other programs running in the background, etc.) is a temporary solution.\nHow to install Project OutFox    Download the installer or package for your respective operating system on the Project OutFox website.\nWindows    Windows builds of Project OutFox use an installer; follow the instructions, and launch the game using the provided shortcuts.\n It is recommended that you do not install it to the Program Files directory, as this is known to cause problems. The installer offers optional components, such as the noteskins that were included with StepMania 5.0.12 and 5.1, and \u0026ldquo;Toasties\u0026rdquo; - animations that can trigger on combo milestones in-game. By default, the game is installed in \u0026ldquo;Portable Mode\u0026rdquo;; save data is stored in the installation directory. If you disable portable mode, your save data will be stored in your user directory under %APPDATA%/StepMania 5.3.  If your log file (Installation directory/Logs) shows WDDM1.0 or WDDM1.1 at the end of the graphics card name (i.e. \u0026ldquo;Intel(R) 82945G Express Chipset Family (Microsoft Corporation - WDDM 1.0)\u0026quot;) or the log shows \u0026ldquo;Microsoft GDI\u0026rdquo; as the renderer, then you are running the OpenGL-crippled \u0026ldquo;Windows\u0026rdquo; driver that is downloaded on a fresh install. Project OutFox will not work on these drivers, as we do not support DirectX anymore (the old D3D renderer that 5.0.12/5.1 has) There is a list of drivers at here but for some of these cards, you need to keep your Windows 7 install disc handy!\nLinux    On Linux, we only provide pre-compiled binaries at this time. Extract the tarball, and run ./stepmania in the directory.\nIf you see an error mentioning that it could not find libOpenGL.so.0:, install libopengl0 from your distribution\u0026rsquo;s package manager.\nmacOS    Open the DMG file and drag the game to your Applications directory.\nUntil we produce a digitally-signed build, you will have to change macOS security settings in order for Project OutFox to operate correctly. macOS prevents access to external files by unsigned apps unless given manual permission by the user.\nTo do this, open Terminal and run the following command: xattr -dr com.apple.quarantine /path/to/outfox, replacing /path/to/outfox with the path to the directory containing the OutFox executable (manually typing it out, or dragging the folder containing the game executable directly onto the window to fill it automatically). If no errors show up after pressing enter, then you\u0026rsquo;re ready to start the game.\nOn older builds, macOS Catalina also generated a message stating that the game was requesting permission to receive keystrokes from any application. This was a side effect of previous code that has since been removed.\nNext steps    Once Project OutFox is installed, you can move on to setting the game up.\n"},{"id":20,"href":"/dev/actors/General-DifferencesfromOlderSM/","title":"Behavioral differences from SM 3.95/ITG","parent":"Lua and Actors","content":"OpenITG, NotITG and SM 3.95 are popular engines based on older versions of StepMania that have communities that continue to support by making new content.\nSM5.3 contains a similar feature set as the previous revisions of the game, but with some notable differences. This document aims to provide help with porting content to and from the different versions of the game.\n\u0026ldquo;Command\u0026rdquo; format vs \u0026ldquo;Function\u0026rdquo; format    Converting commands to the newer function format is generally recommended when porting content to SM5. The following sections detail what these processes.\n\u0026ldquo;Command\u0026rdquo; format    In SM3.95 \u0026amp; related engines, commands can be defined inside xml nodes like this:\nOnCommand=\u0026#34;x,SCREEN_CENTER_X;y,SCREEN_CENTER_Y;zoom,2;rotationz,180;linear,50;rotationy,-5000;rotationx,750;rotationz,750;sleep,100\u0026#34; (Taken from WinDEU\u0026rsquo;s \u0026ldquo;Golden Slaughterer\u0026rdquo; file from \u0026ldquo;WinDEU Hates You 5EVR\u0026rdquo;.)\nThis is what can be considered \u0026ldquo;Command\u0026rdquo; format, which allowed for easy chaining of actor functions tweens.\nFor a quick translation into SM5, this can be wrapped with cmd(), but this is considered bad practice and inefficient (And it\u0026rsquo;s still counted as \u0026ldquo;Command\u0026rdquo; format). However, it\u0026rsquo;s used a lot in the past, so it\u0026rsquo;s still here for backwards compatibility.\nAnother thing to note is that the functions inside this format (eg: x, rotationz, zoom, etc.) appear to be case-insensitive, all being converted to lowercase in the end. (Although in SM5, this appears to not be the case.)\n\u0026ldquo;Function\u0026rdquo; format    In SM5, commands can be defined inside lua tables like this:\nOnCommand= function(self) self:x(SCREEN_CENTER_X):y(SCREEN_CENTER_Y):zoom(2):rotationz(180):linear(50):rotationy(-5000):rotationx(750):rotationz(750):sleep(100) end (The function format version of the earlier command)\nThis is what can be considered \u0026ldquo;Function\u0026rdquo; format.\nThis is not exclusive to SM5, however. SM3.95 \u0026amp; friends can use lua functions inside xml nodes. But there is a caveat: Actor function chaining as seen in the example is not possible in SM3.95/OpenITG/NotITG. Instead, a separate self: would be needed for each function call.\nEverything is case-sensitive in this format, so take care to ensure the casing is corrent.\nActor Differences    Because the internals of the engines are different, actors may work differently with the same lines of code.\nZoom and rotation order     SM3.95 (and as a result, OpenITG \u0026amp; NotITG) apply the rotation, then apply the zoom.  SM5 applies the zoom and then applies the rotation.\nIn SM5.3, this can be worked around by setting the rotafterzoom attribute to false, returning the SM3.95 behavior.\nThe notes \u0026amp; receptors already have this active to help with easilly replicating modifier effects from the other engines.\nIn SM5.2 and earlier, this has to be done with wrapper states or actorframes. This is done by having the wrapper do the positioning and zooming, while the main actor gets everything else. (This is still doable in SM5.3 if you\u0026rsquo;re aiming to write content for multiple SM5s)\nZoom\u0026rsquo;s effect on the axis    SM3.95\u0026rsquo;s zoom function only affected the x \u0026amp; y axis, while zoom affects all three axis in SM5.\nIt\u0026rsquo;s fine for actors like Sprites or BitmapTexts, but it stops being \u0026lsquo;normal\u0026rsquo; when actors like Models come into play.\nThis not only affects actors, but also affects modifiers that play with zoom (eg: Mini, Tiny).\nA workaround is to either use only the x \u0026amp; y zooms or undo any scaling done to the z axis when performing a normal zoom.\nActorFrameTexture\u0026rsquo;s capture method.    In NotITG, an ActorFrameTexture (AFT), captures everything that was rendered before it and places it into a texture.\nSM5\u0026rsquo;s AFT captures everything inside of it (Hence, ActorFrameTexture), and places that into a texture.\nThis difference makes for a nontrivial challenge to port content across if AFTs are in use.\nDue to how AFTs work in nITG, lumikey or chromakey shaders are needed if transparent textures of an actor are needed.\nAttribute renames    A few of the attributes got renamed, so when porting content, take care to ensure these are dealt with:\n  effectdelay (SM3.95) becomes effect_hold_at_full (SM5)\n  hidden(0) and hidden(1) (SM3.95) becomes visible(false) and visible(true) (SM5)\n  Scaling across multiple themes    Most themes made for the SM3.95 era are considered \u0026ldquo;480p\u0026rdquo; because it\u0026rsquo;s internal height was always 480 pixels.\nSM5 changes this, with SM5.1\u0026rsquo;s default theme shifting towards a hight of 720 pixels, which can be considered an \u0026ldquo;HD\u0026rdquo; Theme.\nSeveral things have to be scaled in accordance to this, such as:\n Zoom (All axis are involved) Positioning (All axis are involved) Effects (Not all need to be scaled.)   A Common ratio would be this: SCREEN_HEIGHT/intended_height (for SM3.95-style content, intended_height is 480)\nHowever, this does not apply to every actor. If an actor is inside something that\u0026rsquo;s already scaled (eg: the NoteField inside the scaled Player), it does not require the above scaling.\nModifier Differences    Some modifiers have completely different behavior, which can make porting modifier-related content less trivial.\nTiny     In SM5, positive tiny brings the columns together similar to what Mini visually does.  NotITG instead only zooms the notes.\nThe only options are to combine column movement modifiers to counteract the movement, use the column-specific variants instead, or use tinyx \u0026amp; tinyy (which is technically closer to what nITG\u0026rsquo;s Tiny actually does).\nThis only affects the original Tiny modifier, and not its' variants.\n The zoom equation is different. SM5 uses this equation: 0.5^strength, while NotITG uses this one: 1 - 0.5*strength. (100% == 1.0 for the strength)  It just so happens that NotITG\u0026rsquo;s equation is the exact same one Mini uses for notefield zoom.\nIn SM5.3, this can be altered with the TinyUsesMiniCalc sub-modifier. When active, it switches to NotITG\u0026rsquo;s equation, which allows for a wider range of zooms.\nIn SM5.2 and earlier, this can be somewhat replicated by taking the two equations and solving for the equivalent strength. (Doesn\u0026rsquo;t work for negative strengths in NotITG, through)\nThis affects every variant of Tiny.\nDifferences from older SM5 builds    SM5.3 changes the default behavior from the older SM5 builds. This section documents those changes.\nColumn-specific function changes    Instead of typing \u0026lt;mod name\u0026gt;\u0026lt;\\column number\u0026gt; (As in SM5.1), you now type \u0026lt;Mod Name\u0026gt;Col, and the first parameter is the column number. It also allows for mass applications by passing nil as the column number.\nPlayer vanish point    In SM5.2 and earlier (due to a math error), the player\u0026rsquo;s vanish point at the x axis is skewed towards their side of the screen instead of being directly at the center of the notefield. This is not an issue in SM5.0.7 and earlier or in SM5.3 and later.\nFor example: P1 is at the left half of the screen, so its' vanish point is slightly skewed towards the left edge of the screen.\nvibrate() now takes the current zoom into account    This is similar to how it behaves in SM3.95/ITG.\nSM5.1 and earlier take the endpoint zoom and use that for vibrate.\nFor example:\nactor:vibrate():zoom(20):linear(2):zoom(0) Would result in no visible vibration because the end point is 0, while in SM5.3 and SM3.95, one would see the vibration start at 20 and go down as the zoom reaches 0.\nLua is more strict with escape sequences.    In older builds of SM, an invalid escape sequence is ignored, with the offending \\ removed. In lua 5.3 (and consequentally, SM5.3), this now causes a lua error, which may result in themes or effect files not running correctly or at all.\n"},{"id":21,"href":"/dev/effects/EffectFiles-ChartSegments/","title":"Chart segments","parent":"Effect Simfiles","content":"Gimmick charts often involve a large amount of BPM changes or stops to create various effects like stutters, wave-type scrolling or switching notes with other types of notes (ex: notes become mines).\nThis is done with \u0026ldquo;segments\u0026rdquo;. One can have many instances of a segment type.\nThe SSC simfile format has extra \u0026ldquo;segments\u0026rdquo;, which allow for other effects. The following list notes what is available and what it is supposed to do.\nSM-era segments    These segments can be found in .sm files, but they can also be in .ssc files, too.\nBPM changes (BPMS)    Every chart has a BPM, but it doesn\u0026rsquo;t have to stay at one BPM. Some songs do change BPM throughout, but some charts do this for doing stutters (when combined with stops) or having notes speed towards or slow down. Visually ignored if CMod is used (But may result in weird spacing with regards to note quantization).\nIn the simfile, it\u0026rsquo;s listed as the beat the change happens, and then the BPM to change to. The BPM listed at beat 0 is the starting BPM.\nIn SM3.95 and oITG/nITG, negative BPMs can be used to \u0026lsquo;warp\u0026rsquo; through the chart. SM5 converts these to warp segments automatically, but the result may not be perfect. (SM3.95 can use this to make autohit notes, or artificially lower the possible score. SM5 can\u0026rsquo;t)\n#BPMS:0.000=256.000,42.000=128.000,56.000=256.000; (ex: a chart that starts at 256 BPM, changes to 128 BPM at beat 42, then changes back to 256 BPM at beat 56)\nStop segments (STOPS)    Stop segments tell the game to stop scrolling the chart for a given amount of seconds. Visually ignored if CMod is used.\nThis also makes the beat stop while one is active. (So, if you were printing the beat, it would stop incrementing during the stop segment)\nIn the simfile, it\u0026rsquo;s listed as the beat the stop happens, and then how long the stop is (in seconds).\n#STOPS:27.000=3.141; (ex: at beat 27, the chart stops scrolling for 3.141 seconds)\nKeysounding (KEYSOUNDS)    SSC-era segments    When SSC created the .ssc format, new segment types were added.\nDelay segments (DELAYS)    Warp segments (WARPS)    Tells the game to teleport foreward a given number of beats into a chart. Any notes that are skipped get counted as fake.\nIn simfile, it\u0026rsquo;s listed as the beat it happens, then how many beats foreward to teleport.\n#WARPS:28.000=4.000; (ex: at beat 28, teleport foreward by 4 beats.)\nTime Signature segments (TIMESIGNATURES)    Tick Count segments (TICKCOUNTS)    Sets how many hold ticks happen in a hold per measure. Starting value defaults to 4. Only really used in pump mode, due to other games not having hold checkpoints.\nIn simfile, it\u0026rsquo;s listed as the beat it happens, then the actual tickcount amount.\n#TICKCOUNTS:0.000=4, 28.000=8 (ex: At beat 28, a hit becomes 2 combo, and a miss becomes 4 misses.)\nCombo segments (COMBOS)    Sets how much combo a hit or miss adds. The default is 1/1, which means a hit gets 1 combo and a miss gets 1 miss.\nIn simfile, it\u0026rsquo;s listed as the beat it happens, how much combo a hit is and then how much combo a miss is. If a single number is listed, both hits and misses get the same value. Weird behavior, such as underflows can happen if negative values are used.\n#COMBOS:0.000=1, 28.000=2=4; (ex: At beat 28, a hit becomes 2 combo, and a miss becomes 4 misses.)\nSpeed segments (SPEEDS)    Sets the speed of the chart by ratio. 1 is the normal speed. If given a length of 0, the change happens instantly. The default starts with a speed of 1, applying at beat 0 instantly. Visually ignored if CMod is used.\nIn simfile, it\u0026rsquo;s listed as the beat it happens, the speed to go to, how long the change takes and whether it\u0026rsquo;s in beats or seconds.\n#SPEEDS:0.000=2.000=0.000=0, 16.000=4.000=1.000=0, 24.000=1.000=2.000=1; (ex: Chart starts at a speed of 2, on beat 16, it turns to a speed of 4 in 1 beat, and on beat 24, it turns to a speed of 1 in 2 seconds.\nScroll segments (SCROLLS)    Allows one to alter the scrolling factor for a section (as opposed to the whole field). When given a factor of 0, the chart stops visibly scrollnig, but notes can still be hit. Visually ignored if CMod is used.\nIn simfile, it\u0026rsquo;s listed as the beat it happens, and then the factor to switch to.\n#SCROLLS:0.000=1.000, 24.000=0.000, 28.000=2.000; (ex: The chart starts with a factor of 1, switches to a factor of 0 at beat 24, and switches to a factor of 2 at beat 28)\nFake segments (FAKES)    Allows one to mark a section of the chart as fake, which means the notes can\u0026rsquo;t be hit or judged.\nIn the simfile, it\u0026rsquo;s listed as the beat the fake segment is at, and then how long the section is in beats.\n#FAKES:24.000=8.000; (ex: at beat 24, don\u0026rsquo;t judge the notes for 8 beats)\nLabel segments (LABELS)    Allows one to mark the start of a section with a name. The default label is \u0026ldquo;Song Start\u0026rdquo; at beat 0.\nIn the simfile, it\u0026rsquo;s listed as the beat the label is at, and then the name of the label.\n#LABELS:0.000=Song Start;\nNotITG has an advanced version called \u0026ldquo;Spellcards\u0026rdquo;, which have a start beat, end beat, difficulty, name and color\n"},{"id":22,"href":"/user-guide/meta/faq/","title":"FAQ","parent":"Front Matter","content":"Q: Where should I report Bugs, request features and post game crashes?    If you can, do those in our Issue Tracker Repository, by creating an issue it\u0026rsquo;ll give you those exact options that I mentioned in the question.\nYou can also use this Discord Server:\nUse \u0026ldquo;feature-request\u0026rdquo; channel to request features or give ideas. Use \u0026ldquo;bugs-crashlogs\u0026rdquo; channel to report bugs and game crashes.\nYou can also use our forum\nQ: How do I get logs?    Go into your game folder and check if there\u0026rsquo;s a file called portable.ini (or just portable if your system doesn\u0026rsquo;t display file extensions.). If there\u0026rsquo;s no portable.ini in your game folder, then you need to go into a specific path based on your OS:\n Windows: appdata/roaming/stepmania 5.3 Mac: ~/Library/Logs/Stepmania 5.3/ Linux: /home/user/.stepmania-5.3  Now you just need to open the Logs folder and grab log.txt.\nQ: Why do I have to configure my pad while older versions of StepMania could work with no problem?    StepMania 5.3 uses XInput, it means controllers need to get mapped first and then never again. It means every single controller should work with StepMania 5.3\nThe game doesn\u0026rsquo;t even try to automap things yet, there\u0026rsquo;s a tutorial step-by-step how to map\nQ: I\u0026rsquo;m new to this community and I don\u0026rsquo;t understand many terms, could you explain what they mean?    Chart: How we call Songs that you can play in StepMania. (osu players call them Maps) Mods: Modded charts that uses Lua to change how the game operates. Pad Chart/Keyboard Chart: If the chart was design for people that play in pad or for keyboard. Hold: A note that you have to hold to not miss it. Drill/Roll: A note that you have to keep hitting to not miss it. NG: Missed Hold/(Drill or Roll) Doublestep: When you have to use the same foot to hit 2 different notes. RUDRU for example (R = Right, U = Up, D = Down) Ghosttap: When you hit a place where there\u0026rsquo;s no step. 4th,8th,12th: Note types and colors, 4th: red arrow (hit after each beat), 8th: blue arrow (hit after each half beat), 12th: green arrow (hit after each 1/3 beat)..it goes on. Playfield/Notefield/Receptors/PlayerBoards: The targets that notes are going to reach. In dance, the 4 notes that are always at the top. In pump, the 5 notes that are always at the top. Lifts: Note that you have to stop holding the moment they reach the playfield.\nQ: Will 5.3 go open source?    Yes. Here\u0026rsquo;s a quote from Squirrel if you want to know more:\n The project began as a method to add online and profiles to SM5, but when we looked into the engine to see how this could be appropriated it was discovered just how much in a sorry state the code base was, and it looked mostly abandoned. I spoke to Shakesoda in hopes of a resurrection in the form of a team project, and it was requested rather than breaking 10 years of content and community to take the time to make a proper 5.x build that is stable and supports what the community as a whole wants from the game. This backward compatibility support has been an absolute git to do, but it\u0026rsquo;s something now we are down the line which we are proud of, as it has brought many players and newcomers to the community, and provided a very stable experience for folks during the lockdown. We will continue to maintain a near 100% compatibility where we can, and this is taken into consideration whenever we plan a new feature or change engine components.\nWe asked if it was ok to close the source while this process was done, and it was deemed wise for the health of the repo and the need of people who are just wanting to play. Its why we\u0026rsquo;ve been around the repo but not on it as taint can happen and we do not wish this. SSC did this same behaviour before us, so we did not see it as a problem. Some vocal members of the community disagreed, including some of the SMDev Team. We have also been compared to past SM repo contributors who may have left a less than savoury memory in the minds of some, and it has also been hard to differentiate from history we have no involvement with.\n Q: I have a really recent processor and my game is having a lot of problems, why is that?    Outfox reached a point of optimization that good processors are going to have some problems because some parts of the game are going too fast and need catch up. The current solution to this is to have something running in the background (Have a video playing, other programs) to keep the processor busy.\nThis is going to have a proper fix later.\nQ: Is online mode available yet? If not, is it coming?    Short answer: no it\u0026rsquo;s not available, yes it\u0026rsquo;s coming. Long answer: It\u0026rsquo;ll take a while, the engine is still being optimized and the online system is still in development (being done by Cube).\nThis doesn\u0026rsquo;t mean Online isn\u0026rsquo;t important for us, it\u0026rsquo;s a lot, it was one of Team Rizu first plans but the engine just wasn\u0026rsquo;t ready for their plans.\nResume: As your read this, both the game engine and online mode are still in development.\nQ: How do I insert Noteskins/Themes/Avatars/Judgments/Toasties into StepMania?    In the game folder there\u0026rsquo;s a folder called Appearance, where you\u0026rsquo;ll find a folder for each of those mentioned features.\nFor Avatars    Open Avatars folder and drop any png, jpg, gif into there with any name you want. Now in-game go into Options \u0026gt; Profiles \u0026gt; Select any already created profile (or create one) \u0026gt; edit \u0026gt; change avatar image, now you can select any image that is inside the Avatars folder.\nFor Themes    Open Themes folder and drop here any theme that supports 5.x\nFor Noteskins    Open NoteSkins folder, open the folder that represents what noteskin gamemode the noteskin is made for, drop the NoteSkin Folder there.\nYou can find more noteskins in https://projectmoon.dance/addons/noteskins\nFor Judgments    Open Judgments, drop the judgment image there. Do not change the name of the judgments you download, they\u0026rsquo;re important so the game knows what part of the image the game should get)\nFor Toasties    Open Toasties, drop the game Toastie folter there. (The game can come with 2 toasties in the installer options)\nQ: Can we have that FAQ in the Project OutFox Website?    Yes you can: https://projectmoon.dance/faq\nQ: I have an ancient Intel Card and the game does nothing but crash!    If your log shows WDDM1.0 or WDDM1.1 at the end of the graphics card name:\n00:00.505: Last seen video driver: Intel(R) 82945G Express Chipset Family (Microsoft Corporation - WDDM 1.0) or the log shows Microsoft GDI as the Renderer\nThen you are running the OpenGL crippled \u0026lsquo;windows\u0026rsquo; driver that is downloaded on a fresh install. Stepmania 5.3 will not work on these drivers, as we do not support DirectX anymore (the old D3D renderer that 5.0.12/5.1 has)\nThere is a list of drivers at this site location that may help, but for some of these cards, you need to keep your windows 7 install disc handy!\nhttps://www.intel.com/content/www/us/en/support/articles/000005733/graphics.html\nUpdate: If you accidentally updated your windows to beyond the support given to you by Intel, so you moved to windows 8.1/10 from 7 then there is still hope! you can take a chance with the Mesa OpenGL replacer for legacy software, which adds an API extension over Microsoft. You can find it here: https://github.com/pal1000/mesa-dist-win/releases/latest\nHOW TO USE?\nDownload Mesa3d for Windows: mesa3d-xxxx-release-msvc.exe\n  Extract it (either with a double-click or right-click 7-zip)\n  In the extraction folder of Mesa, go to x64, select and copy opengl32.dll\n  In the extraction folder of stepmania, go to /program and paste opengl32.dll\n  it may now use the proper dll\n  Also, See https://fdossena.com/?p=mesa/index.frag for a windows working solution.\nAnd for a detailed guide for intel users: (Some computer literacy needed) https://gist.github.com/rb-dahlb/26f316c5b6089807a139fc44ee69f0d1\nQ: How can I know who works on OutFox and who to trust?    Everyone on this list is part of OutFox Team and works on OutFox: see list\nInternational Moderators/Translators/Alpha Testers/Tiny-Foxes indirectly helps OutFox development but they aren\u0026rsquo;t part of the OutFox Team.\nIf you see anyone else saying they work on OutFox then do not trust and please report to us. You can always ask at our Discord Server\n"},{"id":23,"href":"/user-guide/setup/getting-started/","title":"Getting started","parent":"Setup","content":"First-time setup    To obtain the best experience, there are a few things you should do after installing Project OutFox. Some of these instructions assume usage of the included default theme (Soundwaves).\nSelecting a game type    When launching Project OutFox for the first time or without save data present, you will be prompted to select which game type you would like to begin with. Project OutFox supports a variety of game types, which simulate different types of rhythm games (including button layouts and, where applicable, gameplay behaviours specific to the game type). Game types are further divided into styles, which include chart types such as single, double, etc.\n dance - The default game type. Similar to games such as Dance Dance Revolution and In the Groove, it uses four lanes in the cardinal directions (left, down, up, right). It also contains a 6-lane style (solo) adding up-left and up-right directions, and a 3-lane style using only up-left, down, and up-right. pump - A five-lane dance game, which uses four diagional directions and the center rather than cardinal directions. In terms of functionality and behavior it is in line with Pro/StepMania 4 CVS. kb7 - A seven-lane game type designed primarily for keyboard play, with two sets of three keys flanking a centre column (usually mapped by default to the SDF, JKL, and space keys). This is a StepMania-specific game type that does not emulate any specific game. ez2 - A game type based on the defunct arcade dance game EZ2Dancer, which uses three foot panels and a pair of hand sensors. para - A dance game designed for para para routines, which is typically played with five infrared hand sensors in a semicircular layout, and uses a considerably looser scoring system. It is modelled upon the mechanics of the defunct arcade dance game Para Para Paradise. ds3ddx - A dance game whose format is common among Chinese arcade dance games, which uses four diagional foot panels, and four hand sensors around the pad in the cardinal directions. beat - Supports 5-key and 7-key styles, and the ability to load BMS files. Full BME/BML support is coming soon. maniax - A game type based on the defunct arcade dance game Dance Maniax, which uses four hand sensors arranged into two columns (upper and lower). techno - A dance game type designed for pads with nine panels, including 4-lane (similar to dance), 5-lane (similar to pump), 8-lane (using all but the center panel), and 9-lane styles in single and double versions. popn - A PMS player mode, supporting 3, 4, 5, 7, and 9-button styles, and the ability to load PMS files. gddm - A drum mode supporting six-part (five drums and one pedal) and nine-part (seven drums, bass pedal, hi-hat pedal) styles, modelled upon the mechanics of the arcade rhythm game DrumMania. 5 and 10-part with full DTX file support coming soon. gdgf (formerly guitar prior to 5.3.0-alpha-4.9.8) - A guitar mode supporting three-fret and five-fret styles, modelled upon the mechanics of the arcade rhythm game Guitar Freaks. gh - A five-fret guitar mode modelled upon the mechanics of once-popular console games originating from North America. kickbox - Obscure lash-a-soft dance pad-to-a-punching-bag mode (four, six, and eight-sensor modes).  Tip: You can switch between game types at any time using the \u0026ldquo;Select Game\u0026rdquo; button on the main menu.  Configuring your controls    Each game type has its own default keyboard configuration; dance, for example, maps the first player to the arrow keys (when playing on keyboard, this is often referred to as the \u0026ldquo;index\u0026rdquo; playstyle). To configure your button mappings, go to Options \u0026gt; Input \u0026amp; Calibration \u0026gt; Config Key/Joy Mappings.\nUse the arrow keys to select an item to map, press Enter, and then press the button on the keyboard or controller you want to use. You can have multiple button assignments for each command.\nProject OutFox supports a wide variety of controllers and even arcade hardware. By default, the game operates with a HIDAPI and XInput-compliant input engine. If your controller does not perform as well or function as expected, you can switch to the alternate XInput input mode from the Experimental Options menu. XInput will sometimes also require you to map your controller to the input engine\u0026rsquo;s virtual gamepad, allowing the game to properly interface with the device. The Map Controller screen is available from the Input \u0026amp; Calibration menu.\nCalibrate your audio sync    !\u0026gt; Notice: Interactive calibration only works under the dance game type. If you are using a differtent game type, temporarily switch to dance, and switch back when you are done.\nIn a rhythm game, timing is everything. But latency produced by your audio outputs can affect your accuracy. You can interactively adjust the audio offset using the Calibrate Audio Sync option in the Input \u0026amp; Calibration menu.\nA song will play with a pattern of alternating notes; in the dance game type, they will be left and right arrows. Tap them to the rhythm based on what you hear. Every 24 notes, your inputs will be used to calculate a new offset; watch for \u0026ldquo;Perfect\u0026rdquo; and \u0026ldquo;Flawless\u0026rdquo; judgements.\nThe song will continue playing on a loop until you exit with the Back button (mapped to Escape by default), after which you will be given an opportunity to save the changes. If you wish to calibrate in-game with your song of choice, you can press F6 twice during gameplay to enable AutoSync Machine, which will last until the end of the song or when exited with the Back button. A message will appear asking to confirm your changes and if you wish to apply them or not.\nCreate a profile    While Project OutFox can save some data to a global \u0026ldquo;machine profile\u0026rdquo;, it is recommended that you create a local profile so you can save personal high scores, as well as player settings (such as modifiers) that can persist between sessions.\nYou coan manage profiles from Options \u0026gt; Profiles. From here you can create a profile, and edit existing profiles.\nFrom the profile editor (highlight a profile and press Start, and then select \u0026ldquo;Edit profile\u0026rdquo;), you can input fitness-related information, change the layout of the optional \u0026ldquo;Detailed Stats\u0026rdquo; pane during gameplay, and add an avatar to your profile (avatars are loaded from the Appearance/Avatars directory).\nInstall songs    While Project OutFox does include a few sample songs, you will probably want to add more. We support a number of formats, including SM, SSC, SMA, DWI, BMS, and KSF.\nThe Songs folder in Project OutFox is divided into Groups (also sometimes known as \u0026ldquo;packs\u0026rdquo;). Groups, in turn, contain folders for each song.\nSongs │ └───My Group │ │ │ └───My Song │ │ mysong.ssc │ │ mysong.ogg │ │ mysong-bg.png │ │ mysong-bn.png │ │ mysong-jk.png Packs are typically distributed as ZIP files. Extract the archive with your preferred software, and copy the group folder containing the song directories to the Songs folder like so.\nNote: If the songs do not appear, be sure to check if the group folder actually containing the song folders is too deep in the folder hierarchy.  Note: If a song is not contained inside a group folder, but instead on the root Songs directory, the game will stop loading to let you know of the Song folder in question.  Next steps    The only thing left to do is have fun! If you need more help with Project OutFox, check out the other pages in our wiki documentation, and join other members of our community on our Discord server or forum.\nThank you for supporting Project OutFox!\n"},{"id":24,"href":"/dev/mods/Mods-11-ModSplines/","title":"ModSplines","parent":"Guide to Modifiers","content":"ModSplines is a system that allows for arbitrary note pathing through modifiers. This system is based off the spline system used in NotITG, which means it is usable alongside the pre-existing SM5 spline system and other modifiers, too.\nPoints are positioned like they are for Gradient modifiers, meaning in multiples of ARROW_SIZE away from the receptor.\nIn SM5, this is only accessible through the PlayerOptions functions, while NotITG has functions available in Player and also has modstring versions available (Though, it\u0026rsquo;s recommended to use the lua functions instead.)\nPoint and column numbering start at 1 in SM5, while it starts at 0 in NotITG.\nTo stop the current chain of spline points, a \u0026lsquo;null point\u0026rsquo; (Where both position and magnitude are at zero) can be used as a \u0026lsquo;null terminator\u0026rsquo; or sorts. This is only applicable for points after the first.\nThe following types are avaiable for modsplines (designated as \u0026lt;axis\u0026gt;):\n X (Positioning on the x axis, affects receptors \u0026amp; notes. Works in multiples of ARROW_SIZE) Y (Positioning on the y axis, affects receptors \u0026amp; notes. Works in multiples of ARROW_SIZE. The quirks of SpiralY apply here if holds or rolls are involved.) Z (Positioning on the z axis, affects receptors \u0026amp; notes. Works in multiples of ARROW_SIZE) RotX (Rotation on the x axis, affects notes only. Works in radians. Known as \u0026ldquo;RotationX\u0026rdquo; in NotITG, but uses RotX for functions. Also affects hold heads in SM5 without extra mods needed.) RotY (Rotation on the y axis, affects notes only. Works in radians. Known as \u0026ldquo;RotationY\u0026rdquo; in NotITG, but uses RotY for functions. Also affects hold heads in SM5 without extra mods needed.) RotZ (Rotation on the z axis, affects notes only. Works in radians. Known as \u0026ldquo;RotationZ\u0026rdquo; in NotITG, but uses RotZ for functions. Also affects hold heads in SM5 without extra mods needed.) Zoom (Zoom all three axis with the Mini calculations, affects receptors \u0026amp; notes. Known as \u0026ldquo;Size\u0026rdquo;, \u0026ldquo;Tiny\u0026rdquo; (Modstring only) or \u0026ldquo;Zoom\u0026rdquo; (Modstring only) in NotITG) SkewX (Aribtrary amounts of skewx, affects receptors \u0026amp; notes. Works like NoteSkewX. Known as \u0026ldquo;Skew\u0026rdquo; in NotITG) SkewY (Arbitrary amounts of skewy, affects receptors \u0026amp; notes. Works like NoteSkewY. Not available in NotITG v4.0) Stealth (Arbitrary amounts of stealth.)  The limit is 40 points per axis per column.\nModSplineEnable    Desc: This function turns on/off splines for the designated axis, allowing for saving performance when modsplines are not needed. In NotITG, this does not exist, as modsplines are always \u0026lsquo;on\u0026rsquo;.\nQuirks: This does not clear the modsplines themselves.\nPlayerOptions format: ModSpline(\u0026lsquo;ModSplineAxis_\u0026lt;axis\u0026gt;\u0026rsquo;, \u0026lt;enable\u0026gt;)\nModSpline    Desc: This function sets the spline point to have a given position and magnitude.\nQuirks: The position is not tweenable. Giving only three first three parameters returns the current value, position and rate for the point. Using this will not enable modsplines for the given axis. NotITG expects magnitudes and positions in multiples of 100, similar to what a modstring would parse.\nPlayerOptions format: ModSpline(\u0026lsquo;ModSplineAxis_\u0026lt;axis\u0026gt;\u0026rsquo;, \u0026lt;column\u0026gt; (nil sets all columns), \u0026lt;point\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;position\u0026gt;, \u0026lt;approach rate\u0026gt;)\nNotITG Player format: Set\u0026lt;axis\u0026gt;Spline(\u0026lt;point\u0026gt;, \u0026lt;column\u0026gt; (-1 sets all columns), \u0026lt;magnitude\u0026gt;, \u0026lt;position\u0026gt;, \u0026lt;approach rate\u0026gt;)\nNotITG modstring format: spline\u0026lt;column\u0026gt;\u0026lt;axis\u0026gt;\u0026lt;point\u0026gt; for magnitude (omitting column hits all columns) \u0026amp; spline\u0026lt;column\u0026gt;\u0026lt;axis\u0026gt;offset\u0026lt;point\u0026gt; for position (omitting column hits all columns).\nModSplineTypeSetting    Desc: This function sets what interpolation type the modsplines for a given axis will use.\nThe following types are available (denoted as \u0026lt;type\u0026gt;):\n \u0026lsquo;SplineType_Linear\u0026rsquo; (Linear interpolation, the default in both SM5 and NotITG) \u0026lsquo;SplineType_Cosine\u0026rsquo; (Cosine interpolation, magnitude must be between 0 and 100% in NotITG) \u0026lsquo;SplineType_Cubic\u0026rsquo; (Cubic bezier interpolation, magnitude must be over 100% in NotITG)  Quirks: NotITG only has this available through modstrings, and affects all columns in both SM5 and NotITG.\nPlayerOptions format: ModSplineTypeSetting(\u0026lsquo;ModSplineAxis_\u0026lt;axis\u0026gt;\u0026rsquo;, \u0026lt;type\u0026gt;) NotITG modstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; spline\u0026lt;axis\u0026gt;type\nModSplineReset    Desc: This function resets all spline points for the given axis on all columns. NotITG allows for column-specific clearing through modstring, but not their functions.\nQuirks: Unlike a normal reset, this instantly resets the splines to zero by setting the approach rate to 100000.\nPlayerOptions format: ModSplineReset(\u0026lsquo;ModSplineAxis_\u0026lt;axis\u0026gt;')\nNotITG Player format: Reset\u0026lt;axis\u0026gt;Splines()\nNotITG modstring format: spline\u0026lt;column\u0026gt;\u0026lt;axis\u0026gt;reset (omitting column hits all columns)\nPreserveModSplines    Desc: When turned on, modsplines will no longer be cleared whenever \u0026ldquo;clearall\u0026rdquo; is passed into the modstring parser. Useful when working with ModSplines in modfile templates that use clearall.\nQuirks: N/A\nPlayerOptions format: PreserveModSplines(\u0026lt;enable\u0026gt;)\nNotITG Player format: NoClearSplines(\u0026lt;enable\u0026gt;)\nExample:    SM5:\n--{point position, x magnitude (linear), z magnitude (cosine), rotz magnitude (cubic)} local splinetable = { {0.0, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}},--point 1 (placed at receptor) {1.5, {-1, 1, -1, 1}, {-1, 1, -1, 1}, {-math.pi/2, -math.pi/4, math.pi/4, math.pi/2}},--point 2 {3.0, { 2, 2, -2, -2}, { 3, 3, -3, -3}, { math.pi/2, math.pi/4, -math.pi/4, -math.pi/2}},--point 3 {4.5, {-3, -3, 3, 3}, {-3, -3, 3, 3}, { -math.pi, -math.pi/2, math.pi/2, math.pi}},--point 4 {6.0, { 4, -4, 4, -4}, { 1, -1, 1, -1}, { math.pi, math.pi/2, -math.pi/2, -math.pi}},--point 5 } for pn=1,2 do local a = po[pn] a:ModSplineEnable(\u0026#39;ModSplineAxis_X\u0026#39;, true, true)-- Enable the needed spline axis. :ModSplineEnable(\u0026#39;ModSplineAxis_Z\u0026#39;, true, true) :ModSplineEnable(\u0026#39;ModSplineAxis_RotZ\u0026#39;, true, true) :ModSplineTypeSetting(\u0026#39;ModSplineAxis_Z\u0026#39;, \u0026#39;ModSplineType_Cosine\u0026#39;, true)-- Set the desired interpolation types. :ModSplineTypeSetting(\u0026#39;ModSplineAxis_RotZ\u0026#39;, \u0026#39;ModSplineType_Cubic\u0026#39;, true) for i,v in ipairs(splinetable) do --v is the entry for a point. for col=1,4 do --Comment out the lines below as desired to see the splines on their own. --Note that all three at once may be too messy... --a:ModSpline(\u0026#39;ModSplineAxis_X\u0026#39;, col, i, v[2][col], v[1], 10000) a:ModSpline(\u0026#39;ModSplineAxis_Z\u0026#39;, col, i, v[3][col], v[1], 10000) a:ModSpline(\u0026#39;ModSplineAxis_RotZ\u0026#39;, col, i, v[4][col], v[1], 10000) end end end NotITG:\n--{point position, x magnitude (linear), z magnitude (cosine), rotz magnitude (cubic)} local splinetable = { {0.0, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}},--point 1 (placed at receptor) {1.5, {-1, 1, -1, 1}, {-1, 1, -1, 1}, {-math.pi/2, -math.pi/4, math.pi/4, math.pi/2}},--point 2 {3.0, { 2, 2, -2, -2}, { 3, 3, -3, -3}, { math.pi/2, math.pi/4, -math.pi/4, -math.pi/2}},--point 3 {4.5, {-3, -3, 3, 3}, {-3, -3, 3, 3}, { -math.pi, -math.pi/2, math.pi/2, math.pi}},--point 4 {6.0, { 4, -4, 4, -4}, { 1, -1, 1, -1}, { math.pi, math.pi/2, -math.pi/2, -math.pi}},--point 5 } for pn=1,2 do local a = SCREENMAN:GetTopScreen():GetChild(\u0026#39;PlayerP\u0026#39;..pn) GAMESTATE:ApplyModifiers(\u0026#39;*-1 100 splineztype, *-1 200 splinerotationztype\u0026#39;, pn) if a then for i,v in ipairs(splinetable) do --v is the entry for a point. for col=1,4 do --Comment out the lines below as desired to see the splines on their own. --Note that all three at once may be too messy... --a:SetXSpline(i-1, col-1, v[2][col]*100, v[1]*100, -1) a:SetZSpline(i-1, col-1, v[3][col]*100, v[1]*100, -1) a:SetRotZSpline(i-1, col-1, v[4][col]*100, v[1]*100, -1) end end end end Video Example (Shows only the z and rotz splines):\nModSpline video example\n"},{"id":25,"href":"/dev/actors/ActorsLua-Anatomy+Structure/","title":"Anatomy of a Lua actor","parent":"Lua and Actors","content":"Every actor in SM5 follows a standart general structure, with ActorFrames being more flexible in how they\u0026rsquo;re constructed.\nGeneral layout    Def.Actor { Name= \u0026#34;Example Actor\u0026#34;, InitCommand= function(self) self:zoom(100) end, OnCommand= function(self) self:linear(2):x(30) end, } Every actor starts with a Def. prefix, followed by the actor type itself. An actor can have a name and commands. These commands could be anything, as long as it\u0026rsquo;s suffixed with a Command or MessageCommand, depending on the type of commands needed.\nNames allow one to easily grab the actor through functions like GetChild, but there are other exampled given later.\nWhen the definition is complete, the actor has to be \u0026ldquo;returned\u0026rdquo; for the game to see it. Most of the time, ActorFrames are usually what\u0026rsquo;s returned instead of just a single actor.\nActorFrames and how to build them    ActorFrames can hold other actors. The Def. format is set up like any other lua table, allowing for creating actors in batches. Because of this, there are multiple ways to build an ActorFrame.\nInline building    Actors can be explicitly placed into an ActorFrame like this:\nDef.ActorFrame{ Def.Actor{ --Commands and stuff go here. }, Def.Sprite{ --More commands and stuff go here. } } Concatenation    Because lua tables can be concatenated (added) to each other, so can ActorFrames.\nThis can allow for programatically creating Actors in batches as needed.\nHowever, if one does not plan on creating actors programmaticly, then a simple return Def.ActorFrame{... is all that\u0026rsquo;s needed. Storing it into a local variable that gets returned will waste resources.\nThere are two ways to add onto an actorframe.\nMethod 1 (indexing):\nlocal t = Def.ActorFrame{ Def.Sprite{ --commands \u0026amp; stuff }, Def.BitmapText{ --who even knows }, } t[#t+1] = Def.Actor{ --It\u0026#39;s the third actor } return t Method 2 (lua concatenation):\nreturn Def.ActorFrame{ Def.Sprite{ --commands \u0026amp; stuff }, Def.BitmapText{ --who even knows }, } .. Def.Actor{ --It\u0026#39;s the third actor } Commands    Commands come in two variants: \u0026ldquo;Commands\u0026rdquo; and \u0026ldquo;Messages\u0026rdquo;.\nCommands are usually isolated to a single actor, with a few exceptions. Messages are commands that are meant to be in multiple actors and can be invoked at around the same time on all actors with a \u0026ldquo;Broadcast\u0026rdquo;.\nMESSAGEMAN:Broadcast(\u0026#34;SpecialMove\u0026#34;, {funnymove = 10, absolute = false}) (ex: this would run \u0026ldquo;SpecialMoveMessageCommand\u0026rdquo; on all actors that have this command defined, with a parameter table being passed in. Not all actors might use this table, even though they might have the command defined.)\nIf one needs to manually queue a command or message, the queuecommand or queuemessage functions can be used.\nThese queued commands run only after all previous tweens have finished.\nIf a command has to run instantly, playcommand can be used for that.\nIf one wants to pass custom parameters into the command, a single table has to be used to wrap every parameter passed.\nThese command functions generally take two paramters: The actor calling the function (often called self), and the parameters table passed into the command. The paramters table is optional.\nObtaining Childs and ActorFrame Levels    When using Actors, you can use self:GetParent() and self:GetChild() to get elements from other ActorFrames or actors. (Note: GetChild can only be used by ActorFrames.)\nYou can think of an ActorFrame as a tree of objects. This is the original table. And now you\u0026rsquo;ve called GetParent on the ActorProxy.\nDef.ActorFrame{ Def.BitmapText{}, * Def.ActorProxy{}, } When calling it, you go back up a level, which in this case, it will become ActorFrame.\n* Def.ActorFrame{ Def.BitmapText{}, [] Def.ActorProxy{}, } In this new location, we get the MyText actor, which can be achieved by calling the GetChild command. The command uses a String argument, but can also grab from nested tables in case of an ActorFrame not having actors with names assigned. On those cases, actors are just indexed on that ActorFrame set.\nExample Without Names    Def.ActorFrame{ OnCommand=function(self) -- If we want to get to the BitmapText, we\u0026#39;ll need to get the second entry on the ActorFrame. self:GetChild(\u0026#34;\u0026#34;)[2] -- returns the BitmapText actor. end, Def.Sprite{}, Def.BitmapText{} } Example With Names    Def.ActorFrame{ OnCommand=function(self) -- If we want to get to the BitmapText, we\u0026#39;ll need to get the \u0026#34;Text\u0026#34; actor. self:GetChild(\u0026#34;Text\u0026#34;) -- returns the BitmapText actor. end, Def.Sprite{ Name = \u0026#34;Image\u0026#34; }, Def.BitmapText{ Name = \u0026#34;Text\u0026#34; } } "},{"id":26,"href":"/dev/mods/Mods-12-Chart-Mods/","title":"Chart modifiers","parent":"Guide to Modifiers","content":"Chart Modifiers    Chart modifiers affect the chart itself, meaning what has to be stepped changes. These cannot be called during gameplay, but can be called through attacks \u0026amp; course files. All of these are boolean modifiers. At the moment, some of these aren\u0026rsquo;t properly set up for any game other than dance.\n\u0026ldquo;Transform\u0026rdquo; Modifiers    Transform modifiers add or remove or alter notes from the chart, affecting how the chart has to be played. Some of these might disqualify your score depending on what version of SM is played. The list is shown in application order, from first to apply to last. (With exception to the first one).\nAttackMines (SM5 only)    Desc: When active, all mines apply a random attack when hit, and all other effects that come with hitting mines still happens.\nQuirks: Appears to be activatable mid-gameplay?\nPlayerOptions format: AttackMines()\nModstring format:  attackmines\nLittle    Desc: Removes all notes that aren\u0026rsquo;t on 4ths.\nQuirks: N/A\nPlayerOptions format: Little()\nModstring format:  little\nNoRolls    Desc: All rolls become normal holds.\nQuirks: N/A\nPlayerOptions format: NoRolls()\nModstring format:  norolls\nNoHolds    Desc: All holds are replaced with a single tap note where the hold would start. Has a modstring alias of \u0026ldquo;nofreeze\u0026rdquo;.\nQuirks: N/A\nPlayerOptions format: NoHolds()\nModstring format:  noholds\nNoMines    Desc: All mines are removed from the chart.\nQuirks: N/A\nPlayerOptions format: NoMines()\nModstring format:  nomines\nNoJumps    Desc: All jumps are removed from the chart, meaning a single note would be left where a jump would have been. Also affects hands (3 notes at once) and quads (4 notes at once).\nQuirks: N/A\nPlayerOptions format: NoJumps()\nModstring format:  nojumps\nNoLifts (SM5 only)    Desc: Removes all lift notes from the chart.\nQuirks: N/A\nPlayerOptions format: NoLifts()\nModstring format:  nolifts\nNoFakes (SM5 only)    Desc: Removes all fake notes from the chart.\nQuirks: N/A\nPlayerOptions format: NoFakes()\nModstring format:  nofakes\nNoHands    Desc: Removes notes until there are no more than two columns being hit at a given time.\nQuirks: N/A\nPlayerOptions format: NoHands()\nModstring format:  nohands\nNoQuads    Desc: Removes notes until there are no more than three columns being hit at a given time.\nQuirks: N/A\nPlayerOptions format: NoQuads()\nModstring format:  noquads\nNoStretch    Desc: Eliminates jumps (2 notes at once) such that there\u0026rsquo;s only one note left where there would be two. Does not affect hands (3 notes at once) or quads (4 notes at once).\nQuirks: N/A\nPlayerOptions format: NoStretch()\nModstring format:  nostretch\nBig    Desc: Adds 8th notes between the 4th notes when possible.\nQuirks: N/A\nPlayerOptions format: Big()\nModstring format:  big\nQuick    Desc: Adds 16th notes between the 8th notes when possible.\nQuirks: N/A\nPlayerOptions format: Quick()\nModstring format:  quick\nBMRize    Desc: Performs Big, then Quick on the chart, supposedly \u0026ldquo;BMR-izing\u0026rdquo; it.\nQuirks: N/A\nPlayerOptions format: BMRize()\nModstring format:  bmrize\nSkippy    Desc: Adds 16th notes between 4th notes.\nQuirks: N/A\nPlayerOptions format: Skippy()\nModstring format:  skippy\nMines    Desc: Adds more mines.\nQuirks: N/A\nPlayerOptions format: Mines()\nModstring format:  mines\nEcho    Desc: Adds 8th note \u0026ldquo;echos\u0026rdquo; after all tap notes.\nQuirks: N/A\nPlayerOptions format: Echo()\nModstring format:  echo\nWide    Desc: Turns all single 4th notes into jumps.\nQuirks: N/A\nPlayerOptions format: Wide()\nModstring format:  wide\nStomp    Desc: Turns all relatively isolated 4th notes into jumps.\nQuirks: N/A\nPlayerOptions format: Stomp()\nModstring format:  stomp\nPlanted    Desc: Turns notes into holds such that there is at least one hold being held throughout the whole chart.\nQuirks: N/A\nPlayerOptions format: Planted()\nModstring format:  planted\nFloored    Desc: Turns notes into holds such that there is at least two holds being held throughout the whole chart.\nQuirks: N/A\nPlayerOptions format: Floored()\nModstring format:  floored\nTwister    Desc: Turns notes into holds such that there is at least three holds being held throughout the whole chart.\nQuirks: N/A\nPlayerOptions format: Twister()\nModstring format:  twister\nHoldRolls    Desc: Turns all holds into rolls. Goes by \u0026ldquo;holdstorolls\u0026rdquo; in ITG.\nQuirks: N/A\nPlayerOptions format: HoldRolls()\nModstring format:  holdrolls\n\u0026ldquo;Turn\u0026rdquo; Modifiers    Turn modifiers shift around the chart, but do not add or remove any notes. These are applied after the transform modifiers, so inserted notes get affected as well. They can be turned off all at once by using this modstring: 0% turn\nMirror    Desc: The notes are mirrored across the field.\nQuirks: N/A\nPlayerOptions format: Mirror()\nModstring format:  mirror\nBackwards (SM5 only)    Desc: The chart is \u0026lsquo;rotated\u0026rsquo; 180 degrees, which may not be the same as \u0026lsquo;mirror\u0026rsquo;.\nQuirks: N/A\nPlayerOptions format: Backwards()\nModstring format:  backwards\nLeft    Desc: The chart is \u0026lsquo;rotated\u0026rsquo; 90 degrees to the left.\nQuirks: N/A\nPlayerOptions format: Left()\nModstring format:  left\nRight    Desc: The chart is \u0026lsquo;rotated\u0026rsquo; 90 degrees to the right.\nQuirks: N/A\nPlayerOptions format: Right()\nModstring format:  right\nShuffle    Desc: Mixes around where the notes are.\nQuirks: N/A\nPlayerOptions format: Shuffle()\nModstring format:  shuffle\nSoftShuffle    Desc: Randomly performs either not shuffling, swapping of L+R, swapping of U+D or mirroring on every row.\nQuirks: N/A\nPlayerOptions format: SoftShuffle()\nModstring format:  softshuffle\nSuperShuffle    Desc: Runs Shuffle, then performs an extra shuffle on the tap notes (includes normal taps, fakes, mines and lifts) alone.\nQuirks: N/A\nPlayerOptions format: SuperShuffle()\nModstring format:  supershuffle\n"},{"id":27,"href":"/user-guide/setup/controllers/","title":"Configure controllers","parent":"Setup","content":"On Alpha 4.5 and newer, we switched to using an XInput-compliant input system.\nDue to these changes, not all controllers (such as gamepads, dance pads, and other rhythm game-specific controllers) are guaranteed to function with 5.3 out of the box (even if they were supported on earlier versions), unless a controller mapping profile has been created for that specific controller.\nWe would like to thank Josen Tiamat for writing these new instructions for how to configure your controllers for use on 5.3.\nStep 1: Things to check for first    So you started up the game and boom you go to “Config Key/Joy Mappings” and set up your controller, skip this guide because you’re done with what you need to do.\nYou can’t configure your Config Key/Joy Mappings! OH NO! (I will get to this)    Test your input, see if your keys are mapped and if so which ones. By pushing the buttons on the pad it’ll say something to the effect of “Key B 12 – Not Mapped” and if you step/press on the key and nothing shows up it’s not mapped, no big proceed to the next step to set it up.\nStep 2: The Easy Way    So on to the good stuff; 5.3 has a built in gamepad tool that will automatically take care of most of this for you\nYou push “Enter” on the keyboard and push the appropriate button on the dance pad/etc. to map the buttons to the button you want.\nI would recommend using this screen for most controllers on pc, it takes a lot of the guess work out of the whole thing. After setting this up repeat Step 1 if your keys show up as “Unmapped” that’s great go to the “Config Key/Joy Mappings” and do your thing, you’re done with the guide!\nIf it still doesn\u0026rsquo;t work\u0026hellip;\nStep 3: The not super intuitive way (SDL2 Gamepad Tool)    There is a nifty tool around called SDL2 Gamepad Tool. You connect your controller (via USB or Bluetooth or however you desire to connect your controller to the PC), and it’ll show up on the top drop down menu.\n Click \u0026ldquo;Create a New Mapping\u0026rdquo; Step/Press the input you want for those buttons much like you would on Step 2 of this procedure. Skip the rest. Save the Mapping String. Copy the Mapping String. Go to where you installed the game, and paste the string into Data/gamecontrollerdb.txt  A note    The “#” is useful for when you want to have different Mapping Strings for the same gamepad, it basically hides the mapping string from the program reading it. I made 3 different mapping for testing the the program would only recognize one, then I hid the mapping string with a hashtag (pound symbol for you oldies around) and the one not hidden was now seen by the program.\nBasically, don’t do multiple mapping strings on the same controller (even if you change the name); the program will work with one at a time and honestly one is all you need. You should be good to go and repeat Step 1 and then go to “Config Key/Joy Mappings” right after and set up your pad.\nStill isn\u0026rsquo;t working?    This hasn’t quite happened to me (I tried with the PS3 DDR mat) but there are 2 types of controllers, a “Hat” type and not. So let’s say for example you hook up a pad/controller and the Dpad you configured up down left and right but “Config Key/Joy Mappings” only allows you to push one of them and the rest don’t work.\nTry configuring the directions to the analog stick instead and then mapping them again. I don’t think you should have to but it works, I’ve tested this with my PS4 Controller and in fact you can play with analog input.\nXInput interfering with HIDAPI mode, and breaking axis pads    If you have an axis pad which is showing two sets of buttons, or simply just cancelling out, and you cannot seem to map it in game, this is what you need to do to fix it. The pad showing two buttons will look like this:\nI am pressing the left Arrow, but getting two sets of inputs. On Linux and MacOS, this can be due to an installed xbox360 driver, or the xpad module intercepting the events, and reporting an axis anyway. The next patch of OutFox mitigates this issue a little bit, but it still is a pain.\nTo fix this, you need to write down the BUTTON numbers shown on screen, so you get a list for all four arrows:\nDown=Joy1_Button 2 Left=Joy1_Button 1 Right=Joy1_Button 4 Up=Joy1_Button 3 Make sure that you close the game. You can now navigate to your save folder, and look for your keymaps.ini file and set the buttons manually, so you can basically ignore the axis values given by the xpad driver. you need to add the mapping before the ::: as shown below:\nYou can save this, and then start the game again, and your pad will be mapped.\nDown=Joy1_Button 2 Left=Joy1_Button 1 Right=Joy1_Button 4 Up=Joy1_Button 3 Make sure that you close the game. You can now navigate to your save folder, and look for your keymaps.ini file and set the buttons manually, so you can basically ignore the axis values given by the xpad driver. you need to add the mapping before the ::: as shown below: You can save this, and then start the game again, and your pad will be mapped.\n"},{"id":28,"href":"/dev/mods/","title":"Guide to Modifiers","parent":"Developers and Creators","content":"Want your arrows to dance around to the music (as seen in Pump it Up PRO 2 and the StepMania/ITG Modfile Community)?\nWell, if you\u0026rsquo;re a fan of modifiers and attacks, this guide is for you!\nWhat are Mods/Attacks?    Modifiers (or Mods) apply all kinds of effects to the notes in a song - they can make the notes scroll in different directions, bounce to the beat, and many, many more things!\n You can manually turn on modifiers on any song by entering the player options menu (press start twice when you pick a song to play), and choosing Modifiers then Exit at the bottom. Mods in the Acceleration, Effects, Appearance, and Scroll categories work best for attacks - feel free to play around!\n Attacks are one of the easiest ways to add Modifiers to your simfile - Attacks will apply whatever mods you want at specific times you set in the song!\nFor StepMania 5/Outfox-based arcade cabinets (and SM5-based games like PIU Infinity), Attacks can even be used in USB custom songs and charts (if enabled)!\nAdding Attacks to a Simfile    We\u0026rsquo;ll assume you\u0026rsquo;ve already created a simfile, and know a bit about how to use the editor here.\nFirst off:\n  Open a Simfile in the Outfox editor (Title Screen \u0026gt; Edit/Share \u0026gt; Edit Songs/Steps). Pick a song, then pick a difficulty (chart).\n  When editing the chart, press Enter where you want the Modifier to start.\n  Choose Modifiy attacks at current beat at the bottom of the menu.\n   Choose Add Attack\n  Here, you\u0026rsquo;ll enter a Modifier to get applied:\n Many modifiers from the Player Options menu will work (Beat, Drunk, etc), for now just type Beat and press Enter. Any attacks you add will show up to the right of the notes, both when editing and playing a simfile in the editor.     Press P to play your song - you should see the attack you added scroll up the screen with the notes.\n When the attack with your Beat modifier scrolls to the top of the screen, the arrows will start bouncing to the beat!    Editing/Removing Attacks    Attacks only last a few seconds by default - to make it last longer you\u0026rsquo;ll need to edit the attack\u0026rsquo;s length.\nEdit an Attack      In the editor, go to the beat where the Attack you want to edit is, and press Enter.\n  All Attacks on that beat are listed - pick the one you want to edit (arrow keys/enter).\n If you don\u0026rsquo;t see the attack you just added, make sure you\u0026rsquo;re lined up to the Exact time the Attack is at!    From here, press Enter on any of these options to change them:\n Starting time: When this attack starts. It\u0026rsquo;s better to remove/re-add an attack if you want to change when it starts. Seconds Remaining: How long the attack lasts (defalt: 5 seconds) Attack 1: The mod you just added - press enter to change Add Mod: Pick this to add another mod to this attack    Remove an Attack      In the editor, go to the beat the Attack is on and press Enter.\n  Pick the attack you want to remove and press Enter.\n  Pick the Mod you want to remove and press Enter.\n  When asked for a new Mod, backspace all the letters in the mod and press Enter.\n When all Mods in an attack are removed, the Attack is auto-removed.    Mod Strength/Approach Rate    Mod Strength    Is Beat too wild? Not wild enough? You can fix that!\n To change how strong a mod is, add a percentage before it, like 50% Beat\n By default, any mods you add default to 100%. You can dial this down if you don\u0026rsquo;t want a mod to be as strong.\nPercentages above 100% are a-ok if you want really strong mods! Negative percentages like -50% Beat work too if you want to totally invert an effect (it might not be obvious on all mods, but it does work).\nFinally: No means the same thing as 0%. Say, if you have a Beat attack earlier in the song, you can turn it off with 0% Beat or No Beat - either works!\nThe difference between 50% Beat and 100% Beat\n In the above video - Left = 40% Beat, Right = 125% Beat\n  Mod Approach Rate    Want a mod to slowly fade in over time, or instantly go to max strength? You can change that too!\n To change how fast/slow a mod is applied, add a * and a number before the mod, like *2 Beat\n Higher numbers apply mods faster, lower numbers (decimals included!) make mods apply slower.\n*0.5 = Half as fast, *2 = Twice as fast.\n(The default *1 applies at a rate of 100% of a mod over 1 second)\n Mod approach rate can also combine with any strength, including 0%! If you want to get rid of a mod really fast, you can use an attack like *50 0% Beat.\n The difference between *0.5 Beat and *10 Beat\n In the above video - Left = *0.5 Beat (fades in half as fast), Right = *10 Beat (fades in 10x as fast!). They both get to the same strength at the end, but the left side takes longer to do so.\n Resources/What\u0026rsquo;s Next    Next up is to play around with Modifiers! Experiment with what effects you can get, and discover what you do/don\u0026rsquo;t like!\n What Mods Can I Use?    Lots, actually!\n Check out the Guide to Mods in the sidebar for a list of mods you can use!\n  Mods Resources      FMS Cat\u0026rsquo;s Flip-Invert site helps give you combinations of various mods to move the note columns across the screen. Just drag the receptors where you want them on-screen!\n (You can alternatively use the MoveX/Y/Zn mods to move single note columns, like MoveX1, MoveX2, etc)    Check out WinDEU\u0026rsquo;s Marathon Tutorial series - it focuses on older versions of StepMania (where some mods, like Drunk and Tipsy, have different names), but a lot of the info still applies to SM5/Outfox. The later videos in the series dive really deep into how some mods behave!\n How to set up Mods in Courses in also covered in earlier videos in the series (though again, focusing on older versions of StepMania)    You can join Project Outfox\u0026rsquo;s Discord server for more help from the community - feel free to ask mods/attacks-related questions in channels like #mods-coding-help.\n   My Mods Don\u0026rsquo;t Work!     Double check you\u0026rsquo;ve spelled your Mod name right - mods from older versions of the game (like OpenITG) may have different names in SM5/Outfox! You may get strange behavior if you add new attacks into a simfile before the last attack in the file.   Mod Behaviors Across Different Themes    Some mods you add (like Drunk, Tornado, Boomerang) may change behavior depending on the theme you\u0026rsquo;re currently using.\nIn older versions (like Stepmania 5.0/5.1), the theme\u0026rsquo;s internal resolution (HD vs non-HD themes, specifically SCREEN_HEIGHT) is used in calculations for certain mods. On these versions, these mods will behave differently on themes with different internal resolutions.\nIn Outfox, these calculations are performed based on a completely separate theme metric instead, ModifierHeight. If the theme changes this value, it will affect those calculations (and therefore mod behaviors, and is noted as doing so).\nPlan accordingly if you plan on playing your simfiles/chart edits on different versions/themes!\n Other Notes     Mods obey stops and BPM changes in songs. If your song stops while a mod like Beat is in effect, the notes will freeze in the middle of Beat\u0026rsquo;s animation, skewed to the sides. Earlier versions of StepMania can round the time a mod starts at if you save and exit a simfile in the editor, making it harder/impossible to edit in the future. If this happens, you\u0026rsquo;ll need to manually edit the mod lines under the #ATTACKS tag in your simfile\u0026rsquo;s .sm/.ssc files.  "},{"id":29,"href":"/dev/effects/EffectFiles-ModifierFiles/","title":"Modifier Files","parent":"Effect Simfiles","content":"These simfiles have modifiers that are scripted to happen at various points of the song. The difficulty can range between \u0026ldquo;trivial to read\u0026rdquo; to \u0026ldquo;may as well memorize the chart\u0026rdquo;.\nOften called \u0026ldquo;Modfiles\u0026rdquo; or \u0026ldquo;Modcharts\u0026rdquo;.\nThese usually use the FGCHANGES or BGCHANGES of a simfile to load the lua files (if any are used).\nDisclaimer: Make sure you\u0026rsquo;ve got making a chart down before starting to make modcharts! Good mods can\u0026rsquo;t save a bad chart!\nHow to Apply Modifiers    There are a few ways to go about this, and it varys depending on what version of SM is being used.\nApplyGameCommand (SM3.95/oITG/nITG)    ApplyGameCommand is a GameState function that provides a way to send modifiers among other commands. The first paramter is the command type followed by the parameters. (In this case, a modstring) The second parameter is what player to apply the command (1 = player 1). If not specified, it applies to all players.\nGAMESTATE:ApplyGameCommand(\u0026#34;mod, *0.5 420 beat\u0026#34;, 1) While it\u0026rsquo;s still available in SM5 (including SM5.3), it\u0026rsquo;s not recommended because it applies mods to the \u0026ldquo;Preferred\u0026rdquo; ModsLevel, which means modifiers apply instantly (no transition), and they persist outside of the simfile. SM5.2 Doesn\u0026rsquo;t even have this function available.\n#MODS (Course files, SM3.95/oITG/nITG/SM5)    Old modfiles used to require going into marathon mode to play the scripted modifiers. Unlike most things, this is time-based due to charts being able to have stops.\n#MODS:TIME=0.000:END=10.000:MODS=*0.5 420 beat; #MODS:TIME=5.000:LEN=1.600:MODS=*2 50 stealth; (ex: Beat starts at 0 seconds and ends at 10. Stealth turns on at 5 seconds and ends 1.6 seconds later)\nNowadays, this is considered obsolete in favor of lua-powered modifiers. It\u0026rsquo;s still usuable in SM5.\n#ATTACKS (Simfiles, nITG/SM5)    Allows for the application of modifiers similar to what course files have. The syntax is exactly the same, just with MODS becoming ATTACKS.\n#ATTACKS:TIME=0.000:END=10.000:MODS=*0.5 420 beat; #ATTACKS:TIME=5.000:LEN=1.600:MODS=*2 50 stealth; nITG accepts #ATTACKS or #MODS inside the .sm file, while SM5 only accepts #ATTACKS in sm \u0026amp; ssc.\nThese do not load in course mode, however.\nApplyModifiers (nITG)    A dedicated function for applying modifiers without needing the processing overhead and \u0026ldquo;mod, \u0026quot; that ApplyGameCommand does.\nGAMESTATE:ApplyModifiers(\u0026#34;*0.5 420 beat\u0026#34;, 1) Often used as a replacement for ApplyGameCommand in nITG modfiles.\nPlayerOptions functions (SM5)    Every modifier has a setter function in PlayerOptions. This can be used in place of other functions. These are case-sensitive, though. If using strings, they\u0026rsquo;ll have to be parsed to make use of these functions.\nlocal po = {GAMESTATE:GetPlayerState(0):GetPlayerOptions(\u0026#39;ModsLevel_Song\u0026#39;), GAMESTATE:GetPlayerState(1):GetPlayerOptions(\u0026#39;ModsLevel_Song\u0026#39;)} po[1]:Beat(4.2, 0.5) SetPlayerOptions (SM5)    This function works by resetting the PlayerOptions for the given level, and setting it according to the string.\nGAMESTATE:GetPlayerState(PLAYER_1):SetPlayerOptions(\u0026#39;ModsLevel_Song\u0026#39;, \u0026#39;*0.5 420 beat\u0026#39;) Because it resets PlayerOptions, it might not be so useful for applying scripted modifiers.\nFromString (SM5.1 and onwards)    Like how ApplyModifiers is specifically for modstrings in nITG, FromString provides direct access to the string parser used for modifiers in ApplyGameCommand, and works very much like how ApplyGameCommand would.\nlocal po = {GAMESTATE:GetPlayerState(0):GetPlayerOptions(\u0026#39;ModsLevel_Song\u0026#39;), GAMESTATE:GetPlayerState(1):GetPlayerOptions(\u0026#39;ModsLevel_Song\u0026#39;)} po[1]:FromString(\u0026#34;*0.5 420 beat\u0026#34;) Modfile templates    Starting to make a modfile can seem really daunting if one does not know how to begin. Luckilly, there are many templates out there to help with creating modfiles.\nOnes made for Open/NotITG and SM3.95 are usually done with .xml files, and some rare .lua files.\nOnes made for SM5 are almost always .lua files.\nStepMania 5 templates      MTK\u0026rsquo;s SM5.3 port of Exschwasion\u0026rsquo;s easing template\n https://drive.google.com/open?id=1HfCFvTHZUI4dO_eAk4iN5mO3H61caHzE Lost of local variables used up in the main scope to preserve syntax. The place to put the actual calls is a little different.    XeroOl\u0026rsquo;s port of the \u0026ldquo;Mirin\u0026rdquo; template\n https://github.com/XeroOl/sm5-mirin Unknown if up to date.    Sudospective\u0026rsquo;s Kitsu Template\n https://github.com/Tiny-Foxes/kitsu-template Up to date: fully supports Project OutFox Fully compatible with the new tween system Object Orientated Template Easy to find update loop    OpenITG/NotITG/SM3.95 templates      Exschwasion\u0026rsquo;s easing template\n OpenITG: https://drive.google.com/open?id=1q_d8bJw80uJ4UBUWRj-4iKtTe1ORNkDl NotITG: https://drive.google.com/open?id=10J7B8EOeMAcS0WSvfcnni8UG7xbq2X66 Very popular \u0026amp; widely used. Modstrings are fully usable. Has ease functions so you\u0026rsquo;re not limited to just linear, accelerate, decelerate \u0026amp; spring.  These can be applied to modifiers \u0026amp; functions. Needs sustains to ensure the eases fully complete.   Has an \u0026ldquo;actions\u0026rdquo; table (at a given beat, a function runs or a message is broadcast)    XeroOl\u0026rsquo;s \u0026ldquo;Mirin\u0026rdquo; template\n https://github.com/XeroOl/notitg-mirin Documentation: https://xerool.github.io/notitg-mirin/ Gaining popularity. Supposed to be optimized (a lot more than the ease template) Allows for \u0026lsquo;custom\u0026rsquo; modifiers through node Has a plugin system to allow for extending the template.  https://github.com/XeroOl/notitg-mirin-plugins   Has ease functions  No sustains needed.   Aims to not leave behind global variables. [citation needed] Cannot use modstrings? [citation needed] difficulty to use vs ease template [citations needed]    TaroNuke\u0026rsquo;s \u0026ldquo;Wow! It\u0026rsquo;s Made\u0026rdquo; template\n Used during TaroNuke\u0026rsquo;s \u0026ldquo;Wow! It\u0026rsquo;s Made\u0026rdquo; streams where he wrote a modfile live.  https://www.twitch.tv/videos/321383917 https://www.twitch.tv/videos/321386003 https://www.twitch.tv/videos/321379794 https://www.twitch.tv/videos/321380780   Also pretty much how mods boot camp 3 files were made. What does it have?    Daikyi\u0026rsquo;s simple template\n https://cdn.discordapp.com/attachments/227819834480656384/493515557216452638/default.xml Super simple \u0026amp; basic. (So, might be good for beginners) Modstrings are fully usable via mods table. Has an \u0026ldquo;actions\u0026rdquo; table. Lots of comments for documentation.    Ky_Dash\u0026rsquo;s template\n https://github.com/KyDash/nitg-template \u0026ldquo;somewhat cursed\u0026rdquo; ???    FMS_Cat\u0026rsquo;s template\n Used in FMS_Cat\u0026rsquo;s modfiles. Mainly uses \u0026ldquo;build.js\u0026rdquo; to construct the xml files. CatEvent system for queueing everything? Everything is a function?    XeroOl\u0026rsquo;s Galaxy Mod Loader (XGML) template\n https://github.com/XeroOl/notitg-xgml Predecesor to mirin Considered deprecated/obsolete? Has addons to extend template functionality  https://github.com/XeroOl/notitg-xgml-addons   What else?    BrotherMojo\u0026rsquo;s template\n As seen in babaroque \u0026amp; blaster \u0026amp; mkdr?    WinDEU\u0026rsquo;s template\n As seen in Mods Boot Camp?    Cering\u0026rsquo;s template (forked from exsch?)\n As seen in NJSRT \u0026amp; Aster\u0026rsquo;s Astral Adventures + Conflict?    HeySora\u0026rsquo;s template\n As seen in purple people eater?    FMS_Cat\u0026rsquo;s Automaton template\n https://github.com/FMS-Cat/automaton-notitg-template    Jaezmien\u0026rsquo;s template\n https://github.com/Jaezmien/NotITG_Template    "},{"id":30,"href":"/user-guide/config/preferences/","title":"Preferences.ini","parent":"Features \u0026 Config","content":"Preferences.ini is a file that contains many of the system preferences. Some of them are accessible within Project OutFox\u0026rsquo;s settings menu, but some of them are only accessible by editing the file. Manual edits to Preferences.ini must be performed when the game is closed, or else they may be automatically overwritten.\nIt is located in the Save folder.\nList of parameters    AdditionalCourseFolders    Takes a comma-separated list of directories where additional course (.crs) files are stored.\nSee folder.\nAdditionalFolders    Takes a comma-separated list of directories where additional content folders are stored.\nSee folder.\nAdditionalSongFolders    Takes a comma-separated list of directories where additional song groups are stored.\nSee folder.\nAllowExtraStage    When event mode is off, allow the player to qualify for an extra stage.\nAllowHoldForOptions    Allow the user to enter the player options menu by holding the start button when selecting a song. If set to 0, the user must press the start button twice instead.\nAllowMultipleHighScoreWithSameName    Allows multiple high score entries by the same user.\nAllowMultipleInstances    Allows multiple instances of Project OutFox to be opened.\nAllowMultipleToasties    Allows the legacy toasty animation to play multiple times in a single song.\nAllowMultiTexture    AllowSongDeletion    Allows the ability to delete a song on the Music Wheel by performing the following combination on the selected song:\nCTRL + Backspace\nAllowUnacceleratedRenderer    AllowW1    Enables the W1 judgement (\u0026ldquo;Flawless\u0026rdquo;, \u0026ldquo;Marevelous\u0026rdquo;, \u0026ldquo;Fantastic\u0026rdquo; depending on theme) in regular gameplay.\nAnisotropicFiltering    Announcer    Specifies the name of the current announcer.\nArcadeOptionsNavigation    AttractSoundFrequency    Determines how often sound is enabled during the attract mode loop in arcade mode.\nAutoJoin    AutoMapOnJoyChange    AutoPlay    AutogenGroupCourses    Automatically generates nonstop courses based on installed songs.\nAutogenSteps    Allows charts to be generated for other game types and styles that a song does not have its own charts for.\nBGBrightness    Sets the brightness of background visuals in gameplay.\nBackUpAllSongSaves    BackgroundFitMode    Determines scaling/cropping of song backgrounds based on resolution and aspect ratio.\nBlinkGameplayButtonLightsOnNote    BothAtOnce    This preference controls BothAtOnce, an input mode that mirrors input across both players. This preference is\nBreakComboToGetItem    CelShadeModels    Currently only used on Legacy Dancing Characters, which makes the characters have a toon-styled shade applied.\nCenter1Player    In single-player modes, renders the notefield in the center of the screen rather than to the left or right.\nCenterImage    CenterImageAddHeight, CenterImageAddWidth, CenterImageTranslateX, and CenterImageTranslateY are used to adjust overscan.\nCoinMode    This setting determines whether Project OutFox will behave as an arcade game or not;\n If set to Pay, coins and credits must be inserted to play. The game will use an attract loop, and the main menu will not be accessible. If set to Free Play, the game will behave similarly to Pay mode, except credits are not required to play. If set to Home, Project OutFox\u0026rsquo;s arcade workflows will be disabled. The game will use its default user experience, including access to the main menu.  CoinRecoveryExpirationHours    CoinsPerCredit    Specifies the number of coins that must be inserted for each credit.\nComboContinuesBetweenSongs    If enabled, the player\u0026rsquo;s combo will carry over between songs rather than start from 0.\nConstantUpdateDeltaSeconds    Cookie    Cookies are delicious delicacies.\nCourseSortOrder    CoursesToShowRanking    CurrentGame    Determines the current game types.\nCustomSongsEnable    If set to 1, players may load their own songs from a folder in their profile on a USB media (similar to the \u0026ldquo;r21\u0026rdquo; patch from In the Groove 2).\nCustomSongsLoadTimeout    CustomSongsMaxCount    The maximum number of songs that can be loaded as custom songs.\nCustomSongsMaxMegabytes    The maximum file size for audio files of custom songs.\nCustomSongsMaxSeconds    The maximum length in seconds for custom songs.\nDDRStyleRandom    DebounceCoinInputTime    DebugLights    Displays a debug overlay for lights outputs.\nDefaultLocalProfileIDP1    DefaultLocalProfileIDP2    DefaultModifiers    Comma-seperated list of modifiers used by players with no profile, or a new profile with no personal settings.\nDefaultRecordLength    DefaultTheme    Sets the theme that will be loaded as a backup if the current theme cannot be loaded. If theme cannot also be found, then it will look back for \u0026quot;default\u0026quot; as the theme to load.\nDelayedBack    If enabled, you must hold the back button for 0.5 seconds to exit gameplay.\nDelayedCreditsReconcile    DelayedModelDelete    DelayedScreenLoad    DelayedTextureDelete    DisableScreenSaver    DisableUploadDir    DisabledSongs    Defines songs that will be disabled (by not making them visible or selectable) from selection. Formatting for this follows the structure of folder., and must be a path to the song.\nDisabledSongs=MyGroup/MySong,MyGroup2/MyOtherSong DisplayAspectRatio    The current aspect ratio, expressed as a decimal (i.e. 16:9 = 1.777778, or 16/9).\nDisplayColorDepth    The current color depth, either 32 or 16.\nDisplayHeight and DisplayWidth    Determines the resolution.\nDisplayId    Disqualification    If enabled, scores will not be saved if specific modifiers (such as constant BPM) is used.\nEXTIOComPort    EasterEggs    Enables or disables easter eggs, if a theme is aware of and uses this preference.\nEditClearPromptThreshold    EditRecordModeLeadIn    EditorMemoryCardOsMountPoint    EditorNoteSkinP1 and EditorNoteSkinP2    EditorShowBGChangesPlay    Enables background scripts to be previewed when playing back a song in the editor.\nEnableAttackSounds    EnableBeginnerHelperBackgrounds    EnableMineHitSound    Plays an explosion sound if you hit a mine note.\nEnableScoreboard    EventMode    Also known as \u0026ldquo;Free Mode\u0026rdquo;; if disabled, each game session is divided into a maximum number of stages (arcade-style).\nExtendedChineseGlyphs    ExtendedJapaneseGlyphs    ExtendedKoreanGlyphs    FailOffForFirstStageEasy    FailOffInBeginner    FastLoad    FastLoadAdditionalSongs    FastNoteRendering    ForceLogFlush    ForceMipMaps    FrameLimitPercent    FullscreenIsBorderlessWindow    Enables borderless fullscreen.\nGetRankingName    GlobalOffsetSeconds    HarshHotLifePenalty    HiddenSongs    HideIncompleteCourses    HighResolutionTextures    HighresScreenshotsBydefault    IgnoredDialogs    ImageCache    InputBackgroundEvents    InputDebounceTime    InputDrivers    Interlaced    Language    LastConnectedServer    LastSeenInputDevices    LastSeenVideoDriver    Identifies the video card last used with the game. Automatically generated.\nLastSeenMemory    Automatically generated.\nLifeDifficultyScale    LightsAheadSeconds    LightsComPort    LightsDriver    LightsFalloffSeconds    LightsStepsDifficulty    If there is no dedicated lights chart, generates lighting patterns from the existing charts on the specified difficul(ties).\nLockCourseDifficulties    LogCheckpoints    LogFPS    At intervals, the current FPS and average FPS will be appended to the log file.\nLogSkips    LogToDisk    Enabling this will write log files.\nLongVerSongSeconds    Determines how long a song must be for it to be classified as \u0026ldquo;long\u0026rdquo; (which costs two stages outside of Event Mode).\nMarathonVerSongSeconds    Determines how long a song must be for it to be classified as a \u0026ldquo;marathon\u0026rdquo; (which costs three stages outside of Event Mode).\nMachineName    MaxHighScoresPerListForMachine    MaxHighScoresPerListForPlayer    MaxInputLatencySeconds    MaxRegenComboAfterMiss    MaxSongsInEditCourse    MaxTextureResolution    MemoryCardDriver    MemoryCardOsMountPoint    MemoryCardOsMountPoint    MemoryCardPadmissEnabled    MemoryCardProfileImportSubdirs    MemoryCardProfileSubdir    The name of the subfolder used to store profile data on a USB device.\nMemoryCardProfiles    MemoryCardUsbBusP1    MemoryCardUsbBusP2    MemoryCardUsbLevelP1    MemoryCardUsbLevelP2    MemoryCardUsbPortP1    MemoryCardUsbPortP2    MemoryCards    MenuTimer    If enabled, a timer is used in gameplay menus. Usually used in arcade or event settings.\nMercifulBeginner    MercifulDrain    MercifulSuperMeter    MinPercentageForMachineCourseHighScore    MinPercentageForMachineSongHighScore    MinTNSToHideNotes    The minimum judgement window needed for notes to disappear after hitting them.\nMinimum1FullSongInCourses\nMonkeyInput    A deprecated input mode no longer used on Project OutFox. This is maintained for compatibility only.\nMoveRandomToEnd    MovieColorDepth    MovieDrivers    MusicWheelSwitchSpeed    MusicWheelUsesSections    MuteActions    Mutes sound effects in menus.\nNetworkStartOffset    NeverBoostAppPriority    NeverCacheList    NumBackgrounds    OnlyDedicatedMenuButtons    OnlyPreferredDifficulties    PAL    PacDriveLightOrdering    PadStickSeconds    PercentageScoring    If enabled and themes are aware, scores will be expressed as percentages.\nPreCacheAllWheelSorts    PreferredSortUsesGroups    Premium    Pay Mode-specific setting, allowing styles requiring two controllers (such as Double) to be played without requiring 2 credits.\nProductID    ProfileCourseEdits    ProfileDataCompress    ProfileStepEdits    ProgressiveLifebar    ProgressiveNonstopLifebar=    ProgressiveStageLifeba    PruneFonts    PseudoLocaliz    Python23IO_HDXB_DEV_ID    Python23IO_HDXB_PORT    Python23IO_Mode    Python23IO_P2IO_EXTIO    QuirksMode    RageSoundSampleCountClamp    RandomBackgroundMode    RateModsAffectFGChanges    RefreshRate    RegenComboAfterMiss    ReverseMouseButtons    SatelliteComPort    ScoreBroadcastURL    SextetStreamOutputFilename    ShowBanners    ShowBeginnerHelper    ShowCaution    Displays a caution screen before gameplay begins.\nShowDancingCharacters    ShowDanger    If the theme is aware, this can toggle visual effects used to signify low health.\nShowInstructions    If the theme is aware, this can toggle additional tutorial screens shown in-game.\nShowLoadingWindow    Toggles the splash screen.\nShowLogOutput    On Windows, this will open a cmd.exe window to display log output when the game is running.\nShowLyrics    Shows lyrics from a .crs file in-game in present.\nShowMasks    ShowMouseCursor    Determines whether the OS mouse cursor will disappear if hovered over the game window.\nShowNativeLanguage    Toggles whether song titles are displayed in their native language (1), or in a transliterated or translated form as determined in their metadata (0)\nShowSongOptions    Toggles whether the game will ask players if they wish to view the Song Options menu when exiting the player options menu, whether the screen will always be displayed, or if song options will not be accessible.\nShowStats    Shows an overlay in the top corner of the screen for information such as frame rate and memory usage.\nShowThemeErrors    If enabled, Lua errors will be displayed in an overlay at the top of the screen.\nSignProfileData    SmoothLines    SongBackgrounds    SongBroadcastURL    SongMinTNSToHideNotes    SongNoteskins    SongsPerPlay    Number of songs per-session (excluding extra stages) if EventMode is disabled.\nSoundDevice    SoundDrivers    SoundPreferredSampleRate    SoundPreload16bit    SoundPreloadMaxSamples    SoundVolume    System sound volume\nSoundVolumeAttract    Volume used in arcade attract mode.\nSoundWriteAhead    StretchBackgrounds    SubSortByNumSteps    SuperMeterPercentChange**    TestInitialScreen    TextureColorDepth    Theme    ThreadedInput    ThreadedMovieDecode    ThreeKeyNavigation    TimeMeterSecondsChange*    TimingWindowAdd    TimingWindowJump    TimingWindowScale    TimingWindowSeconds*    These settings define the timing windows used in themes that do not use the Project OutFox LuaTiming system. These settings are provided for backwards compatibility purposes.\nTrilinearFiltering    TugMeterPercentChange*    These settings are used for the lifebar in battle mode.\nUpdateCheckEnable    UseEGLonLinux    UseOldJoystickMapping    Toggles between HIDAPI and XInput modes.\nUsePointsandBlending    Enable or disable the use of points between each section of an ActorMultiVertex and use blending modes into it.\nUseUnlockSystem    VideoRenderers    Determines the renderer used by Project OutFox.\nVisualDelaySeconds    Vsync    Enables vertical sync (Vsync)\nWindowed    Enables windowed mode.\n"},{"id":31,"href":"/dev/actors/ActorsLua-CommandList/","title":"Command List","parent":"Lua and Actors","content":"OutFox has actors and actors can have commands. Makes sense that there would be a lot of commands pre-defined by the game, so this is a list of what commands the game has, how and when they\u0026rsquo;re used and what parameters they give.\nCommands    InitCommand\nOnCommand\nOffCommand\nBeginCommand\nEndCommand\n SetAttackCommand    Called on the noteskin actor before drawing an Attack-type TapNote\nParameters:\nModifiers (string, The attack associated with the tap note.)\n UnsetAttackCommand    Called on the noteskin actor after drawing an Attack-type TapNote\n ScreenGainFocusCommand    Called when processing the SM_GainFocus Screen Message.\nOnly used in ScreenOptionsManageProfiles, ScreenOptionsManageEditSteps and ScreenOptionsManageCourses.\n ScreenLoseFocusCommand    Called when processing the SM_LoseFocus Screen Message.\nOnly used in ScreenOptionsManageProfiles, ScreenOptionsManageEditSteps and ScreenOptionsManageCourses.\n LoseLifeCommand    Called when losing a battery.\nPrefixed in metrics with \u0026ldquo;NumLivesP1\u0026rdquo; and \u0026ldquo;NumLivesP2\u0026rdquo;.\n GainLifeCommand    Called when gaining a battery.\nPrefixed in metrics with \u0026ldquo;NumLivesP1\u0026rdquo; and \u0026ldquo;NumLivesP2\u0026rdquo;.\n AfterSetCommand    Called on the TextBanner after having set the title, subtitle and artist fields. (Runs after calling SetFromSong or SetFromString)\n LoseFocusCommand    Called on BGAs when fading away, on ScreenDebugOverlay\u0026rsquo;s pages when switching away, on OptionRows when switching away from a row, and other places\n GainFocusCommand    Called on BGAs when fading in, on ScreenDebugOverlay\u0026rsquo;s pages when switching to them, on OptionRows when switching to a row, and other places\n FadeCommand    Called when setting the brightness overlay to the actual brightness (based on cover \u0026amp; BGBrightness)\nPrefixed in metrics with \u0026ldquo;BrightnessOverlay\u0026rdquo;.\n NextPageCommand    Called when switching to the next page in ScreenRanking.\n SwitchedPageCommand    Called when handling the SM_HidePage Screen Message in ScreenRanking.\n ReverseOnCommand    Called on a column\u0026rsquo;s Receptor when the column goes beyond 50% reverse\n ReverseOffCommand    Called on a column\u0026rsquo;s Receptor when the column goes below 50% reverse\n LiftCommand    Called on a column\u0026rsquo;s Receptor when the column stops being pressed.\n PressCommand    Called on a column\u0026rsquo;s Receptor when the column gets pressed.\n ProW1/ProW2/ProW3/ProW4/ProW5/W1/W2/W3/W4/W5/MissCommand    Called on a column\u0026rsquo;s Receptor and noteflash when a column gets the relevant judgment.\n ShowNoteUpcomingCommand    Called on a column\u0026rsquo;s Receptor when the column has notes approaching\n HideNoteUpcomingCommand    Called on a column\u0026rsquo;s Receptor when the column has no notes approaching\n EditCommand    Called on ScreenEdit\u0026rsquo;s overlay \u0026amp; underlay when entering the Edit state.\n RecordCommand    Called on ScreenEdit\u0026rsquo;s overlay \u0026amp; underlay when entering the Record state.\n RecordPausedCommand    Called on ScreenEdit\u0026rsquo;s overlay \u0026amp; underlay when entering the RecordPaused state.\n PlayingCommand    Called on ScreenEdit\u0026rsquo;s overlay \u0026amp; underlay when entering the Playing state.\n AnimationFinishedCommand    Called on a Sprite when looping an animation.\n HoldingOffCommand    Called on a noteflash when ending a hold.\n RollOffCommand    Called on a noteflash when ending a roll.\n HoldingOnCommand    Called on a noteflash when starting a hold.\n RollOnCommand    Called on a noteflash when starting a roll.\n ColumnJudgmentCommand    Called on a noteflash when a judgment happens. Also seen as a MessageCommand.\nParameters:\n TapNoteScore (TapNoteScore enum, The related judgment. nil for hold notes) HoldNoteScore (HoldNoteScore enum, The related judgment. nil for tap notes) Column (integer, The column the judgment happened on.) Color (string, The last color seen on the noteskin. ScreenNetSelectBase appears to modify this)   JudgmentCommand    (Not to be confused with the Judgment MessageCommand!)\nCalled on a noteflash when a judgment happens.\n BrightCommand    Called on a noteflash when the combo is higher than the bright threshold.\n DimCommand    Called on a noteflash when the combo is lower than the bright threshold.\n ToggledCommand    Called on the button text of ScreenDebugOverlay when the button is pressed.\nPrefixed in metrics with \u0026quot;ButtonText\u0026quot;\n DeSelCommand    Called when pressing menuup or menudown on ScreenNetEvaluation.\nPrefixed in metrics with \u0026quot;User\u0026quot;\n SelCommand    Called when pressing menuup or menudown on ScreenNetEvaluation.\nPrefixed in metrics with \u0026quot;User\u0026quot;\n Tier02OrBetterCommand    Called in ScreenNetEvaluation when a player got a grade of tier 2 or better.\nPrefixed in metrics with \u0026quot;User\u0026quot;\n ShowCommand    Called in ScreenGameplayLesson when showing a page, in OptionsList when something is selected, in DifficultyList, and on the ScreenSyncOverlay when showing help.\n HideCommand    Called in ScreenGameplayLesson when hiding a page, in OptionsList when something is deselected, in DifficultyList, and on the ScreenSyncOverlay when hiding help.\n StartTransitioningCommand    Called when starting a screen transition.\n GoToOptionsCommand    Called when going into the Song Options menu.\n AskFroGoToOptionsCommand    Called when asking if the player wants to go into the Song Options menu.\n DisabledCommand    Called when showing that an OptionRow or ScreenSelectMaster choice is disabled.\n RefreshCommand    Called on OptionRow when setting the ModIcon.\nParameters:\n GameCommand (GameCommand object, The related commands.) Text (string, The text that goes with the commands.)   LevelCommand    Called when setting the content of a PaneDisplay.\n ConnectedCommand    Called in ControllerStateDisplay.\n UnpluggedCommand    Called in ControllerStateDisplay.\n NeedsMultitapCommand    Called in ControllerStateDisplay.\n NoInputHandlerCommand    Called in ControllerStateDisplay.\n SetTwoRowsCommand    Called when setting an OptionsList underline to work with items in two rows.\nPrefixed in metrics with \u0026quot;Underline\u0026quot;.\n SetOneRowCommand    Called when setting an OptionsList underline to work with items in one row.\nPrefixed in metrics with \u0026quot;Underline\u0026quot;.\n PositionTwoRowsCommand    Called when setting an OptionsList cursor to work with items in two rows.\nPrefixed in metrics with \u0026quot;Cursor\u0026quot;.\n PositionOneRowCommand    Called when setting an OptionsList cursor to work with items in one row.\nPrefixed in metrics with \u0026quot;Cursor\u0026quot;.\n TweenOffCommand    Called when loading or closing an OptionRow, tweening off the debug text in ScreenGameplay, and in ScreenMapControllers.\n TransformCommand    Called on the Player\u0026rsquo;s Judgment \u0026amp; Combo during `Player::Init``\nPrefixed in metrics with \u0026quot;Judgment\u0026quot; and \u0026quot;Combo\u0026quot;\nParameters:\n Player (PlayerNumber enum, The PlayerNumber for the combo \u0026amp; judgment.) MultiPlayer (MultiPlayer enum, The MultiPlayer for the combo \u0026amp; judgment.) iEnabledPlayerIndex (integer, The enabled player index) iNumEnabledPlayers (integer, The number of total enabled players) bPlayerUsingBothSides (boolean, If the current style has one player on both \u0026ldquo;sides\u0026rdquo;, like Doubles) bReverse (boolean, Is the player on Reverse?) bCentered (boolean, Is the player on Centered?)   ResetCommand    Called when resetting an OptionRow or Player Judgment.\n TweenOffCommand    Called when opening an OptionRow, displaying the debug text in ScreenGameplay, and in ScreenMapControllers.\n TweenOutForwardCommand    Called when tweening out of an OptionsList.\nPrefixed in metrics with \u0026quot;OptionsList\u0026quot;\n TweenOutBackwardCommand    Called when tweening out of an OptionsList.\nPrefixed in metrics with \u0026quot;OptionsList\u0026quot;\n TweenInForwardCommand    Called when tweening into an OptionsList.\nPrefixed in metrics with \u0026quot;OptionsList\u0026quot;\n TweenInBackwardCommand    Called when tweening into an OptionsList.\nPrefixed in metrics with \u0026quot;OptionsList\u0026quot;\n EnabledCommand    Called when showing that a ScreenSelectMaster choice is enabled.\n SwitchToPage1Command / SwitchToPage2Command    Called when switching to a different page in ScreenSelectMaster.\nPrefixed in metrics with \u0026quot;IconChoice1/2/3/4\u0026quot;, \u0026quot;ExplanationPage1/2\u0026quot;, \u0026quot;MorePage1/2\u0026quot;\n LostSelectedLoseFocusCommand    Called when canceling a selection in ScreenSelectMaster.\n LostSelectedGainFocusCommand    Called when canceling a selection in ScreenSelectMaster.\n ChangeCommand    Called when changing a selection in ScreenSelectMaster, when updating a StepsDisplayList/DifficultyList or when updating ScreenOptions.\nPrefixed in metrics with \u0026quot;CursorP1\u0026quot; and \u0026quot;CursorP2\u0026quot;in the case of ScreenSelectMaster.\n MadeChoiceP1Command / MadeChoiceP2Command    Called when making a selection in ScreenSelectMaster.\n ChooseCommand    Called on the cursor when making a selection in ScreenSelectMaster.\n InitialSelectionCommand    Called when making a selection in ScreenSelectMaster during a two-step selection.\n OffFocusedCommand    Called when tweening off ScreenSelectMaster.\n OffUnfocusedCommand    Called when tweening off ScreenSelectMaster.\n BackCommand    Called when turning on a BG in ScreenPackages? Also when setting up the backside of the CDTitle.\nPrefixed in metrics with \u0026quot;PackagesBG\u0026quot;, \u0026quot;WebBG\u0026quot; and \u0026quot;CDTitle\u0026quot;\n AwayCommand    Called when turning off a BG in ScreenPackages?\nPrefixed in metrics with \u0026quot;PackagesBG\u0026quot; and \u0026quot;WebBG\u0026quot;\n HeldCommand    Called on a HoldJudgment when a hold or roll is completed.\nPrefixed in metrics with \u0026quot;HoldJudgment\u0026quot;\n LetGoCommand    Called on a HoldJudgment when a hold or roll is dropped.\nPrefixed in metrics with \u0026quot;HoldJudgment\u0026quot;\n MissedHoldCommand    Called on a HoldJudgment when a hold or roll is missed.\nPrefixed in metrics with \u0026quot;HoldJudgment\u0026quot;\n TwentyFiveMilestoneCommand    Called on Player when displaying a 25 combo milestone.\n FiftyMilestoneCommand    Called on Player when displaying a 50 combo milestone.\n HundredMilestoneCommand    Called on Player when displaying a 100 combo milestone.\n TwoHundredFiftyMilestoneCommand    Called on Player when displaying a 250 combo milestone.\n ThousandMilestoneCommand    Called on Player when displaying a 1000 combo milestone.\n ComboCommand    Called on the Player when updating the combo amount.\nParameters:\n Combo (integer, The current combo.) Misses (integer, The current number of misses.) FullComboW1 (boolean, The player currently has a full combo and the lowest TNS is W1.) FullComboW2 (boolean, The player currently has a full combo and the lowest TNS is W2.) FullComboW3 (boolean, The player currently has a full combo and the lowest TNS is W3.) FullComboW4 (boolean, The player currently has a full combo and the lowest TNS is W4.)   SortOnCommand    Called when tweening on the sorting screen in Music Wheels.\nPrefixed in metrics with \u0026quot;MusicWheel\u0026quot;, \u0026quot;MusicWheelItem\u0026quot; and \u0026quot;Highlight\u0026quot;\n SortOffCommand    Called when tweening off the sorting screen in Music Wheels.\nPrefixed in metrics with \u0026quot;MusicWheel\u0026quot;, \u0026quot;MusicWheelItem\u0026quot; and \u0026quot;Highlight\u0026quot;\n DieCommand    Called when a Player dies in Oni mode\nPrefixed in metrics with \u0026quot;OniGameOverP1\u0026quot; and \u0026quot;OniGameOverP2\u0026quot;\n SetCommand (ScreenGameplay)    Called when setting a Player\u0026rsquo;s StepsDisplay?\nPrefixed in c++ with \u0026quot;SetDummy%i\u0026quot;, \u0026quot;SetP1\u0026quot; and \u0026quot;SetP2\u0026quot;\n SetReverseCommand    Called on LyricsDisplay and StepsDisplay when Reverse is on.\nPrefixed in metrics with \u0026quot;LyricDisplay\u0026quot;, \u0026quot;StepsDisplayP1\u0026quot; and \u0026quot;StepsDisplayP2\u0026quot;\n SetNoReverseCommand    Called on LyricsDisplay and StepsDisplay when Reverse is off.\nPrefixed in metrics with \u0026quot;LyricDisplay\u0026quot;, \u0026quot;StepsDisplayP1\u0026quot; and \u0026quot;StepsDisplayP2\u0026quot;\n SetOneReverseCommand    Called on LyricsDisplay when Reverse is on at least one Player, but not all.\nPrefixed in metrics with \u0026quot;LyricDisplay\u0026quot;\n PauseCommand    Called on ScreenGameplay when pausing the game.\n UnpauseCommand    Called on ScreenGameplay when unpausing the game.\n StartOnCommand    Called on ScreenGameplay\u0026rsquo;s debug text when start is held\nPrefixed in metrics with \u0026quot;Debug\u0026quot;\n BackOnCommand    Called on ScreenGameplay\u0026rsquo;s debug text when the back button is held\nPrefixed in metrics with \u0026quot;Debug\u0026quot;\n StartCommand    Called on ScreenGameplay\u0026rsquo;s next course song item when starting to load the next song.\n FinishCommand    Called on ScreenGameplay\u0026rsquo;s next course song item when switching to the next song.\n FadeFromCachedCommand    Called on FadingBanner when loading from a cached image to the actual image.\nPrefixed in metrics with \u0026quot;Banner\u0026quot;\n FadeOffCommand    Called on FadingBanner when loading from nothing to the actual image.\nPrefixed in metrics with \u0026quot;Banner\u0026quot;\n ResetFadeCommand    Called on FadingBanner after performing the fade.\nPrefixed in metrics with \u0026quot;Banner\u0026quot;\n RouletteCommand    Called on FadingBanner when fading to the roulette banner.\nPrefixed in metrics with \u0026quot;Banner\u0026quot;\n RandomCommand    Called on FadingBanner when fading to the random banner.\nPrefixed in metrics with \u0026quot;Banner\u0026quot;\n \u0026lt;custom\u0026gt;Command    Called on FadingBanner when fading to a custom banner.\nPrefixed in metrics with \u0026quot;Banner\u0026quot;\n SpecialKey    Called on ScreenTextEntry\u0026rsquo;s cursor when on a special key.\n RegularKey    Called on ScreenTextEntry\u0026rsquo;s cursor when on a regular key.\n NeverShow    Called on ScreenMapControllers' warning actor if it exists.\n MappedInputCommand    Called in ScreenMapControllers after having mapped a key.\nPrefixed in metrics with \u0026quot;MappedTo\u0026quot;?\n LoseMarkCommand    Called in ScreenMapControllers when removing an element from the set list.\nPrefixed in metrics with \u0026quot;MappedTo\u0026quot;?\n GainMarkCommand    Called in ScreenMapControllers when adding an element to the set list.\nPrefixed in metrics with \u0026quot;MappedTo\u0026quot;?\n WaitingCommand    Called in ScreenMapControllers when waiting for the player to set a key after hitting enter.\nPrefixed in metrics with \u0026quot;MappedTo\u0026quot;?\n SetTextCommand    Called when sanity checking the input from ScreenMapControllers.\nParameters:\n Text (string, The reasons a sanity check failed.)   FirstUpdateCommand    Called when ScreenWithMenuElements begins the screen.\n SetHelptextCommand    Called when ScreenWithMenuElements updates the HelpText.\nParameters:\n Text (string, The help text.)   CancelCommand    Called when canceling out of a ScreenWithMenuElements menu.\nPrefixed in metrics with \u0026quot;Out\u0026quot;, \u0026quot;Cancel\u0026quot;\n ChangeCommand    Called when ScreenWithMenuElements begins the screen.\n FrontCommand    Called when setting up the frontside of the CDTitle.\nPrefixed in metrics with \u0026quot;CDTitle\u0026quot;\n ModsCommand    Called during ScreenSelectMusic\u0026rsquo;s BeginScreen.\n ShowEnteringOptionsCommand    Called when entering the PlayerOptions menu after selecting a song.\n HidePressStartForOptionsCommand    Called when hiding the prompt to enter the Player Options menu.\n SortChangeCommand    Called when changing the sort order of ScreenSelectMusic\n ShowPressStartForOptionsCommand    Called when showing the prompt to enter the Player Options menu.\n ChangeToExitCommand    Called when moving the highlight line to the exit button.\nPrefixed in metrics with \u0026quot;LineHighlight\u0026quot;, \u0026quot;LineHighlightP1\u0026quot; and \u0026quot;LineHighlightP2\u0026quot;\n SelectedCommand    Called when changing a value in ScreenOptions?\n UnselectedCommand    Called when changing a value in ScreenOptions?\n ``ChangedCommand`    Called when changing the group \u0026amp; song banner in ScreenEdit as well as when updating the LyricDisplay.\nPrefixed in metrics for LyricDisplay with \u0026quot;LyricFront\u0026quot; and \u0026quot;LyricBack\u0026quot;\n PlayerStateSetCommand    Called when running NoteField::Init(), can be seen in 5.0.12\u0026rsquo;s default theme with NoteField board.\nParameters:\n PlayerNumber (PlayerNumber enum, The player number for the notefield\u0026rsquo;s PlayerState.)   LoadCommand (StepsDisplay)    Called when running StepsDisplay::Load.\nPrefixed in metrics with \u0026quot;Frame\u0026quot; and maybe others?\nParameters:\n PlayerState (PlayerState object, The PlayerState for the given StepsDisplay.)   SetCommand (StepsDisplay)    Called when running StepsDisplay::SetInternal.\nPrefixed in metrics with \u0026quot;Frame\u0026quot;, \u0026quot;Ticks\u0026quot;, \u0026quot;Meter\u0026quot;, \u0026quot;Description\u0026quot;, \u0026quot;Credit\u0026quot;, \u0026quot;Autogen\u0026quot; and \u0026quot;StepsType\u0026quot;\nParameters:\n CustomDifficulty (string, Representation of the difficulty.) DisplayDescription (string, The chart\u0026rsquo;s related description.) Steps (Steps object, The steps of the chart. nil if not available.) Trail (Trail object, The trail for the course. nil if not available.) Meter (integer, The chart meter value.) StepsType (StepsType enum, The type of chart being shown.)   AnalogInputCommand    Called on TopScreen from InputHandler when doing analog input. As seen in ScreenTestLuaAnalog\nParameters:\n Device (integer, The device ID(?) recorded from the input.) Button (string, The button recorded from the input.) Value` (float, The level recorded from the input.)   PostSwitchPageCommand    Called on ScreenSelectMaster after switching the page? Also has a MessageCommand variant?\nParameters:\n NewPageIndex (integer, The page to switch to.)   PreSwitchPageCommand    Called on ScreenSelectMaster before switching the page? Also has a MessageCommand variant?\nParameters:\n OldPageIndex (integer, The page to switch from.) NewPageIndex (integer, The page to switch to.)   SetCommand (MusicWheelItem)    Called on MusicWheelItem when loading from WheelItemData or when handling a change message.\nParameters:\n Song (Song object, The song for the wheel item.) Course (Course object, The course for the wheel item.) Index (integer, The index of the wheel item. nil if done through a change message) HasFocus (boolean, Is the wheel item focused? nil if done through a change message) Text (string, The text of the wheel item?) DrawIndex (integer, The draw index of the wheel item. nil if done through a change message) Type (string, The MusicWheelItemType.) Color (RageColor?, The color associated with the wheel item.) Label (string, The label for the wheel item.)   SetGradeCommand    Called on MusicWheelItem when refreshing grades.\nParameters:\n PlayerNumber (PlayerNumber enum, The player who has the grade) Grade (Grade enum, The highest grade gotten. nil if there\u0026rsquo;s no HighScoreList.) NumTimesPlayed (integer, How many times the song or course was played. nil if there\u0026rsquo;s no HighScoreList.)   MenuTimerExpired    Called on ScreenNameEntryTraditional when the menu timer hits zero. Also seen as a MessageCommand.\n PlayerFinishedCommand    Called on ScreenNameEntryTraditional when a player finishes entering their name. Also seen as a MessageCommand.\nParameters:\n PlayerNumber (PlayerNumber enum, The player that finished.)   EntryChangedCommand    Called on ScreenNameEntryTraditional when a player updates their selection text.\nParameters:\n PlayerNumber (PlayerNumber enum, The player that updated their selection text.) Text (string, The current text. Has a _ at the end if more characters can be entered.)   SelectKeyCommand    Called on ScreenNameEntryTraditional when a player changes which key is being selected.\nParameters:\n PlayerNumber (PlayerNumber enum, The player that changed the key.) Key (string, The currently selected key)   SetSongCommand    Called on CourseContentsList when setting the item from GameState.\nParameters:\n PlayerNumber (PlayerNumber enum, The player who selected the course) Song (Song object, The song for this part of the course) Steps (Steps object, The Steps of the song.) Difficulty (Difficulty enum, The Difficulty of the course) Meter (integer, The difficulty meter) Number (integer, The position in the course) Modifiers (string, The modifiers to apply for the song) Secret (boolean, Is the song considered a secret?)   HurryTimerCommand    Called on ScreenContinue when hurrying up the timer.\nParameters:\n PlayerNumber (PlayerNumber enum, The player hurrying up the timer.)   LoadCommand (ScoreDisplayNormal)    Called when running ScoreDisplayNormal::Init\nParameters:\n PlayerState (PlayerState object, The associated PlayerState.) PlayerStageStats (PlayerStageStats object, The associated PlayerStageStats.)   SetStatusCommand    Called when updating ScreenSyncOverlay.\nParameters:\n Text (string, The status text.)   SetAdjustmentsCommand    Called when updating ScreenSyncOverlay.\nParameters:\n Text (string, The adjustment text.)   SetCommand (ScreenHighScores)    Called when configuring the ScoreScroller.\nParameters:\n Song (Song object, The song with the high score. nil if it\u0026rsquo;s a course high score.) Course (Course object, The course with the high score. nil if it\u0026rsquo;s a song high score.) Entries (lua table, Steps data. Iterate with pairs and not ipairs.)   ScrolledCommand    Called when scrolling ScreenHighScores.\nParameters:\n Direction (integer, the direction.)   Messages (Suffix with MessageCommand)    RouletteStoppedMessageCommand    Called when the music wheel is slowing down during roulette.\n StartRouletteMessageCommand    Called when the music wheel is starting the roulette\n StartRandomMessageCommand    Called when the music wheel chosing a random song from the Random item.\n CoinInsertedMessageCommand    Called when insering a coin and clearing credits.\nThemes can use this command to update other actors about coin information (Does not send any data).\n ToggleConsoleDisplayMessageCommand    Called when pressing the pause key on the keyboard. Its' use in fallback is commented out and the keybind conflicts with the mute actions keybind.\n LifeChangedMessageCommand    Called when updating the LifeMeter. Different LifeMeter types give different parameters.\nParameters:\n Player (PlayerNumber enum, The Player who\u0026rsquo;s having life differences.) LifeMeter (LifeMeter object, The LifeMeter for that player.) LivesLeft (integer, number of batteries left. nil if not using LifeMeterBattery.) LostLife (boolean, Did the player lose a life? nil if not using LifeMeterBattery.) TapNoteScore (TapNoteScore enum LuaReference, the TapNoteScore the player got. nil if not using LifeMeterTime.) HoldNoteScore (HoldNoteScore enum LuaReference, the HoldNoteScore the player got. nil if not using LifeMeterTime.) OldLife (float, the previous amount of time nil if not using LifeMeterTime.) Difference (float, the difference between the old amount of life and current amount. nil if not using LifeMeterTime.)   ShowDangerAllMessageCommand    Called in Background when all players are in danger of failing.\n HideDangerAllMessageCommand    Called in background when all players are not in danger of failing (or if they\u0026rsquo;re all dead).\n ScreenChangedMessageCommand    Called when running ScreenManager::LoadDelayedScreen\nPrefixed in metrics with \u0026quot;CreditsP1\u0026quot; and \u0026quot;CreditsP2\u0026quot; when dealing with the credits text.\n SystemMessageMessageCommand    Called when creating a SystemMessage\nParameters:\n Message (string, The message itself.) NoAnimate (boolean, Do we do an animated SystemMessage?)   HideSystemMessageMessageCommand    Called when hiding the SystemMessage. Seemingly unused?\n RefreshCreditTextMessageCommand    Called when refreshing the credits text.\nPrefixed in metrics with \u0026quot;CreditsP1\u0026quot; and \u0026quot;CreditsP2\u0026quot;.\n AutosyncChangedMessageCommand    Called when changing the Autosync type from ScreenDebugOverlay.\n ToggleScriptErrorMessageCommand    Called when toggling the error display from ScreenDebugOverlay.\n ClearScriptErrorMessageCommand    Called when clearing the current lua errors from ScreenDebugOverlay.\n UpdateNetEvalStatsMessageCommand    Called when updating the evaluation stats during net play.\nParameters:\n ActivePlayerIndex (integer, The current active player.) Difficulty (Difficulty enum, The song\u0026rsquo;s difficulty.) Score (integer, The player\u0026rsquo;s score.) Grade (integer, The player\u0026rsquo;s grade.) PlayerOptions (string, The player\u0026rsquo;s playeroptions.) Steps (Steps object, The song\u0026rsquo;s steps. nil if they don\u0026rsquo;t exist.)   ScoreChangedMessageCommand    Called when loading ScoreKeeperNormal and handling score.\nParameters:\n PlayerNumber (PlayerNumber enum, The PlayerNumber associated with the score.) MultiPlayer (MultiPlayer enum, The MultiPlayer associated with the score.) ToastyCombo (integer, The current combo as the toasty sees it. nil if not coming from ScoreKeeperNormal::HandleTapRowScore)   CurrentComboChangedP1MessageCommand / CurrentComboChangedP2MessageCommand    Called when dealing with combo in ScoreKeeperNormal.\n ToastyAchievedMessageCommand    Called when a player gets the toasty.\nParameters:\n PlayerNumber (PlayerNumber enum, The PlayerNumber associated with the toasty.) ToastyCombo (integer, The current combo as the toasty sees it. nil if not coming from ScoreKeeperNormal::HandleTapRowScore) Level (integer, How many times has the player gotten a toasty?)   ToastyDroppedMessageCommand    Called when a player drops the toasty.\nParameters:\n PlayerNumber (PlayerNumber enum, The PlayerNumber associated with the dropped toasty.)   AutoJoyMappingAppliedMessageCommand    Called when automapping a joystick.\n CrossedBeatMessageCommand    Called every time a beat is crossed?\nParameters:\n Beat (integer, The beat that was just crossed?)   LessonClearedMessageCommand    Called when clearing a lesson?\n LessonFailedMessageCommand    Called when failing a lesson?\n LessonTry1MessageCommand / LessonTry2MessageCommand    Called when attempting a lesson?\n StorageDevicesChangedMessageCommand    Called when updating the MemoryCardManager.\n CardRemovedP1MessageCommand / CardRemovedP2MessageCommand    Called when a memory card is removed?\n SongModifiedMessageCommand    Called when saving sync changes while in EditMode.\n OptionsListOpenedMessageCommand    Called every time an OptionsList is opened.\nParameters:\n Player (PlayerNumber enum, The player that opened the OptionsList.)   OptionsListClosedMessageCommand    Called every time an OptionsList is closed.\nParameters:\n Player (PlayerNumber enum, The player that closed the OptionsList.)   OptionsListQuickChangeMessageCommand    Called every time an OptionsList selection changes. Used when Start is used as down, and the button is left or right.\nParameters:\n Player (PlayerNumber enum, The player that changed the OptionsList.) Direction (integer, The direction to move.) Selection (integer, The item being selected.)   OptionsListLeftMessageCommand / OptionsListRightMessageCommand    Called every time an player moves on the OptionsList.\nParameters:\n Player (PlayerNumber enum, The player that moved through the OptionsList.) Selection (integer, The item being selected.)   OptionsMenuChangedMessageCommand    Called when switching to a different row.\nParameters:\n Player (PlayerNumber enum, The player that changed to the row.) Menu (string, The menu being switched to?)   OptionsListPopMessageCommand    Called when popping off an OptionsList.\nParameters:\n Player (PlayerNumber enum, The player that popped off the list.)   OptionsListResetMessageCommand    Called when resetting an OptionsList.\nParameters:\n Player (PlayerNumber enum, The player that reset the list.)   OptionsListPushMessageCommand    Called when pushing an OptionsList.\nParameters:\n Player (PlayerNumber enum, The player that pushed the list.)   OptionsListStartMessageCommand    Called when pushing the start button in an OptionsList.\nParameters:\n Player (PlayerNumber enum, The player that pushed the start button.) Selection (integer, The item being selected.)   DownloadFinishedMessageCommand    Called when a download finishes in ScreenInstallOverlay.\n MenuLeftP1MessageCommand / MenuLeftP2MessageCommand / MenuDownP1MessageCommand / MenuDownP2MessageCommand / MenuUpP1MessageCommand / MenuUpP2MessageCommand / MenuRightP1MessageCommand / MenuRightP2MessageCommand    Called when moving around ScreenSelectMaster, ScreenOptions or ScreenSelectProfile.\n MenuSelectionChangedMessageCommand    Called when updating a menu selection on ScreenSelectMaster or ScreenOptions.\n MenuStartP1MessageCommand / MenuStartP2MessageCommand    Called when pushing the start button ScreenSelectMaster or ScreenOptions.\nParameters:\n ScreenEmpty (boolean, Is the screen empty?) (Is this the screen we\u0026rsquo;re about to go to?)   CurrentCourseChangedMessageCommand    Called when changing the course, shuffling the Workout or shuffling the course.\n ComboChangedMessageCommand    Called when updating the player\u0026rsquo;s Combo.\nParameters:\n Player (PlayerNumber enum, The player whose combo is getting updated.) OldCombo (integer, the old combo) OldMissCombo (integer, the old miss combo) PlayerState (PlayerState object LuaReference, the Player\u0026rsquo;s PlayerState. nil if it doesn\u0026rsquo;t exist.) PlayerStageStats (PlayerStageStats object LuaReference, the Player\u0026rsquo;s PlayerStageStats. nil if it doesn\u0026rsquo;t exist.)   ScoreNoneMessageCommand    Called when processing a TapNoteScore_None in Player.\n StepMessageCommand    Called when any player steps.\nParameters:\n PlayerNumber (PlayerNumber enum, the player that did the step.) MultiPlayer (MultiPlayer enum, The MultiPlayer that did the step.) Column (integer, the column getting stepped. 0-indexed?)   StepP1MessageCommand / StepP2MessageCommand    Called when any player steps. For backwards compatbility with older content.\n JudgmentMessageCommand    (Not to be confused with JudgmentCommand!)\nCalled when any player gets a judgment.\nParameters:\n Player (PlayerNumber enum, the player that did the step.) MultiPlayer (MultiPlayer enum, The MultiPlayer that did the step.) FirstTrack (integer, The first column to hit the note.) NumTracks (integer, Number of columns with a hold? Only seen with Hold judgments.) TapNoteScore (TapNoteScore enum, the tap note score that was gotten.) HoldNoteScore (HoldNoteScore enum, the hold note score that was gotten.) Early (boolean, Was the hit early? Only seen with non-Hold judgments.) TapNoteOffset (float, How far away was the hit in seconds?) Holds (lua table, indexable by column number for everything that has a hold running. Only seen with non-Hold judgments.) Notes (lua table of TapNotes, indexable by column number for everything that has a note hit at once. Only seen with non-Hold judgments.) TapNote (TapNote object?, The TapNote for the hold. Only seen with Hold Judgments.)   JudgmentMessageCommand (Mines)    (Not to be confused with JudgmentCommand!)\nCalled when any player gets a judgment relating to a mine.\nParameters:\n Player (PlayerNumber enum, the player that did the step.) TapNoteScore (TapNoteScore enum, the tap note score that was gotten.) FirstTrack (integer, The first column to hit the mine.)   JudgmentWindowMessageCommand    Called when making use of luajudgments.\nParameters:\n Type (string, The thing being judged.) Window (float, How far away the note was when it was hit.) score (TapNoteScore enum, Set from lua, determines the score a player should get.) timing (float, Set from lua, determines the timing window a player should use.)   \u0026lt;DeviceInput\u0026gt;PressedMessageCommand / \u0026lt;DeviceInput\u0026gt;ReleasedMessageCommand    Called from ScreenTestInput when recieving input. \u0026lt;DeviceInput\u0026gt; is replaced with a ToString\u0026rsquo;d input name.\n UpdateScreenheaderMessageCommand    Called when updating a NetRoom\u0026rsquo;s room title.\nParameters:\n Header (string, The header text.) Subheader (string, The subheader text.)   DoneLoadingNextSongMessageCommand    Called when ScreenGameplay finishes loading the next song in a course. Seems unused?\n HealthStateMessageCommand    Called when a player\u0026rsquo;s HealthState changes.\nParameters:\n PlayerNumber (PlayerNumber enum, the player that\u0026rsquo;s having their health state change.) HealthState (HealthState enum, The current health state.) OldHealthState (HealthState enum, The previous health state.)   PlayerFailedMessageCommand    Called when a player fails.\nParameters:\n PlayerNumber (PlayerNumber enum, the player that failed.)   BeatCrossedMessageCommand    Called every time a beat is crossed in ScreenGameplay. Seems unused?\n NoteCrossedMessageCommand / NoteWillCrossMessageCommand    Called when a player\u0026rsquo;s note will cross or has crossed.\nParameters:\n PlayerNumber (PlayerNumber enum, the player whose note is gonna cross. nil if both players have the same style.) ButtonName (string, The column\u0026rsquo;s button.) NumTracks (integer, The number of tracks with a tap or hold head.) IsMine (boolean, Is the note a mine?) NumMessagesFromCrossed (integer, How many messages is the note away from crossing? 0 = crossed.)   NoteWillCrossIn400Ms / NoteWillCrossIn800Ms / NoteWillCrossIn1200Ms    Called when a note is going to cross. Refer to message names for distance?\n NoteCrossedJumpMessageCommand    Called when a jump crosses.\n BeforeLoadingNextCourseSongMessageCommand    Called before playing the next song transition in a course.\n ChangeCourseSongInMessageCommand    Called after playing the next song transition in a course.\n ChangeCourseSongOutMessageCommand    Called when loading the next song in a course.\n \u0026lt;PreferenceName\u0026gt;ChangedMessageCommand    Called when a preference changes. \u0026lt;PreferenceName\u0026gt; is replaced with the actual preference name.\n PlayerJoinedMessageCommand    Called when a player joins.\nParameters:\n Player (PlayerNumber enum, the player that joined.)   PlayerUnjoinedMessageCommand    Called when a player leaves.\nParameters:\n Player (PlayerNumber enum, the player that left.)   GoalCompleteP1MessageCommand / GoalCompleteP2MessageCommand    Called when a player completes a workout goal?\n WorkoutGoalCompleteMessageCommand    Called when a player completes a workout goal during a course.\n ScriptErrorMessageCommand    Called when a lua script errors or reports an error.\nParameters:\n message (string, The error message.)   DisplayLanguageChangedMessageCommand    Called when switching between transliterated and native language on the music wheel (Press F9).\n StepsUnchosenMessageCommand    Called when a player unselects steps.\nParameters:\n Player (PlayerNumber enum, The player that backed out.)   SelectMenuInputMessageCommand    Called in ScreenSelectMusic. Not sure when.\nParameters:\n Player (PlayerNumber enum, The player that caused this.) Button (string, The button that was pressed)   PreviousSongMessageCommand    Called when moving to the previous song in ScreenSelectMusic.\n NextSongMessageCommand    Called when moving to the next song in ScreenSelectMusic.\n PreviousGroupMessageCommand    Called when moving to the previous group in ScreenSelectMusic.\nNextGroupMessageCommand    Called when moving to the next group in ScreenSelectMusic.\nTwoPartConfirmCanceledMessageCommand    Called when canceling out of a Two-Part confirm.\n SongUnchosenMessageCommand    Called when a player unselects a song.\nParameters:\n Player (PlayerNumber enum, The player that backed out.)   PlayerOptionsChangedMessageCommand    Called when a player changes their PlayerOptions through CodeDetector (ScreenSelectMusic).\nParameters:\n PlayerNumber (PlayerNumber enum, The player that performed the code.)   SongOptionsChangedMessageCommand    Called when a player changes the SongOptions through CodeDetector (ScreenSelectMusic).\n SelectMenuOpenedMessageCommand / SelectMenuClosedMessageCommand    Called when updating the select button status on ScreenSelectMusic.\nParameters:\n Player (PlayerNumber enum, The player that pushed select.)   ChangeStepsMessageCommand    Called when changing the current steps.\nParameters:\n Player (PlayerNumber enum, The player that changed the steps.) Direction (integer, The direction the player went.)   SongChosenMessageCommand    Called when choosing the steps like in pump pro.\n StepsChosenMessageCommand    Called when choosing the steps.\nParameters:\n Player (PlayerNumber enum, The player that chose the steps.)   StartSelectingSongMessageCommand / StartSelectingStepsMessageCommand / StartFinalizedMessageCommand    Called at some point in ScreenSelectMusic?\n SelectMultipleMessageCommand    Called when changing the rows in ScreenOptions.\nParameters:\n PlayerNumber (PlayerNumber enum, The player that is changing things.) RowIndex (integer, The current row.) ChoiceInRow (integer, The current selection in the row.) Selected (boolean, Is the current item selected?)   ChangeValueMessageCommand    Called when changing the value in ScreenOptions.\nParameters:\n PlayerNumber (PlayerNumber enum, The player that is changing things.) RowIndex (integer, The current row.)   ChangeRowMessageCommand    Called when changing the rows in ScreenOptions in an absolute amount.\nParameters:\n PlayerNumber (PlayerNumber enum, The player that is changing things.) RowIndex (integer, The current row.) ChangedToExit (boolean, Is the current row an exit?)   LifeMeterChangedP1MessageCommand / LifeMeterChangedP2MessageCommand    Called when setting the life meter state for a given point of time.\nParameters:\n Life (float, The current amount of life.) StepsSecond (float, The point of time in the song/course)   FriendsUpdateMessageCommand    Called when updating the friends list?\n UsersUpdateMessageCommand    Called when updating the users list?\n CurrentGameChangedMessageCommand    Called when the current game changes? Seems unused?\n PlayModeChangedMessageCommand    Called when the play mode changes? Seems unused?\n CoinsChangedMessageCommand    Called when the amount of coins changes? Seems unused?\n PreferredSongGroupChangedMessageCommand    Called when the preferred song group changes? Seems unused?\n PreferredCourseGroupChangedMessageCommand    Called when the preferred course group changes? Seems unused?\n PreferredStepsTypeChangedMessageCommand    Called when the preferred steps type changes? Seems unused?\n PreferredDifficultyP1ChangedMessageCommand / PreferredDifficultyP2ChangedMessageCommand    Called when the preferred difficulty changes? Seems unused?\n PreferredCourseDifficultyP1ChangedMessageCommand / PreferredCourseDifficultyP2ChangedMessageCommand    Called when the preferred course difficulty changes? Seems unused?\n SortOrderChangedMessageCommand    Called when the sort order changes?\n CurrentSongChangedMessageCommand    Called when the current song changes?\n CurrentStepsP1ChangedMessageCommand / CurrentStepsP2ChangedMessageCommand    Called when the current steps change?\n CurrentCourseChangedMessageCommand    Called when the current course changes?\n CurrentTrailP1ChangedMessageCommand / CurrentTrailP2ChangedMessageCommand    Called when the current trail changes?\n GameplayLeadInChangedMessageCommand    Called when changing the Gameplay lead-in?\n EditStepsTypeChangedMessageCommand    Called when the edit steps type changes? Seems unused?\n EditCourseDifficultyChangedMessageCommand    Called when the edit course difficulty changes? Seems unused?\n EditSourceStepsChangedMessageCommand    Called when the edit source steps changes? Seems unused?\n EditSourceStepsTypeChangedMessageCommand    Called when the edit source steps type changes? Seems unused?\n EditCourseEntryIndexChangedMessageCommand    Called when the edit course entry index changes? Seems unused?\n EditLocalProfileIDChangedMessageCommand    Called when the edit local profile ID changes? Seems unused?\n CurrentStyleChangedMessageCommand    Called when the current style changes? Seems unused?\n"},{"id":32,"href":"/dev/mods/Mods-13-Miscelaneous-Mods/","title":"Miscelaneous modifiers","parent":"Guide to Modifiers","content":"Miscelaneous Modifiers    These modifiers don\u0026rsquo;t really fit into any of the above categories, so they\u0026rsquo;re here instead.\n\u0026ldquo;clearall\u0026rdquo;    Desc: Tells PlayerOptions to do a reset. Often used in modfiles to mimic crs-style resetting. Only available in modstring form right now.\nQuirks: N/A\nModstring format: clearall\nHoldGrainMult    Desc: Adds a multiplier to the \u0026lsquo;step size\u0026rsquo; of holds, allowing one to control how \u0026lsquo;granular\u0026rsquo; a hold is. In NotITG, this is known as \u0026ldquo;granulate\u0026rdquo; or \u0026ldquo;grain\u0026rdquo; (alias).\nNegative values make the hold smoother (with a \u0026lsquo;limit\u0026rsquo; of -93.75% which results in a step size of 1 pixel), but could cost performance due to the extra calculations being done. Positive values make the hold look more polygonal (with no real limit). Very noticable on modifiers that work on position, like Drunk.\nCommon values can range from practically anywhere due to it being a multiplier. Try starting with -50% or 100% and go further if extra points or less points are desired.\nQuirks: In NotITG, this modifier works a bit differently. At 0%, the holds are drawn with the normal stepsize, but the magnitude when nonzero controls the step size in pixels (100% = step size of 1 pixel, 400% = step size of 4 pixels (normal in NotITG)). This means NotITG can have step sizes below 1 pixel.\nPlayerOptions format: HoldGrainMult(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: HoldGrainMult(4, 2)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; holdgrainmult\nExample: *2 400% holdgrainmult\nHoldGrainMult video example\nExtendHolds    Desc: Adds a multiplier to the visual length of holds. In NotITG, this is known as \u0026ldquo;longholds\u0026rdquo;, \u0026ldquo;longboy\u0026rdquo; (alias) or \u0026ldquo;longboys\u0026rdquo; (alias).\nCommon values range from -100% to 300%\nQuirks: N/A\nPlayerOptions format: ExtendHolds(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: ExtendHolds(0.5, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; extendholds\nExample: *1 50% extendholds\nExtendHolds video example\nStraightHolds    Desc: Makes holds react less to mods, similar to what holds do in \u0026ldquo;Pump It Up\u0026rdquo;. NotITG has an alias called \u0026ldquo;gayholds\u0026rdquo;, which applies negative straightholds (so 100% gayholds = -100% straightholds). There is also a column-specific variant.\nCommon values range from -100 to 200%\nQuirks: N/A\nAvailable variants (modstring): straightholds, gayholds (NotITG negative alias), straightholds\u0026lt;column\u0026gt;, gayholds\u0026lt;column\u0026gt; (NotITG negative alias for straightholds\u0026lt;column\u0026gt;)\nPlayerOptions format: StraightHolds(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: StraightHolds(1, 0.2)\nColumn-specific format: StraightHoldsCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: StraightHoldsCol(3, 2, 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.2 100% straightholds *0.5 200% straightholds3\nStraightHolds video example\nNotePath    Desc: Draws a line that shows the path a note takes to the receptor and beyond, which means it depends on all position mods that are in the game. Known as \u0026ldquo;arrowpath\u0026rdquo; in NotITG. Effectively a \u0026lsquo;hold\u0026rsquo; that lasts the whole notefield, so it could hurt performance depending on what mods are being used. Has a column-specific variant available which is additive like Stealth \u0026amp; Dark.\nCommon values range from -100 to 100% due to the additive nature.\nQuirks: N/A\nAvailable variants (modstring): notepath, notepath\u0026lt;column\u0026gt;, arrowpath (NotITG name), arrowpath\u0026lt;column\u0026gt; (NotITG name)\nPlayerOptions format: NotePath(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: NotePath(1, 0.4)\nColumn-specific format: NotePathCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: NotePathCol(4, 1, 0.4)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.4 100% notepath *0.4 100% notepath4\nNotePath video example\nAvailable sub modifiers:    NotePathBlendMode    Desc: Set the blend mode used for the NotePath. This does not have a modstring form, and in NotITG, is only available in Player.\nPlayerOptions format: NotePathBlendMode(\u0026lt;blend mode\u0026gt;)\nNotITG Player format: SetArrowPathBlendMode(\u0026lt;blend mode\u0026gt;)\nNotePathDrawMode    Desc: Set the secondary draw mode used for the NotePath. It allows for different \u0026lsquo;looks\u0026rsquo; for the notepath. For example, \u0026ldquo;DrawMode_Fan\u0026rdquo; creates a veil-type visual with 50% NotePath, while \u0026ldquo;DrawMode_Lines\u0026rdquo; creates a dotted line.\nThis does not have a modstring form and does not reset with a clearall.\nPlayerOptions format: NotePathDrawMode(\u0026lt;draw mode\u0026gt;)\nNotePathGrainMult    Desc: Allows for adjusting the step size like what HoldGrainMult does for holds. The same notes from there apply here.\nAvailable variants (modstring): notepathgrainmult, arrowpathgranulate (NotITG name), arrowpathgrain (NotITG alias)\nPlayerOptions format: NotePathGrainMult(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nNotePathWidth    Desc: Allows for adjusting how wide the notepath is. It\u0026rsquo;s added onto the default, which is one pixel in theme-space.\nAt the moment, there is a GPU-enforced limit on the actual width. In NotITG, this can be worked around by turning off smoothlines (Which uses CPU-based quads, also has a side-effect of showing depth in the lines)\nAvailable variants (modstring): notepathwidth, arrowpathsize (NotITG name), arrowpathgirth (NotITG alias), arrowpathwidth (NotITG alias)\nPlayerOptions format: NotePathWidth(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nNotePathDrawSize    Desc: Where DrawSize affects the notefield\u0026rsquo;s rendering space, this affects the rendering space of NotePath. This is unaffected by normal DrawSize, but the rendering space starts out the same as a whole notefield.\nAvailable variants: NotePathDrawSize (Affects area below the receptors), NotePathDrawSizeBack (Affects area above the receptors)\nAvailable variants (modstring): notepathdrawsize, notepathdrawsizeback, arrowpathdrawsize (NotITG name for notepathdrawsize), arrowpathdrawsizefront (NotITG alias for notepathdrawsize), arrowpathdrawdistance (NotITG alias for notepathdrawsize), arrowpathdrawdistancefront (NotITG alias for notepathdrawsize), arrowpathdrawsizeback (NotITG name for notepathdrawsizeback), arrowpathdrawdistanceback (NotITG alias for notepathdrawsizeback)\nPlayerOptions format: \u0026lt;NotePathDrawSize variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nModTimer    Desc: Allows one to set the timer used by many modifiers.\nThese are the following types (denoted as \u0026lt;type\u0026gt;):\n \u0026lsquo;ModTimerType_Default\u0026rsquo; just go with the game\u0026rsquo;s default timer type (5.2 defaults to song, 5.1 \u0026amp; 5.3 default to game) \u0026lsquo;ModTimerType_Game\u0026rsquo; (Use the game\u0026rsquo;s current uptime in seconds.) \u0026lsquo;ModTimerType_Song\u0026rsquo; (Use the song\u0026rsquo;s current time in seconds.) \u0026lsquo;ModTimerType_Beat\u0026rsquo; (Use the song\u0026rsquo;s current beat.)  Often, song time is used as the setting.\nQuirks: In NotITG, this is done by a single name (\u0026ldquo;modtimer\u0026rdquo;, \u0026ldquo;timer\u0026rdquo; or \u0026ldquo;globalmodtimer\u0026rdquo;) with magnitudes. 0% = game time, 100% = song time, 200% = song beat.\nAvailable variants (modstring): modtimerdefault, modtimergame, modtimersong, modtimerbeat\nPlayerOptions format: ModTimerSetting(\u0026lt;type\u0026gt;)\nExample: ModTimerSetting('ModTimerType_Beat')\nModstring format: \u0026lt;modstring variant\u0026gt;\nExample: modtimerbeat\nAvailable sub modifiers:\nModTimerMult    Desc: Add a multiplier onto the timer used for modifiers. 100% = 2x, -50% = 0.5x.\nAvailable variants (modstring): modtimermult, timermult (NotITG alias), globalmodtimermult (NotITG alias)\nPlayerOptions format: ModTimerMult(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nModTimerOffset    Desc: Offset the timer used for modifiers. 100% = 1 time unit.\nAvailable variants (modstring): modtimeroffset, timeroffset (NotITG alias), globalmodtimeroffset (NotITG alias)\nPlayerOptions format: ModTimerOffset(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nNoteSkew    Desc: Applies skew on the notes and receptors. Does not affect holds. Comes in skewx \u0026amp; skewy variants, and is also column-specific. NotITG calls the skewx variant \u0026ldquo;noteskew\u0026rdquo; because they originally only had skewx.\nCommon values range from -200 to 200%\nQuirks: N/A\nAvailable variants: NoteSkewX, NoteSkewY\nColumn-specific variants: NoteSkewXCol, NoteSkewYCol\nAvailable variants (modstring): noteskewx, noteskewx\u0026lt;column\u0026gt;, noteskew (NotITG name), noteskew\u0026lt;column\u0026gt; (NotITG name), noteskewy, noteskewy\u0026lt;column\u0026gt;\nPlayerOptions format: \u0026lt;NoteSkew variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;) Example: NoteSkewX(0.7, 4)\nColumn-specific format: \u0026lt;NoteSkewCol variant\u0026gt;(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: NoteSkewXCol(1, 0.25, 0.25, true):NoteSkewXCol(2, 0.5, 0.5, true):NoteSkewXCol(3, 0.75, 0.75, true):NoteSkewXCol(4, 1, 1)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *4 70% noteskewx *0.25 25% noteskewx1, *0.5 50% noteskewx2, *0.75 75% noteskewx3, *1 100% noteskewx4\nNoteSkewX video example\nAvailable sub modifiers:    noteskewtype (NotITG only)    Desc: When active, the note skews get rotated (but not the receptors). In SM5, this can be often (mostly) replicated in dance by using the negative amount of NoteSkewY on columns 1 and 4.\nAvailable variants (modstring): noteskewtype, skewtype (alias)\nModstring format: \u0026lt;enable\u0026gt; \u0026lt;modstring variant\u0026gt;\nTrigClip    Desc: Performs clipping on the trigonometric waves used in many modifiers and their variants.\nThe following are available:\n SinClip (sine wave clipping. Affects Wave (all non-tan variants), SpiralY, Bumpy (all non-tan variants), Beat (all variants), Zigzag (All variants), Digital (All non-tan variants), Bounce (All variants), Blink (All variants), Pulse (all non-tan variants), CosClip (cosine wave clipping. Affects Tornado (all non-tan varians), Tipsy (all non-tan variants), Expand, Drunk (all non-tan variants), SpiralX TanClip (tangent wave clipping, use values close to 100% for visible effects. Affects all tangent variants of all modifiers)  Quirks: Going beyond 100% may result in interesting effects on some modifiers. In NotITG, this was \u0026lsquo;fixed\u0026rsquo;.\nCommon values range from 50 to 100%\nPlayerOptions format: \u0026lt;TrigClip variant\u0026gt;(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: CosClip(0.5, 0.5)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: *0.5 50% cosclip\nCosClip video example\nDisableMines    Desc: When active, stepping on mines will not have any effect. Useful if you want to place mines for aesthetic purposes, but don\u0026rsquo;t want to penalize players for ghost-tapping.\nQuirks: N/A\nPlayerOptions format: DisableMines(\u0026lt;enable\u0026gt;)\nExample: DisableMines(true)\nModstring format: \u0026lt;enable\u0026gt; disablemines\nExample: disablemines\nZBuffer    Desc: When active, the zbuffer gets enabled regardless of modifiers active. Can act as an alternate way to enable zbuffer instead of using low amounts of z position modifiers. NotITG also allows having negative values to force it off. When the zbuffer is enabled, holds draw at a step size of 4 instead of 16. Also has \u0026ldquo;ztest\u0026rdquo; as an alias in NotITG.\nQuirks: N/A\nPlayerOptions format: ZBuffer(\u0026lt;enable\u0026gt;)\nExample: ZBuffer(true)\nModstring format: \u0026lt;enable\u0026gt; zbuffer\nExample: zbuffer\nCosecant    Desc: When active, all tangent modifiers use a cosecant wave instead of a tangent wave, mimicking how NotITG v1 did tangent wave modifiers. Known as \u0026ldquo;cosec\u0026rdquo; or \u0026ldquo;glitchytan\u0026rdquo; (alias) in NotITG.\nQuirks: N/A\nPlayerOptions format: Cosecant(\u0026lt;enable\u0026gt;)\nExample: Cosecant(true)\nModstring format: \u0026lt;enable\u0026gt; cosecant\nExample: cosecant\nCosecant video example\nWireFrame    Desc: A Column-specific modifier that allows setting the column to use wireframe mode for notes and holds. NotITG has a modstring alias that hits all columns.\nQuirks: Using a 3D noteskin is recommended if using this modifier.\nAvailable variants (modstring): wireframe\u0026lt;column\u0026gt;, wireframe (NotITG alias that hits all columns)\nPlayerOptions format: WireFrameCol(\u0026lt;column\u0026gt;, \u0026lt;enable\u0026gt;)\nExample: WireFrameCol(2, true)\nModstring format: \u0026lt;enable\u0026gt; \u0026lt;modstring variant\u0026gt;\nExample: wireframe2\nWireFrame video example\nAvailable sub modifiers:    WireFrameWidth    Desc: Like how NotePath has a width sub modifier, this affects the width of the wireframe lines.\nAvailable variants (modstring): wireframewidth\u0026lt;column\u0026gt;, wireframegirth\u0026lt;column\u0026gt; (NotITG alias), wireframewidth (NotITG alias that hits all columns), wireframegirth (NotITG alias that hits all columns)\nPlayerOptions format: WireFrameWidthCol(\u0026lt;column\u0026gt;, \u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nModstring format: *\u0026lt;approach rate\u0026gt; \u0026lt;magnitude\u0026gt; \u0026lt;modstring variant\u0026gt;\nNoteSkin    Desc: Get and set the NoteSkin for the player.\nQuirks: Returns both the previous name \u0026amp; if the set succeeded upon being given a string. Cannot be used to change noteskins mid-song (If forcing a noteskin, you have to reload the screen) like what OpenITG/SM3.95/NotITG has.\nPlayerOptions format: NoteSkin(\u0026lt;noteskin name\u0026gt;)\nExample: NoteSkin('Metal')\nModstring format: \u0026lt;noteskin name\u0026gt;\nExample: metal\nNoteSkinCol    Desc: Allow getting and setting the noteskin on a column-basis. Unlike NoteSkin, this allows for changing the noteskin mid-song.\nWhen used on a single column, the receptors will not change.\nWhen \u0026lt;column\u0026gt; is nil, all columns will use the requested noteskin, and the receptors will change to match.\nQuirks: Requires a Preferences.ini for the song that lists the noteskins to load. May not play nice when the noteskin isn\u0026rsquo;t loaded. NOTESKIN:DoesNoteSkinExist could be used to ensure the noteskin exists before setting. The change is instant unlike noteskin changes done through attacks in OpenITG/SM3.95/NotITG.\nPlayerOptions format: NoteSkinCol(\u0026lt;column\u0026gt;, \u0026lt;noteskin name\u0026gt;)\nExample: NoteSkinCol(nil, 'lambda')\nModstring format: \u0026lt;noteskin name\u0026gt; noteskin\u0026lt;column\u0026gt; (ommitting column will hit all columns)\nExample: lambda noteskin\nNoteSkinCol video example\nLifeSetting    Desc: Set the lifebar type to be used. There are three types (denoted as \u0026lt;type\u0026gt;):\n Bar (The normal lifebar most people are used to.) Modstring form is \u0026ldquo;bar\u0026rdquo;. Battery (Mess up a certain number of times and you fail the song) Modstring form is \u0026ldquo;battery\u0026rdquo;. Time (You have a limited amount of time to live. Hit notes better to gain time.) Modstring form is \u0026ldquo;lifetime\u0026rdquo;.  Quirks: This cannot be set during gameplay. It must be set before entering ScreenGameplay.\nPlayerOptions format: LifeSetting(\u0026lsquo;LifeType_\u0026lt;type\u0026gt;')\nExample: LifeSetting('LifeType_Time')\nModstring format: \u0026lt;type\u0026gt;\nExample: lifetime\nDrainSetting    Desc: Set how the lifebar\u0026rsquo;s health behavior works. There are three drain types (denoted as \u0026lt;type\u0026gt;):\n Normal (The health goes up and down at the expected rate.) Modstring form is \u0026ldquo;normal-drain\u0026rdquo;. NoRecover (The health only goes down.) Modstring form is \u0026ldquo;norecover\u0026rdquo; or \u0026ldquo;power-drop\u0026rdquo;. SuddenDeath (Getting any judgment below the required one will instantly kill you.) Modstring form is \u0026ldquo;suddendeath\u0026rdquo; or \u0026ldquo;death\u0026rdquo;.  Quirks: Initial health will start at 100% when not using Normal drain. Initial health for Normal is a theme metric, as well as the minimum judgment for SuddenDeath. This also works mid-gameplay, allowing for sections that require good accuracy.\nPlayerOptions format: DrainSetting(\u0026lsquo;DrainType_\u0026lt;type\u0026gt;')\nExample: DrainSetting('DrainType_NoRecover')\nModstring format: \u0026lt;type\u0026gt;\nExample: norecover\nBatteryLives    Desc: Set how many lives are available in the Battery life bar at the start. Probably shouldn\u0026rsquo;t be set mid-gameplay.\nQuirks: N/A\nPlayerOptions format: BatteryLives(\u0026lt;number of lives\u0026gt;)\nExample: BatteryLives(5)\nModstring format: \u0026lt;number of lives divided by 100\u0026gt; lives\nExample: 0.05% lives\nRandAttack    Desc: When active, random attacks will be launched throughout the song. Any nonzero magnitude will activate it. Cannot be set through modstrings.\nQuirks: The attacks chosen come from /Data/RandomAttacks.txt\nPlayerOptions format: RandAttack(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: RandAttack(1,1)\nNoAttack    Desc: When active, RandAttack is canceled out. Any nonzero magnitude will activate it. Cannot be activated through modstrings.\nQuirks: N/A\nPlayerOptions format: NoAttack(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: NoAttack(1,1)\nPlayerAutoPlay    Desc: When active, AutoPlay will be set on the player. Cannot be set through modstrings.\nQuirks: Do not set this during gameplay. Attempting to enable it will result in no input for the player and no autoplay, which will result in a stage fail.\nPlayerOptions format: PlayerAutoPlay(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: PlayerAutoPlay(1, 1)\nPassmark    Desc: Set what life amount is required to pass a stage. Cannot be set through modstrings.\nQuirks: N/A\nPlayerOptions format: Passmark(\u0026lt;magnitude\u0026gt;, \u0026lt;approach rate\u0026gt;)\nExample: Passmark(0.5, 2)\nMuteOnError    Desc: When active, keysounds will not play upon errors (letting go hold notes and/or missing).\nQuirks: N/A\nPlayerOptions format: MuteOnError(\u0026lt;enable\u0026gt;)\nExample: MuteOnError(true)\nModstring format: \u0026lt;enable\u0026gt; muteonerror\nExample: muteonerror\nFailSetting    Desc: Set how failing a song works. There are four drain types (denoted as \u0026lt;type\u0026gt;):\n Immediate (Song ends the moment you fail) Modstring forms are \u0026ldquo;failimmediate\u0026rdquo; and \u0026ldquo;failarcade\u0026rdquo;. ImmediateContinue (Song continues after failure, but you still fail at the end) Modstring forms are \u0026ldquo;failendofsong\u0026rdquo; and \u0026ldquo;failimmediatecontinue\u0026rdquo;. EndOfSong (Failure status is determined at the end of the song) Modstring form is \u0026ldquo;failatend\u0026rdquo;. Off (You cannot fail.) Modstring form is \u0026ldquo;failoff\u0026rdquo;.  The default can be set in modstrings through \u0026ldquo;faildefault\u0026rdquo;\nQuirks: N/A\nPlayerOptions format: FailSetting(\u0026lsquo;FailType_\u0026lt;type\u0026gt;')\nExample: FailSetting('FailType_Off')\nModstring format: \u0026lt;type\u0026gt;\nExample: failoff\n"},{"id":33,"href":"/dev/actors/ActorsLua-Tweening/","title":"Tweening","parent":"Lua and Actors","content":"Actors have the ability to transition from point A to point B using Tweening.\nIt allows for queueing up movements \u0026amp; transitions on position, size, color and other attributes as well as commands and messages.\nQueueing-style tweens    These help with queueing actions after a certain amount of time.\nSleep    The actor waits for a given amount of seconds before performing the next command.\nhibernate    Like sleep, but the actor is also hidden for the duration of the hibernate.\nTween manipulation    These functions manipulate the flow of the tweening\nstoptweening    finishtweening    hurrytweening    SM3.95-era tweens    These tweens are what most people would be familiar to those who work with ITG and SM3.95\nlinear    The actor transitions at a constant rate.\naccelerate    decelerate    bouncebegin    It\u0026rsquo;s done in Lua in SM5 for some reason.\nbounceend    It\u0026rsquo;s done in Lua in SM5 for some reason.\nspring    tween (NotITG only)    Takes a string that references a global function\nSM5-era tweens    These tween functions were added in SM5.\n\u0026ldquo;ease\u0026rdquo;    smooth    drop    bezier    A 2D or 3D bezier curve can be passed into the function to allow for extra tweening options.\nSM5.3-era tweens    SM5.3 added all of the standard easing functions. All of these are prefixed with ease and in/out/inout\nsine    in: easeinsine, out: easeoutsine, inOut: easeinoutsine\nquad    in: easeinquad, out: easeoutquad, inOut: easeinoutquad\ncubic    in: easeincubic, out: easeoutcubic, inOut: easeinoutcubic\nquart    in: easeinquart, out: easeoutquart, inOut: easeinoutquart\nquint    in: easeinquint, out: easeoutquint, inOut: easeinoutquint\nexpo    in: easeinexpo, out: easeoutexpo, inOut: easeinoutexpo\nback    in: easeinback, out: easeoutback, inOut: easeinoutback\ncircle    in: easeincircle, out: easeoutcircle, inOut: easeinoutcircle\nelastic    in: easeinelastic, out: easeoutelastic, inOut: easeinoutelastic\nbounce    in: easeinbounce, out: easeoutbounce, inOut: easeinoutbounce\n"},{"id":34,"href":"/dev/actors/Converting-ini-to-Lua/","title":"Converting INI files to Lua","parent":"Lua and Actors","content":"Converting BGAnimation INI files into lua files.    StepMania 3.9 \u0026amp; ITG are capable of using BGAnimation.ini files to define actors in place of xml files.\nIn StepMania 5, these have to be converted into .lua files instead.\nGeneral Layout of a BGAnimation.ini file.    [BGAnimation] [Layer2] File=path/to/a/different_file.png InitCommand=zoomx,3;zoomy,4;diffuse,1,0,0,0 OnCommand=diffusealpha,0;linear,3;diffusealpha,1 CommandRepeatSeconds=20 [Layer3] File=Common Normal Text=Help Me InitCommand=diffusealpha,0.5 OnCommand=spin;effectmagnitude,0,0,-100 [Layer1] File=path/to/a/file InitCommand=diffusealpha,0.5 OnCommand=spin;effectmagnitude,0,0,100 Here, layers are defined with the section name of Layer, followed by numbers or letters.\nThey are sorted by the characters used after Layer (so Layer1 comes before Layer2, even if Layer2 was placed first.)\nThe actual actor type has to be inferred from the path given in File. (Often, it\u0026rsquo;s a Sprite)\nCommands are done in command format.\nCreating the .lua equivalent.    The entire ini can be expressed as a single ActorFrame. In this example, both are sprites, and they have to be sorted manually.\nCommandRepeatSeconds isn\u0026rsquo;t a feature in lua actors, so it has to be replicated with queuecommand and sleep. (It would loop the OnCommand every given amount of seconds)\nThe commands have to be converted into function format as well.\nreturn Def.ActorFrame{ Def.Sprite{ Name=\u0026#34;Layer1\u0026#34;, InitCommand= function(self) self:diffusealpha(0.5) end, OnCommand= function(self) self:spin():effectmagnitude(0,0,100) end, }, Def.Sprite{ Name=\u0026#34;Layer2\u0026#34;, InitCommand= function(self) self:zoomx(3):zoomy(4):diffuse(1,0,0,0) end, OnCommand= function(self) self:diffusealpha(0):linear(3):diffusealpha(1):sleep(20-3):queuecommand(\u0026#34;On\u0026#34;) end, }, Def.BitmapText{ File=\u0026#34;Common Normal\u0026#34;, Text=\u0026#34;Help Me\u0026#34;. InitCommand= function(self) self:diffusealpha(0.5) end, OnCommand= function(self) self:spin():effectmagnitude(0,0,-100) end, }, } Other ini-style files (.sprite, .model)    Older SM also has alternate files that follow the ini format to define other actor types.\n.sprite files have an extra set of attributes for defining frames.\nFrame0000=0 Delay0000=0.25 Frame0001=4 Delay0001=0.25 Frame0002=2 Delay0002=0.25 Frame0003=1 Delay0003=0.25 Frame0004=3 Delay0004=0.25 These can be turned into Frames tables for a Def.Sprite.\nFrames= { {Frame= 0, Delay= 0.25}, {Frame= 4, Delay= 0.25}, {Frame= 2, Delay= 0.25}, {Frame= 1, Delay= 0.25}, {Frame= 3, Delay= 0.25}, } .model files have extra attributes to define bones, meshes and materials. These translate almost-1:1 into lua.\n[Model] Meshes=arrowmesh.txt Materials=4th.txt Bones=arrowmesh.txt becomes\nDef.Model{ Meshes=\u0026#34;arrowmesh.txt\u0026#34;, Materials=\u0026#34;4th.txt\u0026#34;, Bones=\u0026#34;arrowmesh.txt\u0026#34; } "},{"id":35,"href":"/dev/actors/Converting-xml-to-Lua/","title":"Converting XML files to Lua","parent":"Lua and Actors","content":"Converting xml files into lua files.    StepMania 3.95 \u0026amp; ITG use xml files for both themeing and effect scripting. It also allows embedding lua functions to perform more complex effects \u0026amp; scripting.\nIn StepMania 5, these have to be converted into .lua files instead.\nThe \u0026lsquo;easy way\u0026rsquo; of converting    There are two semi-automatic ways to convert xml files into lua.\n StepMania 5\u0026rsquo;s built-in XML to LUA converter   Converts positions to be based off of SCREEN_CENTER_X (which can result in some lost position information.) Condition attributes are turned into uses of a local function Commands are left in command format Misses commands in .sprite files Accessible from the debug menu Rearranges commands to be in alphabetical order  XeroOl\u0026rsquo;s xmlconvert tool   Requires some extra libraries on your system Does not touch positions Condition attributes are turned into ternary expressions Commands are turned into function format. performs a bit more work when dealing with modifier-related calls Sorts the actors to match what the xml tag sorting would do  The result isn\u0026rsquo;t going to always work, but should do a good amount of the grunt-work needed.\nGeneral layout of an xml file.    \u0026lt;ActorFrame\u0026gt; \u0026lt;children\u0026gt; \u0026lt;ZZZActor Type=\u0026#34;Quad\u0026#34; InitCommand=\u0026#34;hidden,1\u0026#34; OnCommand=\u0026#34;sleep,1000\u0026#34; /\u0026gt; \u0026lt;Special Type=\u0026#34;Sprite\u0026#34; File=\u0026#34;funny.png\u0026#34; OnCommand=\u0026#34;%function(self) SCREENMAN:SystemMessage(\u0026#39;hi\u0026#39;) end\u0026#34; /\u0026gt; \u0026lt;Sprite File=\u0026#34;circle\u0026#34; Condition=\u0026#34;GAMESTATE:IsHumanPlayer(0)\u0026#34; /\u0026gt; \u0026lt;/children\u0026gt; \u0026lt;/ActorFrame\u0026gt; Here, layers can have a name as well as a tag or Type. Either the tag name or the Type attribute defines what type of actor it is. If neither of these are given, the game would have to infer the actor type by itself.\nActorFrames have a children tag for holding their inner actors.\nUnlike .ini files, layers can have practically any name in the tag, instead of a required Layer prefix.\nThe layer sorting is somewhat like ini files, with the tag name being used to determine actor order. (This is separate from the Name attribute)\nFor example, the layer tagged as ZZZActor gets sorted to be after Special, even though it was written the other way around.\nCreating the .lua equivalent manually.    return Def.ActorFrame{ -- Special -- Def.Sprite{ Texture=\u0026#34;funny.png\u0026#34;, OnCommand= function(self) SCREENMAN:SystemMessage(\u0026#39;hi\u0026#39;) end, }, -- Sprite -- GAMESTATE:IsHumanPlayer(PLAYER_1) and Def.Sprite{ Texture=\u0026#34;circle\u0026#34;, } or Def.Actor{}, -- ZZZActor -- Def.Quad{ Texture=\u0026#34;funny.png\u0026#34;, InitCommand=function(self) self:visible(false) end, OnCommand=function(self) self:sleep(1000) end, }, } Often, the main xml file is an ActorFrame, with the inner actors matching the layout of the xml after sorting.\nConditions can be turned into ternary expressions, though they now run at different times compared to the original xml file.\nJust like in ini files, commands have to be turned into function format.\nThe commands that are already in function format are mostly 1:1. The \u0026ldquo;% \u0026quot; that are around the functions must be removed.\n"},{"id":36,"href":"/categories/","title":"Categories","parent":"Project OutFox Wiki","content":""},{"id":37,"href":"/user-guide/config/folders/","title":"Content folders","parent":"Features \u0026 Config","content":"Project OutFox uses various folders to store content, such as songs, save data, themes, noteskins, etc. Content is stored in one of the three following locations;\n Global folders are located within the Project OutFox installation directory. If you are on a multi-user operating system, content in these folders will be accessible to all users. When Portable Mode is enabled, your save data (including profiles and preference files) will be placed in the installation directory. User folders are also created in your operating system\u0026rsquo;s home/user directory if Portable Mode is disabled. When Portable Mode is disabled, this is where your save data will be stored.  On macOS, these folders are located in ~/Library/Preferences/StepMania 5.3/ On Linux, these folders are located in ~/.stepmania-5.3/ On Windows, these folders are located in %APPDATA%\\StepMania 5.3   Additional folders are paths configured in the Preferences.ini file; for instance, you can store your song library on a second hard drive and link to it there, or share content between multiple installations.  These content folders comprise the game\u0026rsquo;s \u0026ldquo;Virtual File System\u0026rdquo; (VFS). They are, in turn, divided into various subdirectories for storing specific types of content.\nAnnouncers    Announcers are a collection of audio files that play automatically based on specific triggers, such as in-game events or navigating to specific screens.\nAppearance    Avatars    Square images that can be used as avatars for your profile.\nJudgments    If supported by the current theme, you can pick a different design for in-game judgement displays from images in this folder.\nJudgement fonts are divided into equally-sized sprites for each judgement. Fonts designed for specific timing modes have a modifier in their file name, such as [Advanced], [FAPlus], etc. A judgement font can also have specific versions for early and late timings.\nNoteSkins    NoteSkins affect the appearance of notes. They could be arrows, bars, circles, pawprints, etc. Project OutFox is compatible with noteskins designed for StepMania 5.\nThe NoteSkins folder is divided into subfolders for specific game types. A global noteskin appears in all game types.\nNoteSkins │ └───dance │ │ │ └───metal │ │NoteSkin.lua │ │... Themes    Themes determine the look, feel, and functionality of the game.\nThemes │ └───My Theme │ │ Metrics.ini │ │ ... Toasties    Inspired by the famous Mortal Kombat easter egg, a toasty is an image and sound played on specific combo milestones.\nBackgroundEffects    Visual effects used for background script sequences in songs.\nBackgroundTransitions    Visual effects used for background script sequences in songs.\nBGAnimations    Actor-based animations that can be played in the background in-game. They can also be used as part of background script sequences in songs.\nCache    The cache generated by Project OutFox when loading songs. Delete this folder to force the game to reload all songs.\nCharacters    3D character models that can be displayed in-game.\nCourses    Playlists of songs used in course modes (such as Extended).\nLogs    When Project OutFox is running, it generates various log files to record diagnostic information and errors. If you are having issues with the game, the log file is a good place to begin.\nRandomMovies    Video clips that can be played in the background in-game. They can also be used as part of background script sequences in songs.\nSave    This is where data such as preferences, profiles, high scores, etc. are stored. If portable mode is enabled, the game will load the Save folder from your installation directory. It is otherwise located in your user folders.\nScreenshots    Screenshots taken in-game are stored here.\nSongMovies    Similar in use to RandomMovies, except that they will be excluded from the RandomMovies pool.\nSongs    Songs that are used to play the game. They are stored in folders known as Groups.\nSongs │ └───My Group │ │ │ └───My Song │ │ mysong.ssc │ │ mysong.ogg │ │ mysong-bg.png │ │ mysong-bn.png │ │ mysong-jk.png Additional folders    Via the preferences file (Save/Preferences.ini), you can specify additional folders.\nBoth of these parameters accept multiple directory paths, comma-separated.\nAdditionalSongFolders    The AdditionalSongFolders option allows you to specify other locations for where Project OutFox can search for songs. As with the installation directory\u0026rsquo;s song folder, they are divided into groups. For example (assuming a location such as D:\\AdditionalSongs);\nD:\\AdditionalSongs │ └───My Group │ │ │ └───My Song │ │ mysong.ssc │ │ mysong.ogg │ │ mysong-bg.png │ │ mysong-bn.png │ │ mysong-jk.png AdditionalFolders    AdditionalFolders is like the above, except they can contain any of the usual content subdirectories like so;\nD:\\OutFoxExtra │ └───Announcers │ └───Appearance │ └───etc. "},{"id":38,"href":"/dev/actors/","title":"Lua and Actors","parent":"Developers and Creators","content":"StepMania (and it\u0026rsquo;s many forks) use what\u0026rsquo;s known as the Actor model. OutFox inherits this behaviour. Everything in the engine is an Actor at its' very core.\nBecause everything is an actor, there are many types of actors, which are described below. Not everything listed is able to be created in Lua. Those that aren\u0026rsquo;t will be noted as such. However, all of these can be found in the Lua environment.\nA note on LoadActor()    This is a helper function that can be used to dynamically load an actor based on the file type. However, this should not be used as it is more resource intensive and can be easily avoided when the filetype is known. For loading external lua files, loadfile(path)() can be used, though the full path is required.\nActor    This is the base that everything derives from. Whatever an Actor can do, everything else can as well. It can be useful for creating control variables without creating something visible on screen.\nExample:\n-- Actors can be very useful as variable controllers since it does not perform any kind of -- overhead to the draw pipe. local Value = 2 Def.Actor{ InitCommand=function(self) Value = Value + 2 Trace(\u0026#34;My Value is now \u0026#34;.. Value) end } ActorFrame    An Actor that can contain one or more Actors. Think of it as a box that can hold as many objects as it can.\nExample:\nDef.ActorFrame{ -- This sprite is now included inside of the ActorFrame. -- Any changes from the ActorFrame will affect the sprite, such as position, rotation, -- zoom and such. Def.Sprite{} } ActorFrameTexture    It\u0026rsquo;s like an ActorFrame, but instead of displaying what\u0026rsquo;s inside onto the screen, it places the contents of the ActorFrame onto a Texture that a Sprite (or any other actor that can load textures) can read from.\nPopularized by its' use in NotITG, although the behavior is different. NotITG\u0026rsquo;s version places the screen itself onto a texture instead of what\u0026rsquo;s inside the ActorFrame and requires basezoom to be used on sprites to make the image fit inside the game window.\nExample:\n--[[ This example will create an ActorFrameTexture that uses a sample BitmapText, and project it to the center to the screen in half of the available size of the viewport window. ]] -- This ActorFrame will contain everything. local t = Def.ActorFrame{} -- First, create the ActorFrameTexture. local AFT = Def.ActorFrameTexture{ InitCommand = function(self) -- Start by adding a name to the texture. This is optional, but best to provide one, -- in case you need to work with several ActorFrameTextures in the same screen. self:SetTextureName( \u0026#34;MyAFT\u0026#34; ) -- Now we need to give the ActorFrameTexture a resolution, which will be -- how much is available to render. -- As this example will be half the size of the available screen, we\u0026#39;ll give the size -- half of the screen. self:SetWidth( SCREEN_WIDTH*.5 ):SetHeight( SCREEN_HEIGHT*.5 ) -- By default this option is disabled, but you can enable it to allow transparency -- in your ActorFrameTexture. -- In this case, it will disabled to show the available render area (shown as black) self:EnableAlphaBuffer( false ) -- We are done with the AFT, so now we have to create it. self:Create() end, -- After the initializer command, any actors included inside will be projected. -- The actors here act exactly the same as a ActorFrame, so they will start on the top-left -- corner of the available draw area given (in this case, half of the screen.) Def.BitmapText{ Font = \u0026#34;Common Normal\u0026#34;, Text = \u0026#34;Testing String!\u0026#34;, BeginCommand = function(self) self:zoom(2):spin() -- In order to see the texture, let\u0026#39;s center it. -- Calculations in actors inside of the AFT will need conversion as dimensions are -- different, so for example: -- Since we\u0026#39;re doing half of the screen for dimensions, to center it, we need to half -- that size as well. -- 1280 / 2 = 640 (Screen Size) -- 640 / 2 = 320 (Actor Position) -- 0 - 640 = 0 .. 1 (Size Area, using Screen Size) -- (320/640) = 0.5 (Point of Actor Position using above calculation) self:xy( SCREEN_WIDTH*.25, SCREEN_HEIGHT*.25 ) end } } t[#t+1] = AFT -- Now that we\u0026#39;ve created the ActorFrameTexture, it will be sent into a global texture, that we -- can then grab into a sprite, and it can be done in two ways. These will be shown inside the -- OnCommand in the sprite. -- Method 1: Load sprite directly into sprite. t[#t+1] = Def.Sprite{ -- Sprite name given inside the SetTextureName command in your AFT. Texture = \u0026#34;MyAFT\u0026#34;, -- Let\u0026#39;s center the projection so we can see it. OnCommand=function(self) self:xy( SCREEN_CENTER_X, SCREEN_CENTER_Y ) end } -- Method 2: Load sprite on demand on runtime. t[#t+1] = Def.Sprite{ -- Let\u0026#39;s center the projection so we can see it. OnCommand=function(self) self:xy( SCREEN_CENTER_X, SCREEN_CENTER_Y ) -- Sprite name given inside the SetTextureName command in your AFT. self:Load( \u0026#34;MyAFT\u0026#34; ) end } return t ActorMultiTexture    A quad that allows for layering of multiple textures. Every layer\u0026rsquo;s TextureMode can be manipulated using SetTextureMode (Note that it\u0026rsquo;s 0-indexed).\nCan be manipulated like how a Sprite would. once textures are added. By default, every layer is multiplicative.\nActorMultiVertex    Allows for arbitrary polygons to be created. Every vertex has a position on the xyz plane, a color formatted like diffuse values, and a uv coordinate for textures. In NotITG, this is known as \u0026ldquo;Polygon\u0026rdquo;, and the functions available are different, even though it achieves the same thing.\nreturn Def.ActorMultiVertex{ OnCommand=function(self) -- First, setup the kind of DrawMode is going to be performed. There are several kinds available. -- In this example, we\u0026#39;ll use Lines, to use a two point example. self:SetDrawState{ Mode=\u0026#34;DrawMode_Lines\u0026#34; } -- Time to generate the vertices that will become the vertex map. local vertices = { -- Data is inserted as the following: -- { { x, y, z }, Color, { TextureOffsetX, TextureOffsetY } } -- First table is the position of the vertex relative to the position of the ActorMultiVertex. -- Second table is the color that vertex will contain. -- Third table is optional for when you have a texture loaded into the AMV, and mapping is needed for the texture. -- Value goes from 0 to 1. -- Since no textures will be used in this example, the third table can be ignored. { {0, 0, 0}, Color.White }, { {15, 15, 0}, Color.Green } } -- Now with the vertices assigned, now it\u0026#39;s time to send them back to the AMV for it to generate them. self:SetVertices( vertices ) end } Vertices from the ActorMultiVertex can also be tweened to create animations. This must be done by modifying an existing vertice already assigned on the table, otherwise, it won\u0026rsquo;t be recognized and will just snap into the new position assigned.\n-- Let\u0026#39;s say this is your original vertex data, using DrawMode_Lines. -- This creates a line going from the topleft to bottom right by 15 pixels. local verts = { { {0, 0, 0}, Color.White }, { {15, 15, 0}, Color.Green } } -- Generate the verts so they can be rendered on screen. self:SetVertices(verts) -- Now let\u0026#39;s begin a transition using linear for 2 seconds. self:linear(2) -- Let\u0026#39;s modify the ending vertice so its Y position becomes the same as the starting vertex. -- There are two ways to modify vertex data here: -- METHOD 1: SetVertex. -- Simply call the SetVertex command that is available for ActorMultiVertex, and assign its new values. -- int index, table { table pos, table color, table textcoords } self:SetVertex( 2, { {15, 15, 0} } ) -- METHOD 2: Modifying the table itself. -- (This is recommended if you\u0026#39;re planning to modify a lot of points at the same time, or just need to modify a specific data type rather than the entire entry data) verts[2][1][2] = 0 -- Let\u0026#39;s analyze what\u0026#39;s going on here: verts[2]\t-- Go to the second entry on the verts table [1]\t-- Go to the first table of that entry, which contains the position of the vertex. [2]\t-- Go to the second value on that table, which is the Y position. -- With this value now modified, generate the new set of vertices. self:SetVertices(verts) ActorProxy    Creates a visual clone of any Actor given as a target. Anything done to the Target Actor shows up in the Proxy, but anything done to the Proxy will not show up on the Target.\nlocal t = Def.ActorFrame{} -- Let\u0026#39;s say you want to clone this object, it\u0026#39;s a bitmaptext actor that contains some words. -- An example using an object assigned to a local variable. local mytext t[#t+1] = Def.BitmapText{ Font=\u0026#34;Common Normal\u0026#34;, Text=\u0026#34;Hello There!\u0026#34; InitCommand=function(self) -- We assign this BitmapText to become mytext, so any actor who uses mytext can control this BitmapText. -- Note the InitCommand, this is neccesary so the object can be assigned at construction time, leaving space for it to be properly -- generated. mytext = self end } t[#t+1] = Def.ActorProxy{ BeginCommand=function(self) -- With mytext generated, using a later command in the pipeline, like [On/Begin]Command, we call SetTarget to get mytext, -- and clone the actor that\u0026#39;s in it. self:SetTarget( mytext ) end } -- You can also grab from nested ActorFrames, and even outside of the scope. t[#t+1] = Def.ActorFrame{ Def.BitmapText{ Font=\u0026#34;Common Normal\u0026#34;, Text=\u0026#34;Hello There!\u0026#34;, Name=\u0026#34;MyText\u0026#34;, }, Def.ActorProxy{ BeginCommand=function(self) -- For information about the GetParent and GetChild functions, check \u0026#34;Anatomy of a Lua Actor: Obtaining Childs and ActorFrame Levels\u0026#34;. self:SetTarget( self:GetParent():GetChild(\u0026#34;MyText\u0026#34;) ) end } } return t -- Finish by returning the ActorFrame. ActorScroller    An actor that allows for creating scrolling displays. If BitmapTexts are used, they have to be encased in an ActorFrame.\nBanner    A song or course banner, meant for use with custom music wheels or any other place a song\u0026rsquo;s banner would show up.\nBGAnimation    A background animation that can be used during gameplay Can either be loaded from a BGAnimation.ini file (Only if Quirks Mode is enabled), or constructed like an ActorFrame would.\nBitmapText    Used to display text on screen.\nBPMDisplay    Shows the BPMs of the song currently selected. What shows depends on what the simfile sets for the display BPM.\nUsually used as part of ScreenSelectMusic.\nComboGraph    Shows the combos that were held throughout the song, with combo breaks separating the blocks, and the largest combo being colored.\nDef.ComboGraph{ InitCommand=function(self) -- Load the MetricsGroup that will create the basis for the graph. self:Load(\u0026#34;ComboGraph\u0026#34;) local playerStageStats = STATSMAN:GetCurStageStats():GetPlayerStageStats(player) local stageStats = STATSMAN:GetCurStageStats() -- Data is graph from the current stage stats and the player\u0026#39;s stats. self:Set(stageStats, playerStageStats) end } ControllerStateDisplay    Appears to show the status of controllers/pads.\nCourseContentsList    A list of the songs for a given course. Can be given a limit for how many songs to show and how many to show at a time.\nDeviceList    Displays a list of all input devices. Often, Keyboard and Mouse will be listed.\nFunctions like most other BitmapText actors.\nDifficultyIcon    A Sprite-type actor that shows a different icon for each difficulty.\nIf there number of frames are double the amount of difficulties available in the engine, the player number will offset the icon shown.\nDynamicActorScroller    Inherits from ActorScroller, uses only one child Actor to draw all items.\nFadingBanner    A song or course banner that can fade between the banner for different songs or courses.\nOften seen in ScreenSelectMusic.\nGradeDisplay    Shows the grade a player has gotten for a given song\u0026rsquo;s chart.\nGraphDisplay    Displays a graph containing data points for a player\u0026rsquo;s life throughout the stage.\nSettings for a GraphDisplay can only be defined through metrics.\nDef.GraphDisplay{ InitCommand=function(self) -- Load the MetricsGroup that will create the basis for the graph. self:Load(\u0026#34;GraphDisplay\u0026#34;) local playerStageStats = STATSMAN:GetCurStageStats():GetPlayerStageStats(player) local stageStats = STATSMAN:GetCurStageStats() -- Data is graph from the current stage stats and the player\u0026#39;s stats. self:Set(stageStats, playerStageStats) end } GrooveRadar    A recreation of the five-point \u0026ldquo;Groove Radar\u0026rdquo; from DDR. Can take arbitrary values as well as the song\u0026rsquo;s radar values.\nHelpDisplay    A BitmapText-type actor that allows for cycling automatically through tips.\nDef.HelpDisplay { File=\u0026#34;Common Normal\u0026#34;, InitCommand=function(self) local s = \u0026#34;Hello\u0026#34; .. \u0026#34;::\u0026#34; .. \u0026#34;This is a new line\u0026#34; .. \u0026#34;::\u0026#34; .. \u0026#34;And another one!\u0026#34; -- We\u0026#39;ll set the next to toggle between each line (Separated by double colons) by 0.5 seconds. self:SetSecsBetweenSwitches(0.5) -- And tell the HelpDisplay to show that text. :SetTipsColonSeparated(s) end } HoldJudgment    Often found in Player, though there is no way to grab the ones that are in Player.\nThe judgment that shows up on a column when dropping or clearing a hold \u0026amp; roll.\nThere is an extra function to allow tracking the hold judgments from a MultiPlayer.\nInputList    Displays a list of inputs as they occur. Can show unmapped and mapped inputs.\nFunctions like most other BitmapText actors.\nLogDisplay    This is an actor type created from _fallback\u0026rsquo;s scripts.\nDisplays lua script errors as they happen. Most themers shouldn\u0026rsquo;t need to touch this.\nLifeMeter    Cannot be created from lua, but can be grabbed from ScreenGameplay.\nOften used in gameplay screens. This shows how much life a Player currently has.\nLifeMeterBattery    Cannot be created from lua.\nOften used in gameplay screens. This shows how many more mistakes a player is allowed before failing.\nMemoryCardDisplay    Shows the current state of a player\u0026rsquo;s inserted memory card. Made of images, with one for each state.\nMenuTimer    Cannot be created from lua, but is a part of every screen that inherits from ScreenWithMenuElements.\nA Timer that counts down and proceeds to the next screen when it reaches 0.\nMeterDisplay    Shows the current progress of an operation. It appears to only show the progress as 50%.\nModel    Allows one to display MilkShape3D ASCII models, having separate attributes for materials, bones and meshes.\nDef.Model{ Meshes=\u0026#34;MyModel.txt\u0026#34;, Materials=\u0026#34;MyModel.txt\u0026#34;, Bones=\u0026#34;MyModel.txt\u0026#34;, OnCommand=function(self) self:Center() -- When a model begins its animation, it will loop indefinitely. To stop that, use the loop command to -- set the flag to false. self:loop(false) end } Meshes are the composition and structure of the Model. This data represents the vertices that make the Model take shape.\nMaterials are the textures that the model will use. These can be any of the image formats listed in the Supported File Extensions page. They can also be .ini files that define animated textures on a Def.Sprite.\nBones make the model come to life. They can be defined within the primary model file, or, in the case of dancing characters, be controlled via a separate file that only contains the bones.\nIn the above example, all three attributes used the same filepath; all the necessary data was contained within a single file. It is possible to configure the MilkShape 3D software to output distinct files for meshes, materials, and bones, and set each Def.Model attribute accordingly, but that is outside the scope of this lesson.\nNOTE: All three attributes must be provided within Def.Model as paths to resources that can be loaded or the game will crash.\nWith OutFox, you can store several types of animations on the same model and call them at any moment.\n-- Let\u0026#39;s load a animation called WarmUp, located on a file called \u0026#34;Warm1.txt\u0026#34;. self:LoadBones( \u0026#34;WarmUp\u0026#34;, \u0026#34;Warm1.txt\u0026#34; ) -- Now the model has an animation called \u0026#34;WarmUp\u0026#34;, and can be called at any time with playanimation. -- The second value is optional, and sets the rate of the animation\u0026#39;s speed. self:playanimation( \u0026#34;WarmUp\u0026#34;, 1 ) ModIconRow    Shows icons for the currently set modifiers of a player.\nNot all modifiers have an icon, and the settings can only be set through metrics.\nMusicWheel    Cannot be created from lua, but can be grabbed from the TopScreen.\nThe wheel used to select songs in ScreenSelectMusic or courses in ScreenSelectCourse.\nNoteColumnRenderer    Cannot be created from lua, but can be grabbed from NoteField.\nThis is a dedicated actor for a column in the notefield, and can be treated like any other actor.\nNoteField    Cannot be created from lua, but resides in Player.\nContains the receptors and notes as seen in gameplay.\nOptionRow    Cannot be created from lua.\nOften seen in options screens, this actor allows for picking and choosing various options for a given setting.\nPaneDisplay    Shows the number of steps, jumps, holds, rolls, mines, hands, lifts, fakes, the machine profile\u0026rsquo;s highscore \u0026amp; name and the current profile\u0026rsquo;s high score for a given chart.\nSettings must be defined through Metrics.\nPercentageDisplay    Shows a player\u0026rsquo;s current percentage (Actual DancePoints divided by Possible DancePoints).\nPlayer    Cannot be created from lua, but is part of ScreenGameplay\nThe entirety of the playfield. Holds the judgment, hold judgments, combo and the NoteField.\nQuad    An arbitrary rectangle. Acts like a Sprite with a blank texture.\n-- Generate a 64 x 64 rectangle on the center of the screen, and color it Yellow. Def.Quad{ OnCommand=function(self) self:zoomto( 64,64 ):diffuse( Color.Yellow ) :xy( SCREEN_CENTER_X, SCREEN_CENTER_Y ) end } RollingNumbers    A BitmapText with a number that transitions to the target number.\nRequires metrics for it to be loaded before anything else is done with it.\nDef.RollingNumbers{ -- Load the font that the numbers will be rendered with. File = THEME:GetPathF(\u0026#34;Common\u0026#34;, \u0026#34;Normal\u0026#34;), InitCommand=function(self) -- Loads the MetricsGroup to use it\u0026#39;s settings on. self:Load(\u0026#34;RollingNumbers\u0026#34;) -- To update the value, use the targetnumber function. self:targetnumber(300) end } ScoreDisplayAliveTime    A BitmapText-type actor that shows how long a player has survived through the stage.\nScoreDisplayCalories    A RollingNumbers-type actor that shows how many calories a player has burned through the stage.\nScreen    Can\u0026rsquo;t be defined in lua, but can be defined in a theme\u0026rsquo;s metrics.\nA screen the theme can go to. There are screens for gameplay, selecting music, pre-gameplay, etc. Each screen has a background, underlay, overlay and decorations that can be used.\nSongBPMDisplay    Shows the current BPM during gameplay. Does not appear to take split timing into account.\nSongMeterDisplay    A MeterDisplay that shows the current position of the song being played.\nDef.SongMeterDisplay{ InitCommand=function(self) -- This generates a 300 x [the height of your Stream texture] that will define the current progress of whatever song is currently being played. -- The actor will automatically update progress for the Tip and the Stream. self:SetStreamWidth( 300 ) end, -- Both the Stream and Tip are AutoActors, so they can be any actor type. Stream=Def.Sprite{ Texture=\u0026#34;MyStreamBar\u0026#34; }, Tip=Def.Sprite{ Texture=\u0026#34;MyTip\u0026#34; } } Sound    Used to play sound files outside of the common theme sound effects and the simfile\u0026rsquo;s song itself.\nRemoves the need to use SOUND:PlayOnce(), as it allows for pre-loading the sound file at the start instead of loading (possibly many times) and playing the sound mid-screen.\nDef.Sound{ -- Load the audio called MySound, which is a ogg file in this example. File=\u0026#34;MySound.ogg\u0026#34;, -- Lets the audio pane from side to side. Useful for audios that need to play on a specific player side. SupportPan=true, -- Allows the audio to change rate and pitch. SupportRateChanging=false, -- this assigns the audio to be an Action, which is a flag for sounds that allows it to be muted by the player, -- with the use of the Mute Actions key (Default to \u0026#34;Pause\u0026#34;). IsAction=true, OnCommand=function(self) -- When creating the actor, sound will not play automatically, so you need to use the play command -- to perform such action. self:play() -- If the audio has the \u0026#34;(loop)\u0026#34; flag set on its filename, it will loop infinetly. So to top it, use the -- appropiate command. self:stop() -- If the sound needs to be paused on a particular frame, and not to reset, use the pause command. self:pause( true ) -- Use false to resume it. -- To control actions like volume, you need to access the ActorSound\u0026#39;s RageSound, by using the get function. local MyRageSound = self:get() MyRageSound:volume(0.5) -- Changes volume (0 to 1). MyRageSound:pitch( 1.2 ) -- Requires SupportRateChanging to work. MyRageSound:speed( 1.4 ) -- Requires SupportRateChanging to work. end } Sprite    Allows one to display images on screen. These images can be a png, jpeg, gif or even a video file.\nDef.Sprite{ Texture=\u0026#34;MyTexture.png\u0026#34;, -- The Texture is optional, you can start a sprite without a texture. -- You can manipulate the ammount of frames that a sprite can use using the Sprite argument. Frames={ -- The structure for the Frame is as follows: --{ Frame = int, Delay = float , {float,float}, {float,float} } -- The two tables are optional upper left and lower right corners of the fraction of the -- frame to use. -- This will make a 4 frame sprite toggle between its frames for 0.5 seconds, -- making a 2 second animation. { Frame = 0, Delay = 0.5 }, { Frame = 1, Delay = 0.5 }, { Frame = 2, Delay = 0.5 }, { Frame = 3, Delay = 0.5 }, }, OnCommand=function(self) -- You can also load new textures after assigning one beforehand. -- The path in Load is absolute, so you must put the entire path to the new image. self:Load( --[[ [Path to another texture] ]] ) -- You can pause or jump to other sprites with the following commands. self:animate(0) -- 0 pauses the animation, 1 resumes it (Can be used as well for Models). self:pause() -- An alias for animate(0) (Can be used as well for Models). self:play() -- An alias for animate(1) (Can be used as well for Models). -- setstate jumps to a frame of the animation assigned. Animation states are 0-indexed. self:setstate( 2 ) -- Jumps to the third frame of the animation. -- If an out-of-range value is assigned ( \u0026lt; 0 or \u0026gt; #Frames ), an error is displayed -- displaying the total ammount of frames available on the current sprite. -- The Frames set can also be manipulated during runtime, by using the SetStateProperties -- function. This example now inverts the animation. self:SetStateProperties( { { Frame = 3, Delay = 0.5 }, { Frame = 2, Delay = 0.5 }, { Frame = 1, Delay = 0.5 }, { Frame = 0, Delay = 0.5 }, } ) end } StepsDisplay    Displays the data for a given chart. Can show difficulty number, description, credit, if it\u0026rsquo;s autogen and steps type.\nCurrently, all setings are done through metrics.\nStepsDisplayList    Shows the list of steps available for a given song.\nThe name given determines what metrics group to load from.\nDef.StepsDisplayList { Name=\u0026#34;StepsDisplayList\u0026#34;, -- These define the cursor the players will be controlling. The rest of the elements are defined -- by the metrics. CursorP1=Def.Actor{}, CursorP2=Def.Actor{}, CursorP1Frame=Def.Actor{}, CursorP2Frame=Def.Actor{} } TextBanner    A \u0026ldquo;Banner\u0026rdquo; that contains the song name, artist and subtitle.\nUsually seen in the CourseContentsList of ScreenSelectMusic or the ScrollerItem in ScreenHighScores.\nWheelBase    Cannot be created from lua.\nA base class for wheels. Currently, the MusicWheel and RoomWheel inherit from this.\nWheelItemBase    Cannot be created from lua.\nA base class for items residing in wheels. MusicWheelItems inherit from this.\nWorkoutGraph    A graph showing the calories burned over time during a workout.\n"},{"id":39,"href":"/","title":"Project OutFox Wiki","parent":"","content":"Pardon our dust! We have rebuilt the wiki using a new framework to make things nicer and more organized.\nAll of the existing content has been migrated, but be sure to report any issues you encounter, and we\u0026rsquo;ll get them fixed ASAP.\n Welcome to the documentation wiki for Project OutFox 5.3! Project OutFox is a fork of StepMania with a focus on internal modernization to its code, as well as refurbishing and extending its ability to support various types of rhythm games.\nThis wiki is still a work in progress, so keep checking back for updates on new content! It is edited via a Git repository; commit access is limited to the development team, but you can always perform pull requests too! The site is implemented using Hugo and the Geekdocs framework.\n Table of contents  Project OutFox  About   FAQ   Dev Team    User\u0026rsquo;s guide  Installation   Getting Started   Controllers   Content folders   Preferences file     For Creators  Lua and Actors   Effects and Gimmicks   Modifiers    For Developers  Translation      Credits and license  Text available under the CC-BY SA 4.0 licence, attributed to Team Rizu unless otherwise noted.\nPowered by GitHub Pages, Hugo, and Geekdocs.\n"},{"id":40,"href":"/tags/","title":"Tags","parent":"Project OutFox Wiki","content":""},{"id":41,"href":"/dev/translation/","title":"Translation","parent":"Developers and Creators","content":"Are you translating a theme to another language? Reading this might help you.\nWhere are language files stored    Inside every theme there\u0026rsquo;ll be a Languages folder. Inside that folder is where language files are stored. Example:\nLanguages/ en.ini ja.ini Here we can see 2 language files: en for English and ja for Japanese. It\u0026rsquo;s a standard to name language files in that format (language-COUNTRY.ini). For example: In this case, there\u0026rsquo;s a Portuguese translation, but since there\u0026rsquo;s also Portuguese from Portugal, the file was named pt-BR (BR = Brazil).\nFallback    You probably already noticed a _fallback theme in the themes folder, but in case you didn\u0026rsquo;t: it\u0026rsquo;s where things that are necessary for every theme gets stored, so when someone is making a theme the game doesn\u0026rsquo;t blow up. The same goes for Languages: it\u0026rsquo;s important to also translate the fallback for your language because the theme you\u0026rsquo;re translating might not have every string that it uses on it\u0026rsquo;s own folder.\nStarting a translation    To start your work, create a new file for your language(-COUNTRY, if needed) and don\u0026rsquo;t forget to use the .ini extension. You can do this on Notepad with no problem but it\u0026rsquo;s recommended to use a editor like Visual Studio Code or Notepad++.\nNow open en.ini and your new language file, then copy all the content from en.ini to your language file. You can close en.ini now.\nWhat you should translate    This is an code example taken from Soundwaves theme.\n[Common] WindowTitle=Project OutFox StepMania=Project OutFox # Dedicated Character Display strings ModelLoadError=Model for %s (%s) Has a invalid model. Please check if the model.txt file is correctly named and formatted. ModelAnimLoadError=An animation file for %s\u0026#39;s model (%s) is invalid or non-existant. Please check the animation folders and see if there\u0026#39;s any file missing. LocationLoadError=Current Location (%s) is missing its location model. Please check if the model.txt file is correctly named and formatted. SongLoaderSingleSong=Random Song Play: Current Folder only contains 1 song. OutFox might get confused when picking the song via random. Selecting to index 1. SongLoaderNoSongs=Random Song Play: No songs were found in your OutFox install folder! Switching back to fallback music. You can see on this image and on your file that every line has a Title=Value, and that\u0026rsquo;s how translation works on OutFox, you need to translate the value of the titles and you\u0026rsquo;re done. The theme does all the work of what string it should use.\nNow, you can\u0026rsquo;t just translate literally everything that you see. On ModelLoadError for example there\u0026rsquo;s a \u0026ldquo;%s\u0026rdquo; that means the theme or the game will put a string replacing that %s.\nAn example of that can be seen on the string %d Song Played that you\u0026rsquo;ll see on the next image.\n[Screen] HelpText=\u0026amp;BACK; Exit \u0026amp;START; Select \u0026amp;SELECT; Options \u0026amp;MENULEFT;\u0026amp;MENURIGHT;\u0026amp;MENUUP;\u0026amp;MENUDOWN; Move [ScreenWithMenuElements] HelpText=\u0026amp;BACK; Exit \u0026amp;START; Select \u0026amp;MENULEFT;\u0026amp;MENURIGHT; Move StageCounter=%s Stage EventStageCounter=Song %i You\u0026rsquo;ll also see lines like \u0026amp;START;, \u0026amp;SELECT; etc. They\u0026rsquo;re buttons that will be replaced once the game draws that string. Let\u0026rsquo;s see one of those strings in action?\n[ScreenSelectProfile] SingularSongPlayed=%d Song Played SeveralSongsPlayed=%d Songs Played PressStart=Press \u0026amp;START; to join. Here we can see that \u0026amp;START; gets replaced by a green square that represents the start button, and %d gets replace by a number that\u0026rsquo;s how many songs that profile played.\nAnother special string is \\n. It creates a line break. For example, First Line\\nSecondLine would result in:\nFirst Line\nSecond Line\nHere\u0026rsquo;s a example in action from _fallback/en.ini:\nText Context    You might also want to translate the theme in a way that someone who has never played before will understand it, instead of expecting everyone to already know what everything is. A new player might not understand what \u0026ldquo;holds\u0026rdquo; mean if that word is translated to your language, but if it was kept as \u0026ldquo;holds\u0026rdquo; the user would know that it\u0026rsquo;s the literal name of the thing and not something that should make sense in your language.\nAnother hard example are steps: in OutFox, there are 2 kinds of steps. The ones that you press in gameplay and the steps of the chart made by the author (easy steps, hard steps\u0026hellip;). In English, it\u0026rsquo;s easy to only say steps because it makes sense for both, but that isn\u0026rsquo;t the case with every language. That\u0026rsquo;s why it was decided to keep it named \u0026ldquo;steps\u0026rdquo; for the pt-BR translation of Soundwaves, for example.\nCommunity Translations for Soundwaves (OutFox default until Alpha V)    Many folks are already helping translate the new Soundwaves theme for various languages. As requested by one of our translators, we\u0026rsquo;ll mention those projects below in order to give them some visibility and encourage more people to join and help.\n° Polish - Done by Moneko\n° Japanese - Done by はぬべき(hanubeki)\n° Portuguese-Brazilian - Done by zerinho6, SHRMP0 and SheepyChris\n° German - Done by DanielRotwind\n° Hebrew - Done by Snil4\n° French - Done by Ksempac and Kaede573\n° Español - Done by JoseVarelaP\n° Hungarian - Done by KaZo75\n° Italian - Done by Gabrimax\n Tools and Practices    Translating can be boring and tedious. Sometimes it\u0026rsquo;s hard to locate \u0026amp; remove lines that shouldn\u0026rsquo;t be there or find missing ones. Because of that, translators themselves create tools to make our job easier and faster.\nTranslation Toolkit    Translation Toolkit is a tool made by Ksempac to help remove lines that are not needed anymore, warn about lines that are missing, check your progress, etc. It supports linux, Mac and Windows.\n This project is intended as a small application to automate some tasks for translators.\nIt is able to parse, analyze and fix the OutFox translation files.\n Stepmania-TranslatorViewMaker    Stepmania-TranslatorViewMaker is a tool made by Snil4. It supports any OS that has python 3 installed.\n Have you ever tried to translate a program like OutFox and wondered \u0026ldquo;Hmm, now where can I find that line in the .ini?\u0026rdquo; Now there\u0026rsquo;s no need to wonder! This program will make a translator view file for your translation .ini and make you translation job easier.\n Tiny-Webini    Tiny-Webini is a tool made by zerinho6 to help with translations of OutFox Website. While not used to translate OutFox (unless themes adopt HTML in the future), it uses the same translation system as OutFox. It makes less HTML code or none at all being necessary to translate the website. While the souce code might be able to run on other OS by building manually, it only supports Windows officially.\n Translate OutFox website with the same style OutFox uses for its translations.\n Best practices    Be constant with your words    When doing a mention to \u0026ldquo;Steps\u0026rdquo;, ask yourself: is it clear which \u0026ldquo;type of Steps\u0026rdquo; you\u0026rsquo;re referring to? We have the following \u0026ldquo;types of steps\u0026rdquo;:\n Steps, which means the notes inside of the chart or the note count. StepDifficulty, which means the difficulty selected of the chart, such as Novice, Expert, Hard. Step, which means the action of stepping in the pad or a single note. StepType, which means the quantization (timing/color) of the note (e.g. 4th = red, an entire beat; 8th = blue, half a beat; etc).  Soundwaves does not have this issue as it says \u0026ldquo;Taps\u0026rdquo; instead of Steps and directly says the difficulty.\nReload translations    Imagine you\u0026rsquo;re editing the Soundwaves ScreenCaution and want to see how the translated string looks. You don\u0026rsquo;t need to restart the entire game to see the changes, here\u0026rsquo;s what you should do instead: Exit the screen you just translated, reload the metrics (Shift + Insert; or Shift + F2 on older alpha versions) and enter the screen again.\nSome themes might have a problem where not all strings are updated when metrics are reloaded due to how they are made. In that case, unfortunately the only option is restart the game.\n OutFox Releases    Now that you have translated the latest alpha, you need to send it to OutFox somehow. This tutorial explains how you can do it!\nThe first thing to keep in mind is that each OutFox translation is hosted inside Tiny-Foxes to easily maintain and keep track of updates, so contact Team Rizu through any of their available social media profiles to get invited into Tiny-Foxes.\nIt is also required to know how git and Github works.\nExact steps are:\n Create a Github account Download and learn basic git commands such as (git status, git push, git pull, git commit and git checkout) Learn how github organization works.  Having an editor such as Visual Studio Code will make git interactions way easier as those commands are available by the interface.\nRepository    OutFox translation repositories adhere to a standard style. Repository title should be:\n\u0026ldquo;OutFox-[languageFileName[-COUNTRY]]\u0026rdquo;\n\u0026quot;-COUNTRY\u0026quot; should only be added in special cases (example: there\u0026rsquo;s Portuguese from Portugal and Brazilian Portuguese, so the Portuguese-Brazilian language file is \u0026ldquo;pt-BR.ini\u0026rdquo;).\nThe description of the repository should be:\n\u0026ldquo;[Language Name] ([languageFileName]) Translation for Project OutFox\u0026rdquo;\u0026quot;\nHere\u0026rsquo;s an example:\nOutFox-ja Japanese (ja) Translation for Project OutFox Repository Format    The repository should have 2 folders: \u0026ldquo;_fallback\u0026rdquo; and \u0026ldquo;default\u0026rdquo;. Inside the _fallback will be the _fallback translation and default translation inside the default folder.\nOnly the translation file is required to be inside the folders/repository.\nKeep track    It\u0026rsquo;s recommended that you include the version that the translation is targeting inside the files. Here\u0026rsquo;s an example:\n# Version: 4.9.7 Alpha [Common] WindowTitle=Project OutFox StepMania=OutFox Submitting to OutFox    So you finished the translation for this alpha before the release? You can then commit directly to master OR make a Pull Request with your files to OutFox-Translations so Jose_Varela includes them in the next alpha release.\nThis all assumes that you\u0026rsquo;re already a member of Tiny-Foxes and the translator team.\nWebmasters Project    Webmasters is an internal OutFox initiative to translate OutFox Website. Being a webmaster means:\n Partial access to the website backend to implement your translation files; Closer contact with the OutFox Commmunity team for quick updates and help; Having a special role in our Discord Server.  The requirements to join Webmasters are having previous experience as a long-term OutFox translator, being a Discord Server member, and receiving a special invitation from the OutFox Team.\nIf you meet those requirements, there are already tools to help you:\n  OutFoxWeb\n Constantly updated to represent elements that are possible to be translated in the website. Translating those files would result in translating 80% what is possible to translate in the website already.    Tiny-Webini\n A tool created by zerinho6 to make website translation faster, easier, better and more like OutFox. Tiny-Webini removes all need to editing HTML files and uses a single .ini file like OutFox instead, it also has translator tools such as: show what can be translated by highlighting translatable elements, changing all translatable text to show its string key instead of string value and generate the HTML files needed to apply on the website backend.    "}]